{"version":3,"sources":["webpack:///webpack/bootstrap f7a583de0693976fc639","webpack:///./src/tabs/VexmxlTime.ts","webpack:///./src/vexmxl.ts","webpack:///./~/musicxml-interfaces/lib/index.js","webpack:///(webpack)/~/path-browserify/index.js","webpack:///(webpack)/~/process/browser.js","webpack:///./src/index.ts","webpack:///./src/tabs/VexmxlChord.ts","webpack:///./src/tabs/VexmxlMeasure.ts","webpack:///./src/tabs/VexmxlNote.ts","webpack:///./src/tabs/VexmxlRest.ts","webpack:///./src/tabs/VexmxlTablature.ts","webpack:///child_process (ignored)","webpack:///xmldom (ignored)"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC/DA;IACC,YAAoB,QAAgB;QAAhB,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IAEjC,QAAQ;QACd,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1D,CAAC;IAEM,WAAW,CAAC,QAAgB;QAClC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;CAGD;AAZD,gCAYC;;;;;;;;;;ACbD,qDAA2F;AAC3F,IAAO,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAEpC,6CAA+C;AAC/C,+CAAmD;AACnD,4CAA6C;AAC7C,4CAA6C;AAC7C,kDAAuD;AAEvD,gBAAiB,SAAQ,KAAK;CAC7B;AAED,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnB,IAAI,OAAO,GAAQ;IAClB,CAAC,EAAE,GAAG;IACN,CAAC,EAAE,GAAG;IACN,CAAC,EAAE,IAAI;IACP,CAAC,EAAE,GAAG;IACN,CAAC,EAAE,GAAG;IACN,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,IAAI;IACR,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,IAAI;CACR,CAAC;AACF,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;AAEnB,IAAiB,MAAM,CA0FtB;AA1FD,WAAiB,MAAM;IAEtB,0BAAiC,GAAoB,EAAE,GAAgB;QACtE,IAAI,MAAM,GAAW,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;QAC3D,IAAI,EAAE,GAAW,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,QAAQ,GAAa,IAAI,QAAQ,CAAC,GAAG,cAAwB,CAAC;QAClE,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,CAAC;YACJ,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACjB,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACzB,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACF,CAAC;IAZe,uBAAgB,mBAY/B;IAED,kBAAyB,IAAY;QACpC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;aAChB,IAAI,CAAC,CAAC,QAAc;YACpB,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,KAAa;YACnB,IAAI,GAAG,GAAkB,gCAAU,CAAC,KAAK,CAAC,CAAC;YAC3C,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC;YAExC,IAAI,QAAQ,GAAY,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAe,CAAC,EAAE,CAAC,CAAC,wCAAwC;YAElG,sGAAsG;YACtG,IAAI,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC;YAExF,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC,6BAA6B;YAChD,IAAI,GAAG,GAAG,IAAI,iCAAe,EAAE,CAAC;YAEhC,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrC,IAAI,OAAO,GAAG,IAAI,6BAAa,EAAE,CAAC;gBAClC,IAAI,KAAkB,CAAC;gBAEvB,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,YAAY,CAAC,CAAC,CAAC;wBAClC,IAAI,UAAU,GAAG,IAAkB,CAAC;wBACpC,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;4BAC1B,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;wBAClC,CAAC;oBAEF,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;wBACnC,IAAI,IAAI,GAAG,IAAY,CAAC;wBACxB,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBAE9D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACf,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gCAC/B,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gCACvB,KAAK,GAAG,SAAS,CAAC;4BACnB,CAAC;4BACD,OAAO,CAAC,OAAO,CAAC,IAAI,uBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAE3C,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;4BACvB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;4BAE3C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gCAChB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oCACZ,MAAM,IAAI,UAAU,CAAC,iDAAiD,CAAC,CAAC;gCACzE,CAAC;4BACF,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACP,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oCAC/B,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gCACxB,CAAC;gCACD,KAAK,GAAG,IAAI,yBAAW,CAAC,QAAQ,CAAC,CAAC;4BACnC,CAAC;4BACD,KAAK,CAAC,OAAO,CAAC,IAAI,uBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;wBACtE,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACP,MAAM,IAAI,UAAU,CAAC,8BAA8B,CAAC,CAAC;wBACtD,CAAC;oBAEF,CAAC;gBAEF,CAAC;gBAED,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACxB,CAAC;gBAED,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBACxB,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACzB,CAAC;YAEF,CAAC;YAED,MAAM,CAAC,GAAG,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IAzEe,eAAQ,WAyEvB;AACF,CAAC,EA1FgB,MAAM,GAAN,cAAM,KAAN,cAAM,QA0FtB;;;;;;;;ACpkBAAkB;AAChD,+TAA+T,oBAAoB,EAAE,6DAA6D,8BAA8B,EAAE;AAClb,0CAA0C,oBAAoB,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8DAA8D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0EAA0E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sEAAsE;AACvE;AACA;AACA;AACA;AACA;AACA,CAAC,gEAAgE;AACjE;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmsCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmwDAAwD;AACzmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmwDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmwDAAwD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oEAAoE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gDAAgD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4EAA4E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmmBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,qCAAqC;AACrC,oCAAoC;AACpC,oCAAoC;AACpC,sCAAsC;AACtC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,4CAA4C;AAC5C,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,KAAK;AACL,0CAA0C;AAC1C;AACA,KAAK;AACL,0CAA0C;AAC1C;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ;AACR;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,uCAAuC;AACvC;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,uCAAuC,EAAE;AACpH;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qCAAqC;AACrC;AACA,QAAQ;AACR,6CAA6C;AAC7C;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,8CAA8C;AAC9C;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,8CAA8C;AAC9C;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,+BAA+B;AAC/B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,8BAA8B;AAC9B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,uCAAuC;AACvC,qCAAqC;AACrC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,mCAAmC;AACnC,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,4BAA4B;AAC5B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mMAAmM;AACnM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sDAAsD,iBAAiB,EAAE;AACzE;AACA;AACA;AACA;AACA;AACA,mJAAmJ;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kJAAkJ;AAClJ;AACA,KAAK;AACL;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6CAA6C;AAC7C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA,aAAa;AACb;AACA,mCAAmC,iBAAiB,EAAE;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,yCAAyC;AACzC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,yCAAyC;AACzC,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,mCAAmC,iBAAiB,EAAE;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,qCAAqC;AACrC,gC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB,EAAE;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjaAAa;AACb;AACA,mCAAmC,iBAAiB,EAAE;AACtD;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC;AACxC,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2CAA2C;AAC3C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,gCAAgC;AAChC;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB,EAAE;AAClD;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,0BAA0B;AAC1B,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,6BAA6B;AAC7B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,iBAAiB,EAAE;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,kCAAkC;AAClkCAAkC;AAClC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,uCAAuC;AACvkCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3pvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,MAAM;AAChB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8BAA8B;AAClE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;;AAEA;AACA,UAAU,UAAU;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,sBAAsB;AACrD;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;;;;;;;;AC/NA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;ACrLtC,gDAAuD;AAA/C,2DAAe;AACvB,6CAAmD;AAA3C,qDAAa;AACrB,0CAA6C;AAArC,4CAAU;AAClB,2CAA+C;AAAvC,+CAAW;AACnB,0CAA6C;AAArC,4CAAU;AAClB,0CAA6C;AAArC,4CAAU;AAClB,sCAAgC;AAAxB,gCAAM;;;;;;;;;;ACPd,4CAAwC;AAExC,iBAAyB,SAAQ,uBAAU;IAA3C;;QACS,UAAK,GAAiB,EAAE,CAAC;IAclC,CAAC;IAZO,OAAO,CAAC,IAAgB;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAEM,QAAQ;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;IAES,cAAc;QACvB,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,GAAG,CAAC,GAAG,GAAG,CAAC;IAC1C,CAAC;CAED;AAfD,kCAeC;;;;;;;;;;ACfD;IAGC;QAFQ,UAAK,GAAiB,EAAE,CAAC;IAElB,CAAC;IAET,OAAO,CAAC,IAAgB;QAC9B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAEM,QAAQ;QACd,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAEM,QAAQ;QACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9B,CAAC;CACD;AAhBD,sCAgBC;;;;;;;;;;ACjBD;IAEC,YAAoB,IAAY,EAAU,GAAW;QAAjC,SAAI,GAAJ,IAAI,CAAQ;QAAU,QAAG,GAAH,GAAG,CAAQ;IAAG,CAAC;IAElD,QAAQ;QACd,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;IACnC,CAAC;CAED;AARD,gCAQC;;;;;;;;;;ACTD,4CAAwC;AACxC,gBAAwB,SAAQ,uBAAU;IAE/B,cAAc;QACvB,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;CAED;AAND,gCAMC;;;;;;;;;;ACLD,MAAM,cAAc,GAAW,GAAG,CAAC;AACnC;IAGC,YAAoB,eAAwB,IAAI,EAAU,QAAgB,GAAG;QAAzD,iBAAY,GAAZ,YAAY,CAAgB;QAAU,UAAK,GAAL,KAAK,CAAc;QAFrE,aAAQ,GAAoB,EAAE,CAAC;IAEyC,CAAC;IAE1E,UAAU,CAAC,OAAsB;QACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAEM,QAAQ;QACd,IAAI,KAAK,GAAG,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAClD,IAAI,OAAO,GAAG,gBAAgB,GAAG,KAAK,GAAG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAEhE,MAAM,CAAC,OAAO,GAAG,uBAAuB,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjG,CAAC;CAED;AAhBD,0CAgBC;;;;;;;ACpBD,e;;;;;;ACAA,e","file":"vexmxl.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f7a583de0693976fc639","import {VextabItem} from \"./VextabItem\";\nexport abstract class VexmxlTime implements VextabItem {\n\tconstructor(private duration: string) {}\n\n\tpublic toString(): string {\n\t\treturn \":\" + this.duration + \" \" + this.representation();\n\t}\n\n\tpublic setDuration(duration: string) {\n\t\tthis.duration = duration;\n\t}\n\n\tprotected abstract representation(): string;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlTime.ts","import {Attributes, Note, parseScore, ScorePart, ScoreTimewise} from \"musicxml-interfaces\";\nimport Renderer = Vex.Flow.Renderer;\nimport RuntimeError = Vex.RuntimeError;\nimport {VexmxlChord} from \"./tabs/VexmxlChord\";\nimport {VexmxlMeasure} from \"./tabs/VexmxlMeasure\";\nimport {VexmxlNote} from \"./tabs/VexmxlNote\";\nimport {VexmxlRest} from \"./tabs/VexmxlRest\";\nimport {VexmxlTablature} from \"./tabs/VexmxlTablature\";\n\nclass ParseError extends Error {\n}\n\nlet qd = 5 + 1 / 3;\nlet timeMap: any = {\n\t1: \"w\",\n\t2: \"h\",\n\t3: \"hd\",\n\t4: \"q\",\n\t8: \"8\",\n\t12: \"8d\",\n\t16: \"16\",\n\t24: \"16d\",\n\t32: \"32\",\n};\ntimeMap[qd] = \"qd\";\n\nexport namespace VexMxl {\n\n\texport function displayTablature(tab: VexmxlTablature, div: HTMLElement): void {\n\t\tlet artist: Artist = new Artist(10, 10, 600, {scale: 0.8});\n\t\tlet vt: VexTab = new VexTab(artist);\n\t\tlet renderer: Renderer = new Renderer(div, Renderer.Backends.SVG);\n\t\tlet parsed = tab.toString();\n\n\t\ttry {\n\t\t\tvt.parse(parsed);\n\t\t\tartist.render(renderer);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\texport function parseXML(path: string): Promise<VexmxlTablature> {\n\t\treturn fetch(path)\n\t\t\t.then((response: Body) => {\n\t\t\t\treturn response.text();\n\t\t\t})\n\t\t\t.then((score: string) => {\n\t\t\t\tlet doc: ScoreTimewise = parseScore(score);\n\t\t\t\tconsole.debug(\"Converted XML to \", doc);\n\n\t\t\t\tlet partName: string = (doc.partList[0] as ScorePart).id; // TODO: let the part choice to the user\n\n\t\t\t\t// let timeSignature: TimeSignature = new TimeSignature(doc.measures[0].parts[partName][1].divisions);\n\t\t\t\tlet bpm = doc.measures[0].parts[partName][1].directionTypes[0].metronome.perMinute.data;\n\n\t\t\t\tlet divisions = 1; // Number of notes in measure\n\t\t\t\tlet tab = new VexmxlTablature();\n\n\t\t\t\tfor (let docMeasure of doc.measures) {\n\t\t\t\t\tlet measure = new VexmxlMeasure();\n\t\t\t\t\tlet chord: VexmxlChord;\n\n\t\t\t\t\tfor (let elem of docMeasure.parts[partName]) {\n\t\t\t\t\t\tif (elem._class === \"Attributes\") {\n\t\t\t\t\t\t\tlet attributes = elem as Attributes;\n\t\t\t\t\t\t\tif (attributes.divisions) {\n\t\t\t\t\t\t\t\tdivisions = attributes.divisions;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if (elem._class === \"Note\") {\n\t\t\t\t\t\t\tlet note = elem as Note;\n\t\t\t\t\t\t\tlet duration = timeMap[1 / (note.duration / (divisions * 4))];\n\n\t\t\t\t\t\t\tif (note.rest) {\n\t\t\t\t\t\t\t\tif (chord && chord.notEmpty()) {\n\t\t\t\t\t\t\t\t\tmeasure.addTime(chord);\n\t\t\t\t\t\t\t\t\tchord = undefined;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmeasure.addTime(new VexmxlRest(duration));\n\n\t\t\t\t\t\t\t} else if (note.pitch) {\n\t\t\t\t\t\t\t\tlet tech = note.notations[0].technicals[0];\n\n\t\t\t\t\t\t\t\tif (note.chord) {\n\t\t\t\t\t\t\t\t\tif (!chord) {\n\t\t\t\t\t\t\t\t\t\tthrow new ParseError(\"Chord element has not been initialized properly\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (chord && chord.notEmpty()) {\n\t\t\t\t\t\t\t\t\t\tmeasure.addTime(chord);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tchord = new VexmxlChord(duration);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchord.addNote(new VexmxlNote(tech.fret.fret, tech.string.stringNum));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new ParseError(\"note has not been recognized\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (chord && chord.notEmpty()) {\n\t\t\t\t\t\tmeasure.addTime(chord);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (measure.notEmpty()) {\n\t\t\t\t\t\ttab.addMeasure(measure);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn tab;\n\t\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/vexmxl.ts","/**\n * (C) Josh Netterfield <joshua@nettek.ca> 2015.\n * Part of the musicxml-interfaces <https://github.com/ripieno/musicxml-interfaces>.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n *****************************************************************\n *\n * MusicXML™ Version 3.0\n *\n * Copyright © 2004-2011 MakeMusic, Inc.\n * http://www.makemusic.com/\n *\n * This MusicXML™ work is being provided by the copyright\n * holder under the MusicXML Public License Version 3.0,\n * available from:\n *\n * http://www.musicxml.org/dtds/license.html\n * This file contains multiple DTDs.\n */\n\"use strict\";\n/*---- Parsing API ------------------------------------------------------------------------------*/\n/**\n * Converts a MusicXML document into a MusicXML parttime-inspired JSON object.\n * See ScoreTimewise for full return type specification.\n *\n * This function will accept timepart MusicXML files, but will still return a\n * structure similar to parttime.\n */\nfunction parseScore(score) {\n    var dom = xmlToParttimeDoc(score);\n    return xmlToScoreTimewise(dom.documentElement);\n}\nexports.parseScore = parseScore;\n/**\n * Reads a document, and returns header information.\n *\n * ScoreHeader is a subset of ScoreTimewise, so you can always just call MusicXML.parse.score.\n * This function is a bit faster though, if you only care about metadata.\n */\nfunction paseScoreHeader(score) {\n    return xmlToScoreHeader(xmlToDoc(score).documentElement);\n}\nexports.paseScoreHeader = paseScoreHeader;\n/**\n * Converts a MusicXML <measure /> from a **parttime** document into JSON.\n */\nfunction parseMeasure(str) {\n    return xmlToMeasure(xmlToDoc(str).documentElement);\n}\nexports.parseMeasure = parseMeasure;\n/**\n * Converts a MusicXML <note /> into JSON.\n */\nfunction parseNote(str) {\n    return xmlToNote(xmlToDoc(str).documentElement);\n}\nexports.parseNote = parseNote;\n/**\n * Converts a MusicXML <clef /> into JSON.\n */\nfunction parseClef(str) {\n    return xmlToClef(xmlToDoc(str).documentElement);\n}\nexports.parseClef = parseClef;\n/**\n * Converts a MusicXML <time /> into JSON.\n */\nfunction parseTime(str) {\n    return xmlToTime(xmlToDoc(str).documentElement);\n}\nexports.parseTime = parseTime;\n/**\n * Converts a MusicXML <key /> into JSON.\n */\nfunction parseKey(str) {\n    return xmlToKey(xmlToDoc(str).documentElement);\n}\nexports.parseKey = parseKey;\n/**\n * Converts a MusicXML <part-symbol /> into JSON.\n */\nfunction parsePartSymbol(str) {\n    return xmlToPartSymbol(xmlToDoc(str).documentElement);\n}\nexports.parsePartSymbol = parsePartSymbol;\n/**\n * Converts a MusicXML <backup /> into JSON.\n */\nfunction parseBackup(str) {\n    return xmlToBackup(xmlToDoc(str).documentElement);\n}\nexports.parseBackup = parseBackup;\n/**\n * Converts a MusicXML <harmony /> into JSON.\n */\nfunction parseHarmony(str) {\n    return xmlToHarmony(xmlToDoc(str).documentElement);\n}\nexports.parseHarmony = parseHarmony;\n/**\n * Converts a MusicXML <forward /> into JSON.\n */\nfunction parseForward(str) {\n    return xmlToForward(xmlToDoc(str).documentElement);\n}\nexports.parseForward = parseForward;\n/**\n * Converts a MusicXML <print /> into JSON.\n */\nfunction parsePrint(str) {\n    return xmlToPrint(xmlToDoc(str).documentElement);\n}\nexports.parsePrint = parsePrint;\n/**\n * Converts a MusicXML <figured-bass /> into JSON.\n */\nfunction parseFiguredBass(str) {\n    return xmlToFiguredBass(xmlToDoc(str).documentElement);\n}\nexports.parseFiguredBass = parseFiguredBass;\n/**\n * Converts a MusicXML <direction /> into JSON.\n */\nfunction parseDirection(str) {\n    return xmlToDirection(xmlToDoc(str).documentElement);\n}\nexports.parseDirection = parseDirection;\n/**\n * Converts a MusicXML <attributes /> object into JSON.\n */\nfunction parseAttributes(str) {\n    return xmlToAttributes(xmlToDoc(str).documentElement);\n}\nexports.parseAttributes = parseAttributes;\n/**\n * Converts a MusicXML <sound /> into JSON.\n */\nfunction parseSound(str) {\n    return xmlToSound(xmlToDoc(str).documentElement);\n}\nexports.parseSound = parseSound;\n/**\n * Converts a MusicXML <barline /> into JSON.\n */\nfunction parseBarline(str) {\n    return xmlToBarline(xmlToDoc(str).documentElement);\n}\nexports.parseBarline = parseBarline;\n/**\n * Converts a MusicXML <grouping /> into JSON.\n */\nfunction parseGrouping(str) {\n    return xmlToGrouping(xmlToDoc(str).documentElement);\n}\nexports.parseGrouping = parseGrouping;\n/*---- Serialization API ------------------------------------------------------------------------*/\nfunction serializeScore(score, parttime) {\n    if (parttime === void 0) { parttime = false; }\n    var timewise = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<!DOCTYPE score-timewise\\n  PUBLIC \\\"-//Recordare//DTD MusicXML 3.0 Timewise//EN\\\" \\\"http://www.musicxml.org/dtds/timewise.dtd\\\">\\n<score-timewise version=\\\"3.0\\\">\\n\" + scoreHeaderToXML(score).join(\"\\n\").split(\"\\n\").map(function (line) { return \"  \" + line; }).join(\"\\n\") + \"\\n\" + score.measures.map(function (measure) { return measureToXML(measure); }).join(\"\\n\")\n        .split(\"\\n\").map(function (line) { return \"  \" + line; }).join(\"\\n\") + \"\\n</score-timewise>\";\n    if (!parttime) {\n        return timewise;\n    }\n    return timewiseToPartwise(timewise);\n}\nexports.serializeScore = serializeScore;\nfunction serializeScoreHeader(scoreHeader) {\n    return scoreHeaderToXML(scoreHeader).join(\"\\n\");\n}\nexports.serializeScoreHeader = serializeScoreHeader;\nexports.serializeMeasure = measureToXML;\nexports.serializeNote = noteToXML;\nexports.serializeClef = clefToXML;\nexports.serializeTime = timeToXML;\nexports.serializeKey = keyToXML;\nexports.serializePartSymbol = partSymbolToXML;\nexports.serializeBackup = backupToXML;\nexports.serializeHarmony = harmonyToXML;\nexports.serializeForward = forwardToXML;\nexports.serializePrint = printToXML;\nexports.serializeFiguredBass = figuredBassToXML;\nexports.serializeDirection = directionToXML;\nexports.serializeAttributes = attributesToXML;\nexports.serializeSound = soundToXML;\nexports.serializeBarline = barlineToXML;\nexports.serializeGrouping = groupingToXML;\nvar process;\nvar isIE = typeof window !== \"undefined\" && \"ActiveXObject\" in window;\nvar isNode = typeof window === \"undefined\" || typeof process !== \"undefined\" && !process.browser;\nvar xmlToParttimeDoc;\nvar timewiseToPartwise;\nvar xmlToDoc;\n(function init() {\n    var parttimeXSLBuffer = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\"> <xsl:output method=\\\"xml\\\" indent=\\\"yes\\\" encoding=\\\"UTF-8\\\" omit-xml-declaration=\\\"no\\\" standalone=\\\"no\\\" doctype-system=\\\"http://www.musicxml.org/dtds/timewise.dtd\\\" doctype-public=\\\"-//Recordare//DTD MusicXML 3.0 Timewise//EN\\\" /> <xsl:template match=\\\"/\\\"> <xsl:apply-templates select=\\\"./score-partwise\\\"/> <xsl:apply-templates select=\\\"./score-timewise\\\"/> </xsl:template> <xsl:template match=\\\"score-timewise\\\"> <xsl:copy-of select=\\\".\\\" /> </xsl:template> <xsl:template match=\\\"text()\\\"> <xsl:value-of select=\\\".\\\" /> </xsl:template> <xsl:template match=\\\"*|@*|comment()|processing-instruction()\\\"> <xsl:copy><xsl:apply-templates select=\\\"*|@*|comment()|processing-instruction()|text()\\\" /></xsl:copy> </xsl:template> <xsl:template match=\\\"score-partwise\\\"> <xsl:element name=\\\"score-timewise\\\"> <xsl:apply-templates select=\\\"@version[.!='1.0']\\\"/> <xsl:apply-templates select=\\\"work\\\"/> <xsl:apply-templates select=\\\"movement-number\\\"/> <xsl:apply-templates select=\\\"movement-title\\\"/> <xsl:apply-templates select=\\\"identification\\\"/> <xsl:apply-templates select=\\\"defaults\\\"/> <xsl:apply-templates select=\\\"credit\\\"/> <xsl:apply-templates select=\\\"part-list\\\"/> <xsl:for-each select=\\\"part[1]/measure\\\"> <xsl:variable name=\\\"measure-number\\\"> <xsl:value-of select=\\\"@number\\\"/> </xsl:variable> <xsl:element name=\\\"measure\\\"> <xsl:attribute name=\\\"number\\\"> <xsl:value-of select=\\\"$measure-number\\\"/> </xsl:attribute> <xsl:if test=\\\"@implicit[. = 'yes']\\\"> <xsl:attribute name=\\\"implicit\\\"> <xsl:value-of select=\\\"@implicit\\\"/> </xsl:attribute> </xsl:if> <xsl:if test=\\\"@non-controlling[. = 'yes']\\\"> <xsl:attribute name=\\\"non-controlling\\\"> <xsl:value-of select=\\\"@non-controlling\\\"/> </xsl:attribute> </xsl:if> <xsl:if test=\\\"@width\\\"> <xsl:attribute name=\\\"width\\\"> <xsl:value-of select=\\\"@width\\\"/> </xsl:attribute> </xsl:if> <xsl:for-each select=\\\"../../part/measure\\\"> <xsl:if test=\\\"@number=$measure-number\\\"> <xsl:element name=\\\"part\\\"> <xsl:attribute name=\\\"id\\\"> <xsl:value-of select=\\\"parent::part/@id\\\"/> </xsl:attribute> <xsl:apply-templates /> </xsl:element> </xsl:if> </xsl:for-each> </xsl:element> </xsl:for-each> </xsl:element> </xsl:template> </xsl:stylesheet>\";\n    var timepartXSLBuffer = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <xsl:stylesheet version=\\\"1.0\\\" xmlns:xsl=\\\"http://www.w3.org/1999/XSL/Transform\\\"> <xsl:output method=\\\"xml\\\" indent=\\\"yes\\\" encoding=\\\"UTF-8\\\" omit-xml-declaration=\\\"no\\\" standalone=\\\"no\\\" doctype-system=\\\"http://www.musicxml.org/dtds/partwise.dtd\\\" doctype-public=\\\"-//Recordare//DTD MusicXML 3.0 Partwise//EN\\\" /> <xsl:template match=\\\"/\\\"> <xsl:apply-templates select=\\\"./score-partwise\\\"/> <xsl:apply-templates select=\\\"./score-timewise\\\"/> </xsl:template> <xsl:template match=\\\"score-partwise\\\"> <xsl:copy-of select=\\\".\\\" /> </xsl:template> <xsl:template match=\\\"text()\\\"> <xsl:value-of select=\\\".\\\" /> </xsl:template> <xsl:template match=\\\"*|@*|comment()|processing-instruction()\\\"> <xsl:copy><xsl:apply-templates select=\\\"*|@*|comment()|processing-instruction()|text()\\\" /></xsl:copy> </xsl:template> <xsl:template match=\\\"score-timewise\\\"> <xsl:element name=\\\"score-partwise\\\"> <xsl:apply-templates select=\\\"@version[.!='1.0']\\\"/> <xsl:apply-templates select=\\\"work\\\"/> <xsl:apply-templates select=\\\"movement-number\\\"/> <xsl:apply-templates select=\\\"movement-title\\\"/> <xsl:apply-templates select=\\\"identification\\\"/> <xsl:apply-templates select=\\\"defaults\\\"/> <xsl:apply-templates select=\\\"credit\\\"/> <xsl:apply-templates select=\\\"part-list\\\"/> <xsl:for-each select=\\\"measure[1]/part\\\"> <xsl:variable name=\\\"part-id\\\"> <xsl:value-of select=\\\"@id\\\"/> </xsl:variable> <xsl:element name=\\\"part\\\"> <xsl:copy-of select=\\\"@id\\\" /> <xsl:for-each select=\\\"../../measure/part\\\"> <xsl:if test=\\\"@id=$part-id\\\"> <xsl:element name=\\\"measure\\\"> <xsl:attribute name=\\\"number\\\"> <xsl:value-of select=\\\"parent::measure/@number\\\"/> </xsl:attribute> <xsl:if test=\\\"parent::measure/@implicit[. = 'yes']\\\"> <xsl:attribute name=\\\"implicit\\\"> <xsl:value-of select=\\\"parent::measure/@implicit\\\"/> </xsl:attribute> </xsl:if> <xsl:if test=\\\"parent::measure/@non-controlling[. = 'yes']\\\"> <xsl:attribute name=\\\"non-controlling\\\"> <xsl:value-of select=\\\"parent::measure/@non-controlling\\\"/> </xsl:attribute> </xsl:if> <xsl:if test=\\\"parent::measure/@width\\\"> <xsl:attribute name=\\\"width\\\"> <xsl:value-of select=\\\"parent::measure/@width\\\"/> </xsl:attribute> </xsl:if> <xsl:apply-templates /> </xsl:element> </xsl:if> </xsl:for-each> </xsl:element> </xsl:for-each> </xsl:element> </xsl:template> </xsl:stylesheet>\";\n    if (isIE) {\n        var DOMParser = window.DOMParser;\n        xmlToDoc = function (str) {\n            return (new DOMParser).parseFromString(str, \"text/xml\");\n        };\n        xmlToParttimeDoc = function (str) {\n            var xslt = new ActiveXObject(\"Msxml2.XSLTemplate\");\n            var xmlDoc = new ActiveXObject(\"Msxml2.DOMDocument\");\n            var xslDoc = new ActiveXObject(\"Msxml2.FreeThreadedDOMDocument\");\n            // Why these aren't set by default completely flabbergasts me.\n            xmlDoc.validateOnParse = false;\n            xslDoc.validateOnParse = false;\n            xmlDoc.resolveExternals = false;\n            xslDoc.resolveExternals = false;\n            xmlDoc.loadXML(str);\n            xslDoc.loadXML(parttimeXSLBuffer);\n            xslt.stylesheet = xslDoc;\n            var xslProc = xslt.createProcessor();\n            xslProc.input = xmlDoc;\n            xslProc.transform();\n            return xmlToDoc(xslProc.output);\n        };\n        timewiseToPartwise = function (str) {\n            var xslt = new ActiveXObject(\"Msxml2.XSLTemplate\");\n            var xmlDoc = new ActiveXObject(\"Msxml2.DOMDocument\");\n            var xslDoc = new ActiveXObject(\"Msxml2.FreeThreadedDOMDocument\");\n            // Why these aren't set by default completely flabbergasts me.\n            xmlDoc.validateOnParse = false;\n            xslDoc.validateOnParse = false;\n            xmlDoc.resolveExternals = false;\n            xslDoc.resolveExternals = false;\n            xmlDoc.loadXML(str);\n            xslDoc.loadXML(timepartXSLBuffer);\n            xslt.stylesheet = xslDoc;\n            var xslProc = xslt.createProcessor();\n            xslProc.input = xmlDoc;\n            xslProc.transform();\n            return xslProc.output;\n        };\n    }\n    else if (isNode) {\n        var DOMParser = require(\"xmldom\").DOMParser;\n        var spawnSync_1 = require(\"child_process\").spawnSync;\n        var path_1 = require(\"path\");\n        xmlToDoc = function (str) {\n            return (new DOMParser).parseFromString(str, \"text/xml\");\n        };\n        xmlToParttimeDoc = function (str) {\n            var res = spawnSync_1(\"xsltproc\", [\"--nonet\", path_1.join(__dirname, \"..\", \"vendor\", \"musicxml-dtd\", \"parttime.xsl\"), \"-\"], {\n                input: str,\n                env: {\n                    \"XML_CATALOG_FILES\": path_1.join(__dirname, \"..\", \"vendor\", \"musicxml-dtd\", \"catalog.xml\"),\n                }\n            });\n            if (res.error) {\n                throw res.error;\n            }\n            return xmlToDoc(res.stdout.toString());\n        };\n        timewiseToPartwise = function (str) {\n            var res = spawnSync_1(\"xsltproc\", [\"--nonet\", path_1.join(__dirname, \"..\", \"vendor\", \"musicxml-dtd\", \"parttime.xsl\"), \"-\"], {\n                input: str,\n                env: {\n                    \"XML_CATALOG_FILES\": path_1.join(__dirname, \"..\", \"vendor\", \"musicxml-dtd\", \"catalog.xml\"),\n                }\n            });\n            if (res.error) {\n                throw res.error;\n            }\n            return res.stdout.toString();\n        };\n    }\n    else {\n        var DOMParser = window.DOMParser;\n        var parttimeXSLDoc = (new DOMParser).parseFromString(parttimeXSLBuffer, \"text/xml\");\n        var timepartXSLDoc = (new DOMParser).parseFromString(timepartXSLBuffer, \"text/xml\");\n        var parttimeXSLProcessor_1 = new XSLTProcessor;\n        parttimeXSLProcessor_1.importStylesheet(parttimeXSLDoc);\n        var timepartXSLProcessor_1 = new XSLTProcessor;\n        timepartXSLProcessor_1.importStylesheet(timepartXSLDoc);\n        xmlToDoc = function (str) {\n            return (new DOMParser).parseFromString(str, \"text/xml\");\n        };\n        xmlToParttimeDoc = function (str) {\n            var dom = (new DOMParser).parseFromString(str, \"text/xml\");\n            return parttimeXSLProcessor_1.transformToDocument(dom);\n        };\n        timewiseToPartwise = function (str) {\n            var dom = (new DOMParser).parseFromString(str, \"text/xml\");\n            return new XMLSerializer().serializeToString(timepartXSLProcessor_1.transformToDocument(dom).documentElement);\n        };\n    }\n}());\nfunction popFront(t) {\n    return t.slice(1);\n}\nfunction getString(ch, required) {\n    return (ch.nodeType === ch.ATTRIBUTE_NODE ? ch.value : ch.textContent).trim();\n}\nfunction getNumber(ch, required) {\n    var s = getString(ch, required);\n    if (s.toLowerCase().indexOf(\"0x\") === 0) {\n        return parseInt(s, 16);\n    }\n    else {\n        return parseFloat(s);\n    }\n}\nfunction toCamelCase(input) {\n    return input.toLowerCase().replace(/-(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n    });\n}\n/**\n * The start-stop entity is used for musical elements that\n * can either start or stop, such as slurs, tuplets, and\n * wedges.\n *\n * See also start-stop-continue and start-stop-single.\n *\n * The values of start and stop refer to how an\n * element appears in musical score order, not in MusicXML\n * document order. An element with a stop attribute may\n * precede the corresponding element with a start attribute\n * within a MusicXML document. This is particularly common\n * in multi-staff music. For example, the stopping point for\n * a slur may appear in staff 1 before the starting point for\n * the slur appears in staff 2 later in the document.\n */\n(function (StartStop) {\n    StartStop[StartStop[\"Start\"] = 0] = \"Start\";\n    StartStop[StartStop[\"Stop\"] = 1] = \"Stop\";\n})(exports.StartStop || (exports.StartStop = {}));\nvar StartStop = exports.StartStop;\n/**\n * The start-stop-continue (as opposed to the start-stop entity)\n * entity is used when there is a need to refer to an\n * intermediate point in the symbol, as for complex slurs\n * or for specifying formatting of symbols across system\n * breaks.\n *\n * The values of start, stop, and continue refer to how an\n * element appears in musical score order, not in MusicXML\n * document order. An element with a stop attribute may\n * precede the corresponding element with a start attribute\n * within a MusicXML document. This is particularly common\n * in multi-staff music. For example, the stopping point for\n * a slur may appear in staff 1 before the starting point for\n * the slur appears in staff 2 later in the document.\n */\n(function (StartStopContinue) {\n    StartStopContinue[StartStopContinue[\"Start\"] = 0] = \"Start\";\n    StartStopContinue[StartStopContinue[\"Stop\"] = 1] = \"Stop\";\n    StartStopContinue[StartStopContinue[\"Continue\"] = 2] = \"Continue\";\n})(exports.StartStopContinue || (exports.StartStopContinue = {}));\nvar StartStopContinue = exports.StartStopContinue;\n/**\n * The start-stop-single entity (as opposed to start-stop\n * and start-stop-continue) is used when the same\n * element is used for multi-note and single-note notations,\n * as for tremolos.\n *\n * The values of start and stop refer to how an\n * element appears in musical score order, not in MusicXML\n * document order. An element with a stop attribute may\n * precede the corresponding element with a start attribute\n * within a MusicXML document. This is particularly common\n * in multi-staff music. For example, the stopping point for\n * a slur may appear in staff 1 before the starting point for\n * the slur appears in staff 2 later in the document.\n */\n(function (StartStopSingle) {\n    StartStopSingle[StartStopSingle[\"Single\"] = 3] = \"Single\";\n    StartStopSingle[StartStopSingle[\"Start\"] = 0] = \"Start\";\n    StartStopSingle[StartStopSingle[\"Stop\"] = 1] = \"Stop\";\n})(exports.StartStopSingle || (exports.StartStopSingle = {}));\nvar StartStopSingle = exports.StartStopSingle;\n/**\n * The symbol-size entity is used to indicate full vs.\n * cue-sized vs. oversized symbols. The large value\n * for oversized symbols was added in version 1.1.\n */\n(function (SymbolSize) {\n    /**\n     * Context-dependant.\n     */\n    SymbolSize[SymbolSize[\"Unspecified\"] = 0] = \"Unspecified\";\n    SymbolSize[SymbolSize[\"Full\"] = 1] = \"Full\";\n    SymbolSize[SymbolSize[\"Cue\"] = 2] = \"Cue\";\n    /**\n     * Oversized.\n     */\n    SymbolSize[SymbolSize[\"Large\"] = 3] = \"Large\";\n})(exports.SymbolSize || (exports.SymbolSize = {}));\nvar SymbolSize = exports.SymbolSize;\n/**\n * The above-below type is used to indicate whether one\n * element appears above or below another element.\n */\n(function (AboveBelow) {\n    AboveBelow[AboveBelow[\"Above\"] = 1] = \"Above\";\n    AboveBelow[AboveBelow[\"Below\"] = 2] = \"Below\";\n    AboveBelow[AboveBelow[\"Unspecified\"] = 0] = \"Unspecified\";\n})(exports.AboveBelow || (exports.AboveBelow = {}));\nvar AboveBelow = exports.AboveBelow;\n/**\n * Specifies orientation.\n */\n(function (OverUnder) {\n    OverUnder[OverUnder[\"Over\"] = 1] = \"Over\";\n    OverUnder[OverUnder[\"Under\"] = 2] = \"Under\";\n    OverUnder[OverUnder[\"Unspecified\"] = 0] = \"Unspecified\";\n})(exports.OverUnder || (exports.OverUnder = {}));\nvar OverUnder = exports.OverUnder;\n/**\n * The up-down entity is used for arrow direction,\n * indicating which way the tip is pointing.\n */\n(function (UpDown) {\n    UpDown[UpDown[\"Down\"] = 1] = \"Down\";\n    UpDown[UpDown[\"Up\"] = 0] = \"Up\";\n})(exports.UpDown || (exports.UpDown = {}));\nvar UpDown = exports.UpDown;\n/**\n * The top-bottom entity is used to indicate the top or\n * bottom part of a vertical shape like non-arpeggiate.\n */\n(function (TopBottom) {\n    TopBottom[TopBottom[\"Top\"] = 0] = \"Top\";\n    TopBottom[TopBottom[\"Bottom\"] = 1] = \"Bottom\";\n})(exports.TopBottom || (exports.TopBottom = {}));\nvar TopBottom = exports.TopBottom;\n/**\n * The left-right entity is used to indicate whether one\n * element appears to the left or the right of another\n * element.\n */\n(function (LeftRight) {\n    LeftRight[LeftRight[\"Right\"] = 1] = \"Right\";\n    LeftRight[LeftRight[\"Left\"] = 0] = \"Left\";\n})(exports.LeftRight || (exports.LeftRight = {}));\nvar LeftRight = exports.LeftRight;\n/**\n * The enclosure-shape entity describes the shape and\n * presence / absence of an enclosure around text. A bracket\n * enclosure is similar to a rectangle with the bottom line\n * missing, as is common in jazz notation.\n */\n(function (EnclosureShape) {\n    EnclosureShape[EnclosureShape[\"Circle\"] = 3] = \"Circle\";\n    EnclosureShape[EnclosureShape[\"Bracket\"] = 4] = \"Bracket\";\n    EnclosureShape[EnclosureShape[\"Triangle\"] = 5] = \"Triangle\";\n    EnclosureShape[EnclosureShape[\"Diamond\"] = 6] = \"Diamond\";\n    EnclosureShape[EnclosureShape[\"None\"] = 7] = \"None\";\n    EnclosureShape[EnclosureShape[\"Square\"] = 1] = \"Square\";\n    EnclosureShape[EnclosureShape[\"Oval\"] = 2] = \"Oval\";\n    EnclosureShape[EnclosureShape[\"Rectangle\"] = 0] = \"Rectangle\";\n})(exports.EnclosureShape || (exports.EnclosureShape = {}));\nvar EnclosureShape = exports.EnclosureShape;\n(function (NormalItalic) {\n    NormalItalic[NormalItalic[\"Italic\"] = 1] = \"Italic\";\n    NormalItalic[NormalItalic[\"Normal\"] = 0] = \"Normal\";\n})(exports.NormalItalic || (exports.NormalItalic = {}));\nvar NormalItalic = exports.NormalItalic;\n(function (NormalBold) {\n    NormalBold[NormalBold[\"Bold\"] = 2] = \"Bold\";\n    NormalBold[NormalBold[\"Normal\"] = 0] = \"Normal\";\n})(exports.NormalBold || (exports.NormalBold = {}));\nvar NormalBold = exports.NormalBold;\n(function (LeftCenterRight) {\n    LeftCenterRight[LeftCenterRight[\"Right\"] = 1] = \"Right\";\n    LeftCenterRight[LeftCenterRight[\"Center\"] = 2] = \"Center\";\n    LeftCenterRight[LeftCenterRight[\"Left\"] = 0] = \"Left\";\n})(exports.LeftCenterRight || (exports.LeftCenterRight = {}));\nvar LeftCenterRight = exports.LeftCenterRight;\n(function (TopMiddleBottomBaseline) {\n    TopMiddleBottomBaseline[TopMiddleBottomBaseline[\"Top\"] = 0] = \"Top\";\n    TopMiddleBottomBaseline[TopMiddleBottomBaseline[\"Middle\"] = 1] = \"Middle\";\n    TopMiddleBottomBaseline[TopMiddleBottomBaseline[\"Baseline\"] = 3] = \"Baseline\";\n    TopMiddleBottomBaseline[TopMiddleBottomBaseline[\"Bottom\"] = 2] = \"Bottom\";\n})(exports.TopMiddleBottomBaseline || (exports.TopMiddleBottomBaseline = {}));\nvar TopMiddleBottomBaseline = exports.TopMiddleBottomBaseline;\n(function (DirectionMode) {\n    DirectionMode[DirectionMode[\"Lro\"] = 2] = \"Lro\";\n    DirectionMode[DirectionMode[\"Rlo\"] = 3] = \"Rlo\";\n    DirectionMode[DirectionMode[\"Ltr\"] = 0] = \"Ltr\";\n    DirectionMode[DirectionMode[\"Rtl\"] = 1] = \"Rtl\";\n})(exports.DirectionMode || (exports.DirectionMode = {}));\nvar DirectionMode = exports.DirectionMode;\n(function (StraightCurved) {\n    StraightCurved[StraightCurved[\"Curved\"] = 1] = \"Curved\";\n    StraightCurved[StraightCurved[\"Straight\"] = 0] = \"Straight\";\n})(exports.StraightCurved || (exports.StraightCurved = {}));\nvar StraightCurved = exports.StraightCurved;\n(function (SolidDashedDottedWavy) {\n    SolidDashedDottedWavy[SolidDashedDottedWavy[\"Dashed\"] = 1] = \"Dashed\";\n    SolidDashedDottedWavy[SolidDashedDottedWavy[\"Wavy\"] = 3] = \"Wavy\";\n    SolidDashedDottedWavy[SolidDashedDottedWavy[\"Dotted\"] = 2] = \"Dotted\";\n    SolidDashedDottedWavy[SolidDashedDottedWavy[\"Solid\"] = 0] = \"Solid\";\n})(exports.SolidDashedDottedWavy || (exports.SolidDashedDottedWavy = {}));\nvar SolidDashedDottedWavy = exports.SolidDashedDottedWavy;\n(function (NormalAngledSquare) {\n    NormalAngledSquare[NormalAngledSquare[\"Angled\"] = 1] = \"Angled\";\n    NormalAngledSquare[NormalAngledSquare[\"Square\"] = 2] = \"Square\";\n    NormalAngledSquare[NormalAngledSquare[\"Normal\"] = 0] = \"Normal\";\n})(exports.NormalAngledSquare || (exports.NormalAngledSquare = {}));\nvar NormalAngledSquare = exports.NormalAngledSquare;\n(function (UprightInverted) {\n    UprightInverted[UprightInverted[\"Upright\"] = 0] = \"Upright\";\n    UprightInverted[UprightInverted[\"Inverted\"] = 1] = \"Inverted\";\n})(exports.UprightInverted || (exports.UprightInverted = {}));\nvar UprightInverted = exports.UprightInverted;\n(function (UpperMainBelow) {\n    UpperMainBelow[UpperMainBelow[\"Main\"] = 1] = \"Main\";\n    UpperMainBelow[UpperMainBelow[\"Below\"] = 2] = \"Below\";\n    UpperMainBelow[UpperMainBelow[\"Upper\"] = 0] = \"Upper\";\n})(exports.UpperMainBelow || (exports.UpperMainBelow = {}));\nvar UpperMainBelow = exports.UpperMainBelow;\n(function (WholeHalfUnison) {\n    WholeHalfUnison[WholeHalfUnison[\"Unison\"] = 2] = \"Unison\";\n    WholeHalfUnison[WholeHalfUnison[\"Whole\"] = 0] = \"Whole\";\n    WholeHalfUnison[WholeHalfUnison[\"Half\"] = 1] = \"Half\";\n})(exports.WholeHalfUnison || (exports.WholeHalfUnison = {}));\nvar WholeHalfUnison = exports.WholeHalfUnison;\n(function (WholeHalfNone) {\n    WholeHalfNone[WholeHalfNone[\"None\"] = 3] = \"None\";\n    WholeHalfNone[WholeHalfNone[\"Whole\"] = 0] = \"Whole\";\n    WholeHalfNone[WholeHalfNone[\"Half\"] = 1] = \"Half\";\n})(exports.WholeHalfNone || (exports.WholeHalfNone = {}));\nvar WholeHalfNone = exports.WholeHalfNone;\nfunction xmlToEncodingDate(node) {\n    var text = getString(node, true);\n    if (text.length < 10) {\n        return null;\n    }\n    return {\n        year: parseFloat(text.slice(0, 4)),\n        month: parseFloat(text.slice(5, 7)),\n        day: parseFloat(text.slice(8, 10))\n    };\n}\nfunction xmlToMeasure(node) {\n    var ret = {};\n    var foundImplicit = false;\n    var foundNonControlling = false;\n    var foundNumber = false;\n    var foundWidth = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"part\") {\n            var dataPart = xmlToPart(ch);\n            ret.parts = ret.parts || {};\n            ret.parts[ch.getAttribute(\"id\")] = dataPart;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getString(ch2, true);\n            ret.number = dataNumber;\n            foundNumber = true;\n        }\n        if (ch2.name === \"implicit\") {\n            var dataImplicit = xmlToYesNo(ch2, true);\n            ret.implicit = dataImplicit;\n            foundImplicit = true;\n        }\n        if (ch2.name === \"width\") {\n            var dataWidth = getNumber(ch2, true);\n            ret.width = dataWidth;\n            foundWidth = true;\n        }\n        if (ch2.name === \"non-controlling\") {\n            var dataNonControlling = xmlToYesNo(ch2, true);\n            ret.nonControlling = dataNonControlling;\n            foundNonControlling = true;\n        }\n    }\n    if (!foundNumber) {\n        ret.number = \"\";\n    }\n    if (!foundImplicit) {\n        ret.implicit = false;\n    }\n    if (!foundNonControlling) {\n        ret.nonControlling = false;\n    }\n    if (!foundWidth) {\n        ret.width = null;\n    }\n    return ret;\n}\nfunction xmlToYesNo(p, required) {\n    var s = getString(p, true);\n    if (s == \"no\") {\n        return false;\n    }\n    if (s == \"yes\") {\n        return true;\n    }\n    return false;\n}\nfunction xmlToNoteheadText(p) {\n    // TODO\n    return null;\n}\nfunction xmlToPartNameDisplay(p) {\n    // TODO\n    return null;\n}\nfunction xmlToPartAbbreviationDisplay(p) {\n    // TODO\n    return null;\n}\nfunction xmlToGroupNameDisplay(p) {\n    // TODO\n    return null;\n}\nfunction xmlToGroupAbbreviationDisplay(p) {\n    // TODO\n    return null;\n}\nfunction xmlToLyric(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundJustify = false;\n    var foundDefaultX = false;\n    var foundRelativeY = false;\n    var foundDefaultY = false;\n    var foundRelativeX = false;\n    var foundPlacement = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundName = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber_ = getNumber(ch2, true);\n            ret.number = dataNumber_;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n            foundDefaultX = true;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n            foundRelativeY = true;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n            foundDefaultY = true;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n            foundRelativeX = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"name\") {\n            var dataName = getString(ch2, true);\n            ret.name = dataName;\n            foundName = true;\n        }\n    }\n    ret.lyricParts = xmlToLyricParts(node);\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundDefaultX) {\n        ret.defaultX = NaN;\n    }\n    if (!foundRelativeY) {\n        ret.relativeY = 0;\n    }\n    if (!foundDefaultY) {\n        ret.defaultY = NaN;\n    }\n    if (!foundRelativeX) {\n        ret.relativeX = 0;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundName) {\n        ret.name = \"\";\n    }\n    return ret;\n}\nfunction getStartStop(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"start\") {\n        return StartStop.Start;\n    }\n    if (s == \"stop\") {\n        return StartStop.Stop;\n    }\n    return fallbackVal;\n}\nfunction getStartStopContinue(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"start\") {\n        return StartStopContinue.Start;\n    }\n    if (s == \"stop\") {\n        return StartStopContinue.Stop;\n    }\n    if (s == \"continue\") {\n        return StartStopContinue.Continue;\n    }\n    return fallbackVal;\n}\nfunction getStartStopSingle(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"single\") {\n        return StartStopSingle.Single;\n    }\n    if (s == \"start\") {\n        return StartStopSingle.Start;\n    }\n    if (s == \"stop\") {\n        return StartStopSingle.Stop;\n    }\n    return fallbackVal;\n}\nfunction getSymbolSize(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"unspecified\") {\n        return SymbolSize.Unspecified;\n    }\n    if (s == \"full\") {\n        return SymbolSize.Full;\n    }\n    if (s == \"cue\") {\n        return SymbolSize.Cue;\n    }\n    if (s == \"large\") {\n        return SymbolSize.Large;\n    }\n    return fallbackVal;\n}\nfunction getAboveBelow(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"above\") {\n        return AboveBelow.Above;\n    }\n    if (s == \"below\") {\n        return AboveBelow.Below;\n    }\n    if (s == \"unspecified\") {\n        return AboveBelow.Unspecified;\n    }\n    return fallbackVal;\n}\nfunction getUpDown(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"down\") {\n        return UpDown.Down;\n    }\n    if (s == \"up\") {\n        return UpDown.Up;\n    }\n    return fallbackVal;\n}\nfunction getOverUnder(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"over\") {\n        return OverUnder.Over;\n    }\n    if (s == \"under\") {\n        return OverUnder.Under;\n    }\n    if (s == \"unspecified\") {\n        return OverUnder.Unspecified;\n    }\n    return fallbackVal;\n}\nfunction getTopBottom(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"top\") {\n        return TopBottom.Top;\n    }\n    if (s == \"bottom\") {\n        return TopBottom.Bottom;\n    }\n    return fallbackVal;\n}\nfunction getLeftRight(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return LeftRight.Right;\n    }\n    if (s == \"left\") {\n        return LeftRight.Left;\n    }\n    return fallbackVal;\n}\n/**\n * The number-of-lines entity is used to specify the\n * number of lines in text decoration attributes.\n */\nfunction verifyNumberOfLines(m) {\n    // assert(m >= 0 && m <= 3);\n}\nfunction xmlToNumberOfLines(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\nfunction verifyRotation(m) {\n    // assert(m >= -180 && m <= 180);\n}\nfunction xmlToRotation(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\nfunction getEnclosureShape(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"circle\") {\n        return EnclosureShape.Circle;\n    }\n    if (s == \"bracket\") {\n        return EnclosureShape.Bracket;\n    }\n    if (s == \"triangle\") {\n        return EnclosureShape.Triangle;\n    }\n    if (s == \"diamond\") {\n        return EnclosureShape.Diamond;\n    }\n    if (s == \"none\") {\n        return EnclosureShape.None;\n    }\n    if (s == \"square\") {\n        return EnclosureShape.Square;\n    }\n    if (s == \"oval\") {\n        return EnclosureShape.Oval;\n    }\n    if (s == \"rectangle\") {\n        return EnclosureShape.Rectangle;\n    }\n    return fallbackVal;\n}\nfunction getNormalItalic(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"italic\") {\n        return NormalItalic.Italic;\n    }\n    if (s == \"normal\") {\n        return NormalItalic.Normal;\n    }\n    return fallbackVal;\n}\nfunction getNormalBold(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"bold\") {\n        return NormalBold.Bold;\n    }\n    if (s == \"normal\") {\n        return NormalBold.Normal;\n    }\n    return fallbackVal;\n}\n/**\n * Slurs, tuplets, and many other features can be\n * concurrent and overlapping within a single musical\n * part. The number-level attribute distinguishes up to\n * six concurrent objects of the same type. A reading\n * program should be prepared to handle cases where\n * the number-levels stop in an arbitrary order.\n * Different numbers are needed when the features\n * overlap in MusicXML document order. When a number-level\n * value is implied, the value is 1 by default.\n */\nfunction verifyNumberLevel(m) {\n    // assert(m >= 1 && m <= 6);\n}\nfunction xmlToNumberLevel(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n * The MusicXML format supports eight levels of beaming, up\n * to 1024th notes. Unlike the number-level attribute, the\n * beam-level attribute identifies concurrent beams in a beam\n * group. It does not distinguish overlapping beams such as\n * grace notes within regular notes, or beams used in different\n * voices.\n */\nfunction verifyBeamLevel(m) {\n    // assert(m >= 1 && m <= 8);\n}\nfunction xmlToBeamLevel(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\nfunction xmlToPosition(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n    }\n    return ret;\n}\nfunction xmlToPlacement(node) {\n    var ret = {};\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDirectiveEntity(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"directive\") {\n            var dataDirective = xmlToYesNo(ch2);\n            ret.directive = dataDirective;\n        }\n    }\n    return ret;\n}\nfunction xmlToBezier(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"bezier-x2\") {\n            var dataBezierX2 = getNumber(ch2, true);\n            ret.bezierX2 = dataBezierX2;\n        }\n        if (ch2.name === \"bezier-offset\") {\n            var dataBezierOffset = getNumber(ch2, true);\n            ret.bezierOffset = dataBezierOffset;\n        }\n        if (ch2.name === \"bezier-offset2\") {\n            var dataBezierOffset2 = getNumber(ch2, true);\n            ret.bezierOffset2 = dataBezierOffset2;\n        }\n        if (ch2.name === \"bezier-x\") {\n            var dataBezierX = getNumber(ch2, true);\n            ret.bezierX = dataBezierX;\n        }\n        if (ch2.name === \"bezier-y\") {\n            var dataBezierY = getNumber(ch2, true);\n            ret.bezierY = dataBezierY;\n        }\n        if (ch2.name === \"bezier-y2\") {\n            var dataBezierY2 = getNumber(ch2, true);\n            ret.bezierY2 = dataBezierY2;\n        }\n    }\n    return ret;\n}\nfunction xmlToOrientation(node) {\n    var ret = {};\n    var foundOrientation = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"orientation\") {\n            var dataOrientation = getOverUnder(ch2, OverUnder.Unspecified);\n            ret.orientation = dataOrientation;\n            foundOrientation = true;\n        }\n    }\n    if (!foundOrientation) {\n        ret.orientation = OverUnder.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToFont(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    return ret;\n}\nfunction getLeftCenterRight(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return LeftCenterRight.Right;\n    }\n    if (s == \"center\") {\n        return LeftCenterRight.Center;\n    }\n    if (s == \"left\") {\n        return LeftCenterRight.Left;\n    }\n    return fallbackVal;\n}\nfunction getTopMiddleBottomBaseline(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"top\") {\n        return TopMiddleBottomBaseline.Top;\n    }\n    if (s == \"middle\") {\n        return TopMiddleBottomBaseline.Middle;\n    }\n    if (s == \"baseline\") {\n        return TopMiddleBottomBaseline.Baseline;\n    }\n    if (s == \"bottom\") {\n        return TopMiddleBottomBaseline.Bottom;\n    }\n    return fallbackVal;\n}\nfunction getDirectionMode(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"lro\") {\n        return DirectionMode.Lro;\n    }\n    if (s == \"rlo\") {\n        return DirectionMode.Rlo;\n    }\n    if (s == \"ltr\") {\n        return DirectionMode.Ltr;\n    }\n    if (s == \"rtl\") {\n        return DirectionMode.Rtl;\n    }\n    return fallbackVal;\n}\nfunction getStraightCurved(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"curved\") {\n        return StraightCurved.Curved;\n    }\n    if (s == \"straight\") {\n        return StraightCurved.Straight;\n    }\n    return fallbackVal;\n}\nfunction getSolidDashedDottedWavy(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"dashed\") {\n        return SolidDashedDottedWavy.Dashed;\n    }\n    if (s == \"wavy\") {\n        return SolidDashedDottedWavy.Wavy;\n    }\n    if (s == \"dotted\") {\n        return SolidDashedDottedWavy.Dotted;\n    }\n    if (s == \"solid\") {\n        return SolidDashedDottedWavy.Solid;\n    }\n    return fallbackVal;\n}\nfunction getNormalAngledSquare(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"angled\") {\n        return NormalAngledSquare.Angled;\n    }\n    if (s == \"square\") {\n        return NormalAngledSquare.Square;\n    }\n    if (s == \"normal\") {\n        return NormalAngledSquare.Normal;\n    }\n    return fallbackVal;\n}\nfunction getUprightInverted(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"upright\") {\n        return UprightInverted.Upright;\n    }\n    if (s == \"inverted\") {\n        return UprightInverted.Inverted;\n    }\n    return fallbackVal;\n}\nfunction getUpperMainBelow(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"main\") {\n        return UpperMainBelow.Main;\n    }\n    if (s == \"below\") {\n        return UpperMainBelow.Below;\n    }\n    if (s == \"upper\") {\n        return UpperMainBelow.Upper;\n    }\n    return fallbackVal;\n}\nfunction getWholeHalfUnison(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"unison\") {\n        return WholeHalfUnison.Unison;\n    }\n    if (s == \"whole\") {\n        return WholeHalfUnison.Whole;\n    }\n    if (s == \"half\") {\n        return WholeHalfUnison.Half;\n    }\n    return fallbackVal;\n}\nfunction getWholeHalfNone(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return WholeHalfNone.None;\n    }\n    if (s == \"whole\") {\n        return WholeHalfNone.Whole;\n    }\n    if (s == \"half\") {\n        return WholeHalfNone.Half;\n    }\n    return fallbackVal;\n}\nfunction xmlToColor(node) {\n    var ret = {};\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToTextDecoration(node) {\n    var ret = {};\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    return ret;\n}\nfunction xmlToJustify(node) {\n    var ret = {};\n    var foundJustify = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToHalign(node) {\n    var ret = {};\n    var foundHalign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    return ret;\n}\nfunction xmlToValign(node) {\n    var ret = {};\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToValignImage(node) {\n    var ret = {};\n    var foundValignImage = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"valign\") {\n            var dataValignImage = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valignImage = dataValignImage;\n            foundValignImage = true;\n        }\n    }\n    if (!foundValignImage) {\n        ret.valignImage = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToLetterSpacing(node) {\n    var ret = {};\n    var foundLetterSpacing = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    return ret;\n}\nfunction xmlToLineHeight(node) {\n    var ret = {};\n    var foundLineHeight = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    return ret;\n}\nfunction xmlToTextDirection(node) {\n    var ret = {};\n    var foundDir = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    return ret;\n}\nfunction xmlToTextRotation(node) {\n    var ret = {};\n    var foundRotation = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    return ret;\n}\nfunction xmlToEnclosure(node) {\n    var ret = {};\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToPrintStyle(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToPrintStyleAlign(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToLineShape(node) {\n    var ret = {};\n    var foundLineShape = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    return ret;\n}\nfunction xmlToDashedFormatting(node) {\n    var ret = {};\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    return ret;\n}\nfunction xmlToPrintObject(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    return ret;\n}\nfunction xmlToPrintSpacing(node) {\n    var ret = {};\n    var foundPrintSpacing = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-spacing\") {\n            var dataPrintSpacing = xmlToYesNo(ch2);\n            ret.printSpacing = dataPrintSpacing;\n            foundPrintSpacing = true;\n        }\n    }\n    if (!foundPrintSpacing) {\n        ret.printSpacing = true;\n    }\n    return ret;\n}\nfunction xmlToTextFormatting(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToLevelDisplay(node) {\n    var ret = {};\n    var foundBracket = false;\n    var foundSize = false;\n    var foundParentheses = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"bracket\") {\n            var dataBracket = xmlToYesNo(ch2);\n            ret.bracket = dataBracket;\n            foundBracket = true;\n        }\n        if (ch2.name === \"size\") {\n            var dataSize = getSymbolSize(ch2, SymbolSize.Unspecified);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n            foundParentheses = true;\n        }\n    }\n    if (!foundBracket) {\n        ret.bracket = false;\n    }\n    if (!foundSize) {\n        ret.size = SymbolSize.Unspecified;\n    }\n    if (!foundParentheses) {\n        ret.parentheses = false;\n    }\n    return ret;\n}\nfunction xmlToTrillSound(node) {\n    var ret = {};\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 24;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 12;\n    }\n    return ret;\n}\nfunction xmlToBendSound(node) {\n    var ret = {};\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"first-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.firstBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundSecondBeat) {\n        ret.firstBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToTimeOnly(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"time-only\") {\n            var dataTimeOnly = getString(ch2, true);\n            ret.timeOnly = dataTimeOnly;\n        }\n    }\n    return ret;\n}\nfunction xmlToDocumentAttributes(node) {\n    var ret = {};\n    var foundVersion_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"version\") {\n            var dataVersion = getString(ch2, true);\n            ret.version = dataVersion;\n            foundVersion_ = true;\n        }\n    }\n    if (!foundVersion_) {\n        ret.version = \"1.0\";\n    }\n    return ret;\n}\nfunction xmlToEditorial(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToEditorialVoice(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"voice\") {\n            var dataVoice = getNumber(ch, true);\n            ret.voice = dataVoice;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToFootnote(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToLevel(node) {\n    var ret = {};\n    var foundBracket = false;\n    var foundSize = false;\n    var foundParentheses = false;\n    var foundReference = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"bracket\") {\n            var dataBracket = xmlToYesNo(ch2);\n            ret.bracket = dataBracket;\n            foundBracket = true;\n        }\n        if (ch2.name === \"size\") {\n            var dataSize = getSymbolSize(ch2, SymbolSize.Unspecified);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n            foundParentheses = true;\n        }\n        if (ch2.name === \"reference\") {\n            var dataReference = xmlToYesNo(ch2);\n            ret.reference = dataReference;\n            foundReference = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundBracket) {\n        ret.bracket = false;\n    }\n    if (!foundSize) {\n        ret.size = SymbolSize.Unspecified;\n    }\n    if (!foundParentheses) {\n        ret.parentheses = false;\n    }\n    if (!foundReference) {\n        ret.reference = false;\n    }\n    return ret;\n}\nfunction xmlToFermata(node) {\n    var ret = {};\n    var foundShape = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getUprightInverted(ch2, UprightInverted.Upright);\n            ret.type = dataType;\n            foundType = true;\n        }\n    }\n    var ch3 = node;\n    var dataShape = getNormalAngledSquare(ch3, NormalAngledSquare.Normal);\n    ret.shape = dataShape;\n    if (!foundShape) {\n        ret.shape = NormalAngledSquare.Normal;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundType) {\n        ret.type = UprightInverted.Upright;\n    }\n    return ret;\n}\nfunction xmlToWavyLine(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundPlacement = false;\n    var foundColor = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToSegno(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToCoda(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToNormalDot(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToDynamics(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundPlacement = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"fp\") {\n            var dataFp = true;\n            ret.fp = dataFp;\n        }\n        if (ch.nodeName === \"pp\") {\n            var dataPp = true;\n            ret.pp = dataPp;\n        }\n        if (ch.nodeName === \"ppp\") {\n            var dataPpp = true;\n            ret.ppp = dataPpp;\n        }\n        if (ch.nodeName === \"fff\") {\n            var dataFff = true;\n            ret.fff = dataFff;\n        }\n        if (ch.nodeName === \"sf\") {\n            var dataSf = true;\n            ret.sf = dataSf;\n        }\n        if (ch.nodeName === \"rf\") {\n            var dataRf = true;\n            ret.rf = dataRf;\n        }\n        if (ch.nodeName === \"mp\") {\n            var dataMp = true;\n            ret.mp = dataMp;\n        }\n        if (ch.nodeName === \"sfpp\") {\n            var dataSfpp = true;\n            ret.sfpp = dataSfpp;\n        }\n        if (ch.nodeName === \"f\") {\n            var dataF = true;\n            ret.f = dataF;\n        }\n        if (ch.nodeName === \"ffffff\") {\n            var dataFfffff = true;\n            ret.ffffff = dataFfffff;\n        }\n        if (ch.nodeName === \"sfz\") {\n            var dataSfz = true;\n            ret.sfz = dataSfz;\n        }\n        if (ch.nodeName === \"ff\") {\n            var dataFf = true;\n            ret.ff = dataFf;\n        }\n        if (ch.nodeName === \"pppppp\") {\n            var dataPppppp = true;\n            ret.pppppp = dataPppppp;\n        }\n        if (ch.nodeName === \"rfz\") {\n            var dataRfz = true;\n            ret.rfz = dataRfz;\n        }\n        if (ch.nodeName === \"other-dynamics\") {\n            var dataOtherDynamics = getString(ch, true);\n            ret.otherDynamics = dataOtherDynamics;\n        }\n        if (ch.nodeName === \"fz\") {\n            var dataFz = true;\n            ret.fz = dataFz;\n        }\n        if (ch.nodeName === \"ppppp\") {\n            var dataPpppp = true;\n            ret.ppppp = dataPpppp;\n        }\n        if (ch.nodeName === \"mf\") {\n            var dataMf = true;\n            ret.mf = dataMf;\n        }\n        if (ch.nodeName === \"pppp\") {\n            var dataPppp = true;\n            ret.pppp = dataPppp;\n        }\n        if (ch.nodeName === \"fffff\") {\n            var dataFffff = true;\n            ret.fffff = dataFffff;\n        }\n        if (ch.nodeName === \"sffz\") {\n            var dataSffz = true;\n            ret.sffz = dataSffz;\n        }\n        if (ch.nodeName === \"sfp\") {\n            var dataSfp = true;\n            ret.sfp = dataSfp;\n        }\n        if (ch.nodeName === \"p\") {\n            var dataP = true;\n            ret.p = dataP;\n        }\n        if (ch.nodeName === \"ffff\") {\n            var dataFfff = true;\n            ret.ffff = dataFfff;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToFingering(node) {\n    var ret = {};\n    var foundFinger = false;\n    var foundSubstitution = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundAlternate = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"substitution\") {\n            var dataSubstitution = xmlToYesNo(ch2);\n            ret.substitution = dataSubstitution;\n            foundSubstitution = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"alternate\") {\n            var dataAlternate = xmlToYesNo(ch2);\n            ret.alternate = dataAlternate;\n            foundAlternate = true;\n        }\n    }\n    var ch3 = node;\n    var dataFinger = getNumber(ch3, false);\n    ret.finger = dataFinger;\n    if (!foundFinger) {\n        ret.finger = -1;\n    }\n    if (!foundSubstitution) {\n        ret.substitution = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundAlternate) {\n        ret.alternate = false;\n    }\n    return ret;\n}\nfunction xmlToFret(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataFret = getNumber(ch3, true);\n    ret.fret = dataFret;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToString(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataStringNum = getNumber(ch3, true);\n    ret.stringNum = dataStringNum;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDisplayText(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToAccidentalText(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToMidiDevice(node) {\n    var ret = {};\n    var foundDeviceName = false;\n    var foundPort = false;\n    var foundId = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"port\") {\n            var dataPort = getNumber(ch2, true);\n            ret.port = dataPort;\n            foundPort = true;\n        }\n        if (ch2.name === \"id\") {\n            var dataId = getNumber(ch2, true);\n            ret.id = dataId;\n            foundId = true;\n        }\n    }\n    var ch3 = node;\n    var dataDeviceName = getString(ch3, true);\n    ret.deviceName = dataDeviceName;\n    if (!foundDeviceName) {\n        ret.deviceName = \"\";\n    }\n    if (!foundPort) {\n        ret.port = NaN;\n    }\n    if (!foundId) {\n        ret.id = NaN;\n    }\n    return ret;\n}\n/**\n * MIDI 1.0 channel numbers range from 1 to 16.\n */\nfunction verifyMidiChannel(m) {\n    // assert(m >= 1 && m <= 16);\n}\nfunction xmlToMidiChannel(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n *  midi 1.0 bank numbers range from 1 to 16,384.\n */\nfunction verifyMidiBank(m) {\n    // assert(m >= 1 && m <= 16384);\n}\nfunction xmlToMidiBank(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n *  MIDI 1.0 program numbers range from 1 to 128.\n */\nfunction verifyMidiProgram(m) {\n    // assert(m >= 1 && m <= 128);\n}\nfunction xmlToMidiProgram(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n * For unpitched instruments, specify a MIDI 1.0 note number\n * ranging from 1 to 128. It is usually used with MIDI banks for\n * percussion. Note that MIDI 1.0 note numbers are generally\n * specified from 0 to 127 rather than the 1 to 128 numbering\n * used in this element.\n */\nfunction verifyMidiUnpitched(m) {\n    // assert(m >= 1 && m <= 128);\n}\nfunction xmlToMidiUnpitched(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n * The volume value is a percentage of the maximum\n * ranging from 0 to 100, with decimal values allowed.\n * This corresponds to a scaling value for the MIDI 1.0\n * channel volume controller.\n */\nfunction verifyVolume(m) {\n    // assert(m >= 1 && m <= 100);\n}\nfunction xmlToVolume(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n * Pan and elevation allow placing of sound in a 3-D space\n * relative to the listener. Both are expressed in degrees\n * ranging from -180 to 180. For pan, 0 is straight ahead,\n * -90 is hard left, 90 is hard right, and -180 and 180\n * are directly behind the listener. For elevation, 0 is\n * level with the listener, 90 is directly above, and -90\n * is directly below.\n */\nfunction verifyPan(m) {\n    // assert(m >= -180 && m <= 180);\n}\nfunction xmlToPan(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\n/**\n * Pan and elevation allow placing of sound in a 3-D space\n * relative to the listener. Both are expressed in degrees\n * ranging from -180 to 180. For pan, 0 is straight ahead,\n * -90 is hard left, 90 is hard right, and -180 and 180\n * are directly behind the listener. For elevation, 0 is\n * level with the listener, 90 is directly above, and -90\n * is directly below.\n */\nfunction verifyElevation(m) {\n    // assert(m >= -180 && m <= 180);\n}\nfunction xmlToElevation(node) {\n    var str = node.textContent;\n    var num = str.toLowerCase().indexOf(\"0x\") === 0 ? parseInt(str, 16) : parseFloat(str);\n    return num;\n}\nfunction xmlToMidiInstrument(node) {\n    var ret = {\n        midiUnpitched: null,\n        volume: null,\n        pan: null,\n        elevation: null,\n        midiBank: null,\n        midiProgram: null,\n        id: \"\",\n        midiChannel: null,\n        midiName: \"\"\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"midi-unpitched\") {\n            var dataMidiUnpitched = getNumber(ch, true);\n            ret.midiUnpitched = dataMidiUnpitched;\n        }\n        if (ch.nodeName === \"volume\") {\n            var dataVolume = getNumber(ch, true);\n            ret.volume = dataVolume;\n        }\n        if (ch.nodeName === \"pan\") {\n            var dataPan = getNumber(ch, true);\n            ret.pan = dataPan;\n        }\n        if (ch.nodeName === \"elevation\") {\n            var dataElevation = getNumber(ch, true);\n            ret.elevation = dataElevation;\n        }\n        if (ch.nodeName === \"midi-bank\") {\n            var dataMidiBank = getNumber(ch, true);\n            ret.midiBank = dataMidiBank;\n        }\n        if (ch.nodeName === \"midi-program\") {\n            var dataMidiProgram = getNumber(ch, true);\n            ret.midiProgram = dataMidiProgram;\n        }\n        if (ch.nodeName === \"midi-channel\") {\n            var dataMidiChannel = getNumber(ch, true);\n            ret.midiChannel = dataMidiChannel;\n        }\n        if (ch.nodeName === \"midi-name\") {\n            var dataMidiName = getString(ch, true);\n            ret.midiName = dataMidiName;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"id\") {\n            var dataId = getString(ch2, true);\n            ret.id = dataId;\n        }\n    }\n    return ret;\n}\nfunction xmlToPlay(node) {\n    var ret = {\n        ipa: \"\",\n        mute: \"\",\n        otherPlay: null,\n        semiPitched: \"\",\n        id: \"\"\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"ipa\") {\n            var dataIpa = getString(ch, true);\n            ret.ipa = dataIpa;\n        }\n        if (ch.nodeName === \"mute\") {\n            var dataMute = getString(ch, true);\n            ret.mute = dataMute;\n        }\n        if (ch.nodeName === \"other-play\") {\n            var dataOtherPlay = xmlToOtherPlay(ch);\n            ret.otherPlay = dataOtherPlay;\n        }\n        if (ch.nodeName === \"semi-pitched\") {\n            var dataSemiPitched = getString(ch, true);\n            ret.semiPitched = dataSemiPitched;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"id\") {\n            var dataId = getString(ch2, true);\n            ret.id = dataId;\n        }\n    }\n    return ret;\n}\nfunction xmlToOtherPlay(node) {\n    var ret = {\n        data: \"\",\n        type: \"\"\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToScaling(node) {\n    var ret = {\n        tenths: null,\n        millimeters: null\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tenths\") {\n            var dataTenths = getNumber(ch, true);\n            ret.tenths = dataTenths;\n        }\n        if (ch.nodeName === \"millimeters\") {\n            var dataMillimeters = getNumber(ch, true);\n            ret.millimeters = dataMillimeters;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\n(function (OddEvenBoth) {\n    OddEvenBoth[OddEvenBoth[\"Both\"] = 2] = \"Both\";\n    OddEvenBoth[OddEvenBoth[\"Even\"] = 1] = \"Even\";\n    OddEvenBoth[OddEvenBoth[\"Odd\"] = 0] = \"Odd\";\n})(exports.OddEvenBoth || (exports.OddEvenBoth = {}));\nvar OddEvenBoth = exports.OddEvenBoth;\nfunction getOddEvenBoth(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"both\") {\n        return OddEvenBoth.Both;\n    }\n    if (s == \"even\") {\n        return OddEvenBoth.Even;\n    }\n    if (s == \"odd\") {\n        return OddEvenBoth.Odd;\n    }\n    return fallbackVal;\n}\nfunction xmlToPageMargins(node) {\n    var ret = {};\n    var foundType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"top-margin\") {\n            var dataTopMargin = getNumber(ch, true);\n            ret.topMargin = dataTopMargin;\n        }\n        if (ch.nodeName === \"left-margin\") {\n            var dataLeftMargin = getNumber(ch, true);\n            ret.leftMargin = dataLeftMargin;\n        }\n        if (ch.nodeName === \"bottom-margin\") {\n            var dataBottomMargin = getNumber(ch, true);\n            ret.bottomMargin = dataBottomMargin;\n        }\n        if (ch.nodeName === \"right-margin\") {\n            var dataRightMargin = getNumber(ch, true);\n            ret.rightMargin = dataRightMargin;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getOddEvenBoth(ch2, OddEvenBoth.Both);\n            ret.type = dataType;\n            foundType = true;\n        }\n    }\n    if (!foundType) {\n        ret.type = OddEvenBoth.Both;\n    }\n    return ret;\n}\nfunction xmlToPageLayout(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"page-height\") {\n            var dataPageHeight = getNumber(ch, true);\n            ret.pageHeight = dataPageHeight;\n        }\n        if (ch.nodeName === \"page-width\") {\n            var dataPageWidth = getNumber(ch, true);\n            ret.pageWidth = dataPageWidth;\n        }\n        if (ch.nodeName === \"page-margins\") {\n            var dataPageMargins = xmlToPageMargins(ch);\n            ret.pageMargins = (ret.pageMargins || []).concat(dataPageMargins);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToSystemLayout(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"system-dividers\") {\n            var dataSystemDividers = xmlToSystemDividers(ch);\n            ret.systemDividers = dataSystemDividers;\n        }\n        if (ch.nodeName === \"system-margins\") {\n            var dataSystemMargins = xmlToSystemMargins(ch);\n            ret.systemMargins = dataSystemMargins;\n        }\n        if (ch.nodeName === \"system-distance\") {\n            var dataSystemDistance = getNumber(ch, true);\n            ret.systemDistance = dataSystemDistance;\n        }\n        if (ch.nodeName === \"top-system-distance\") {\n            var dataTopSystemDistance = getNumber(ch, true);\n            ret.topSystemDistance = dataTopSystemDistance;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToSystemMargins(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"left-margin\") {\n            var dataLeftMargin = getNumber(ch, true);\n            ret.leftMargin = dataLeftMargin;\n        }\n        if (ch.nodeName === \"right-margin\") {\n            var dataRightMargin = getNumber(ch, true);\n            ret.rightMargin = dataRightMargin;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToSystemDividers(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"right-divider\") {\n            var dataRightDivider = xmlToRightDivider(ch);\n            ret.rightDivider = dataRightDivider;\n        }\n        if (ch.nodeName === \"left-divider\") {\n            var dataLeftDivider = xmlToLeftDivider(ch);\n            ret.leftDivider = dataLeftDivider;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToLeftDivider(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToRightDivider(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToStaffLayout(node) {\n    var ret = {};\n    var foundNum = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"staff-distance\") {\n            var dataStaffDistance = getNumber(ch, true);\n            ret.staffDistance = dataStaffDistance;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"num\") {\n            var dataNum = getNumber(ch2, true);\n            ret.num = dataNum;\n            foundNum = true;\n        }\n    }\n    if (!foundNum) {\n        ret.num = 1;\n    }\n    return ret;\n}\nfunction xmlToMeasureLayout(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"measure-distance\") {\n            var dataMeasureDistance = getNumber(ch, true);\n            ret.measureDistance = dataMeasureDistance;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToLineWidth(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataTenths = getNumber(ch3, true);\n    ret.tenths = dataTenths;\n    return ret;\n}\n(function (CueGraceLarge) {\n    CueGraceLarge[CueGraceLarge[\"Grace\"] = 1] = \"Grace\";\n    CueGraceLarge[CueGraceLarge[\"Cue\"] = 0] = \"Cue\";\n    CueGraceLarge[CueGraceLarge[\"Large\"] = 2] = \"Large\";\n})(exports.CueGraceLarge || (exports.CueGraceLarge = {}));\nvar CueGraceLarge = exports.CueGraceLarge;\nfunction getCueGraceLarge(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"grace\") {\n        return CueGraceLarge.Grace;\n    }\n    if (s == \"cue\") {\n        return CueGraceLarge.Cue;\n    }\n    if (s == \"large\") {\n        return CueGraceLarge.Large;\n    }\n    return fallbackVal;\n}\nfunction xmlToNoteSize(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getCueGraceLarge(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataSize = getNumber(ch3, true);\n    ret.size = dataSize;\n    return ret;\n}\nfunction xmlToDistance(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataTenths = getNumber(ch3, true);\n    ret.tenths = dataTenths;\n    return ret;\n}\nfunction xmlToAppearance(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"line-width\") {\n            var dataLineWidths = xmlToLineWidth(ch);\n            ret.lineWidths = ret.lineWidths || {};\n            ret.lineWidths[popFront(toCamelCase((dataLineWidths.type.length ? \"_\" : \"\") + dataLineWidths.type))] = dataLineWidths;\n        }\n        if (ch.nodeName === \"distance\") {\n            var dataDistances = xmlToDistance(ch);\n            ret.distances = ret.distances || {};\n            ret.distances[popFront(toCamelCase((dataDistances.type.length ? \"_\" : \"\") + dataDistances.type))] = dataDistances;\n        }\n        if (ch.nodeName === \"other-appearance\") {\n            var dataOtherAppearances = getString(ch, true);\n            ret.otherAppearances = (ret.otherAppearances || []).concat(dataOtherAppearances);\n        }\n        if (ch.nodeName === \"note-size\") {\n            var dataNoteSizes = xmlToNoteSize(ch);\n            ret.noteSizes = ret.noteSizes || {};\n            ret.noteSizes[dataNoteSizes.type] = dataNoteSizes;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToCreator(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataCreator = getString(ch3, true);\n    ret.creator = dataCreator;\n    return ret;\n}\nfunction xmlToRights(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataRights = getString(ch3, true);\n    ret.rights = dataRights;\n    return ret;\n}\nfunction xmlToEncoder(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataEncoder = getString(ch3, true);\n    ret.encoder = dataEncoder;\n    return ret;\n}\nfunction xmlToRelation(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToMiscellaneousField(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"name\") {\n            var dataName = getString(ch2, true);\n            ret.name = dataName;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToMiscellaneous(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"miscellaneous-field\") {\n            var dataMiscellaneousFields = xmlToMiscellaneousField(ch);\n            ret.miscellaneousFields = (ret.miscellaneousFields || []).concat(dataMiscellaneousFields);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToIdentification(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"miscellaneous\") {\n            var dataMiscellaneous = xmlToMiscellaneous(ch);\n            ret.miscellaneous = dataMiscellaneous;\n        }\n        if (ch.nodeName === \"creator\") {\n            var dataCreators = xmlToCreator(ch);\n            ret.creators = (ret.creators || []).concat(dataCreators);\n        }\n        if (ch.nodeName === \"relation\") {\n            var dataRelations = xmlToRelation(ch);\n            ret.relations = (ret.relations || []).concat(dataRelations);\n        }\n        if (ch.nodeName === \"rights\") {\n            var dataRights = xmlToRights(ch);\n            ret.rights = (ret.rights || []).concat(dataRights);\n        }\n        if (ch.nodeName === \"encoding\") {\n            var dataEncoding = xmlToEncoding(ch);\n            ret.encoding = dataEncoding;\n        }\n        if (ch.nodeName === \"source\") {\n            var dataSource = getString(ch, true);\n            ret.source = dataSource;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToSupports(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"element\") {\n            var dataElement = getString(ch2, true);\n            ret.element = dataElement;\n        }\n        if (ch2.name === \"attribute\") {\n            var dataAttribute = getString(ch2, true);\n            ret.attribute = dataAttribute;\n        }\n        if (ch2.name === \"value\") {\n            var dataValue = getString(ch2, true);\n            ret.value = dataValue;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = xmlToYesNo(ch2);\n            ret.type = dataType;\n        }\n    }\n    ret.element = ret.element || \"\";\n    ret.attribute = ret.attribute || \"\";\n    ret.value = ret.value || \"\";\n    ret.type = defined(ret.type) ? ret.type : true;\n    return ret;\n}\nfunction xmlToEncoding(node) {\n    var ret = {\n        encodingDescriptions: [],\n        encodingDate: null,\n        supports: {},\n        encoders: [],\n        softwares: []\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"encoding-description\") {\n            var dataEncodingDescriptions = getString(ch, true);\n            ret.encodingDescriptions = (ret.encodingDescriptions || []).concat(dataEncodingDescriptions);\n        }\n        if (ch.nodeName === \"encoding-date\") {\n            var dataEncodingDate = xmlToEncodingDate(ch);\n            ret.encodingDate = dataEncodingDate;\n        }\n        if (ch.nodeName === \"supports\") {\n            var dataSupports = xmlToSupports(ch);\n            ret.supports = ret.supports || {};\n            ret.supports[popFront(toCamelCase((dataSupports.element.length ? \"_\" : \"\") + dataSupports.element) + (dataSupports.attribute.length ? \"_\" : \"\") + toCamelCase(dataSupports.attribute))] = dataSupports;\n        }\n        if (ch.nodeName === \"encoder\") {\n            var dataEncoders = xmlToEncoder(ch);\n            ret.encoders = (ret.encoders || []).concat(dataEncoders);\n        }\n        if (ch.nodeName === \"software\") {\n            var dataSoftwares = getString(ch, true);\n            ret.softwares = (ret.softwares || []).concat(dataSoftwares);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\n(function (SeparatorType) {\n    SeparatorType[SeparatorType[\"None\"] = 0] = \"None\";\n    SeparatorType[SeparatorType[\"Horizontal\"] = 1] = \"Horizontal\";\n    SeparatorType[SeparatorType[\"Diagonal\"] = 2] = \"Diagonal\";\n    SeparatorType[SeparatorType[\"Vertical\"] = 3] = \"Vertical\";\n    SeparatorType[SeparatorType[\"Adjacent\"] = 4] = \"Adjacent\";\n})(exports.SeparatorType || (exports.SeparatorType = {}));\nvar SeparatorType = exports.SeparatorType;\nfunction getSeparatorType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return SeparatorType.None;\n    }\n    if (s == \"horizontal\") {\n        return SeparatorType.Horizontal;\n    }\n    if (s == \"diagonal\") {\n        return SeparatorType.Diagonal;\n    }\n    if (s == \"vertical\") {\n        return SeparatorType.Vertical;\n    }\n    if (s == \"adjacent\") {\n        return SeparatorType.Adjacent;\n    }\n    return fallbackVal;\n}\nfunction xmlToTimeSeparator(node) {\n    var ret = {};\n    var foundSeparator = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"separator\") {\n            var dataSeparator = getSeparatorType(ch2, SeparatorType.None);\n            ret.separator = dataSeparator;\n            foundSeparator = true;\n        }\n    }\n    if (!foundSeparator) {\n        ret.separator = SeparatorType.None;\n    }\n    return ret;\n}\n(function (TimeSymbolType) {\n    TimeSymbolType[TimeSymbolType[\"DottedNote\"] = 4] = \"DottedNote\";\n    TimeSymbolType[TimeSymbolType[\"Cut\"] = 1] = \"Cut\";\n    TimeSymbolType[TimeSymbolType[\"SingleNumber\"] = 2] = \"SingleNumber\";\n    TimeSymbolType[TimeSymbolType[\"Note\"] = 3] = \"Note\";\n    TimeSymbolType[TimeSymbolType[\"Common\"] = 0] = \"Common\";\n    TimeSymbolType[TimeSymbolType[\"Normal\"] = 5] = \"Normal\";\n})(exports.TimeSymbolType || (exports.TimeSymbolType = {}));\nvar TimeSymbolType = exports.TimeSymbolType;\nfunction getTimeSymbolType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"dotted-note\") {\n        return TimeSymbolType.DottedNote;\n    }\n    if (s == \"cut\") {\n        return TimeSymbolType.Cut;\n    }\n    if (s == \"single-number\") {\n        return TimeSymbolType.SingleNumber;\n    }\n    if (s == \"note\") {\n        return TimeSymbolType.Note;\n    }\n    if (s == \"common\") {\n        return TimeSymbolType.Common;\n    }\n    if (s == \"normal\") {\n        return TimeSymbolType.Normal;\n    }\n    return fallbackVal;\n}\nfunction xmlToTimeSymbol(node) {\n    var ret = {};\n    var foundSymbol = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"symbol\") {\n            var dataSymbol = getTimeSymbolType(ch2, TimeSymbolType.Normal);\n            ret.symbol = dataSymbol;\n            foundSymbol = true;\n        }\n    }\n    if (!foundSymbol) {\n        ret.symbol = TimeSymbolType.Normal;\n    }\n    return ret;\n}\n(function (CancelLocation) {\n    CancelLocation[CancelLocation[\"Right\"] = 1] = \"Right\";\n    CancelLocation[CancelLocation[\"BeforeBarline\"] = 2] = \"BeforeBarline\";\n    CancelLocation[CancelLocation[\"Left\"] = 0] = \"Left\";\n})(exports.CancelLocation || (exports.CancelLocation = {}));\nvar CancelLocation = exports.CancelLocation;\nfunction getCancelLocation(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return CancelLocation.Right;\n    }\n    if (s == \"before-barline\") {\n        return CancelLocation.BeforeBarline;\n    }\n    if (s == \"left\") {\n        return CancelLocation.Left;\n    }\n    return fallbackVal;\n}\nfunction xmlToCancel(node) {\n    var ret = {};\n    var foundLocation = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"location\") {\n            var dataLocation = getCancelLocation(ch2, CancelLocation.Left);\n            ret.location = dataLocation;\n            foundLocation = true;\n        }\n    }\n    var ch3 = node;\n    var dataFifths = getNumber(ch3, true);\n    ret.fifths = dataFifths;\n    if (!foundLocation) {\n        ret.location = CancelLocation.Left;\n    }\n    return ret;\n}\nfunction xmlToKeyOctave(node) {\n    var ret = {};\n    var foundCancel = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"cancel\") {\n            var dataCancel = xmlToYesNo(ch2);\n            ret.cancel = dataCancel;\n            foundCancel = true;\n        }\n    }\n    var ch3 = node;\n    var dataOctave = getNumber(ch3, true);\n    ret.octave = dataOctave;\n    if (!foundCancel) {\n        ret.cancel = false;\n    }\n    return ret;\n}\nfunction xmlToKey(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"cancel\") {\n            var dataCancel = xmlToCancel(ch);\n            ret.cancel = dataCancel;\n        }\n        if (ch.nodeName === \"key-step\") {\n            var dataKeySteps = getString(ch, true);\n            ret.keySteps = (ret.keySteps || []).concat(dataKeySteps);\n        }\n        if (ch.nodeName === \"key-octave\") {\n            var dataKeyOctaves = xmlToKeyOctave(ch);\n            ret.keyOctaves = (ret.keyOctaves || []).concat(dataKeyOctaves);\n        }\n        if (ch.nodeName === \"fifths\") {\n            var dataFifths = getNumber(ch, true);\n            ret.fifths = dataFifths;\n        }\n        if (ch.nodeName === \"key-alter\") {\n            var dataKeyAlters = getString(ch, true);\n            ret.keyAlters = (ret.keyAlters || []).concat(dataKeyAlters);\n        }\n        if (ch.nodeName === \"key-accidental\") {\n            var dataKeyAccidentals = getString(ch, true);\n            ret.keyAccidentals = (ret.keyAccidentals || []);\n            ret.keyAccidentals.length = Math.max(ret.keyAccidentals.length, ret.keySteps.length);\n            ret.keyAccidentals[ret.keySteps.length - 1] = dataKeyAccidentals;\n        }\n        if (ch.nodeName === \"mode\") {\n            var dataMode = getString(ch, true);\n            ret.mode = dataMode;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!ret.keyAccidentals) {\n        ret.keyAccidentals = [];\n    }\n    ret._class = \"Key\";\n    return ret;\n}\nfunction xmlToTime(node) {\n    var ret = {};\n    var foundSymbol = false;\n    var foundSeparator = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundPrintObject = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"interchangeable\") {\n            var dataInterchangeable = xmlToInterchangeable(ch);\n            ret.interchangeable = dataInterchangeable;\n        }\n        if (ch.nodeName === \"beats\") {\n            var dataBeats = getString(ch, true);\n            ret.beats = (ret.beats || []).concat(dataBeats);\n        }\n        if (ch.nodeName === \"beat-type\") {\n            var dataBeatTypes = getNumber(ch, true);\n            ret.beatTypes = (ret.beatTypes || []).concat(dataBeatTypes);\n        }\n        if (ch.nodeName === \"senza-misura\") {\n            var dataSenzaMisura = getString(ch, true);\n            ret.senzaMisura = dataSenzaMisura;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"symbol\") {\n            var dataSymbol = getTimeSymbolType(ch2, TimeSymbolType.Normal);\n            ret.symbol = dataSymbol;\n            foundSymbol = true;\n        }\n        if (ch2.name === \"separator\") {\n            var dataSeparator = getSeparatorType(ch2, SeparatorType.None);\n            ret.separator = dataSeparator;\n            foundSeparator = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n    }\n    if (!foundSymbol) {\n        ret.symbol = TimeSymbolType.Normal;\n    }\n    if (!foundSeparator) {\n        ret.separator = SeparatorType.None;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    ret._class = \"Time\";\n    return ret;\n}\nfunction xmlToInterchangeable(node) {\n    var ret = {};\n    var foundSymbol = false;\n    var foundSeparator = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"beats\") {\n            var dataBeats = getString(ch, true);\n            ret.beats = (ret.beats || []).concat(dataBeats);\n        }\n        if (ch.nodeName === \"beat-type\") {\n            var dataBeatTypes = getNumber(ch, true);\n            ret.beatTypes = (ret.beatTypes || []).concat(dataBeatTypes);\n        }\n        if (ch.nodeName === \"time-relation\") {\n            var dataTimeRelation = getString(ch, true);\n            ret.timeRelation = dataTimeRelation;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"symbol\") {\n            var dataSymbol = getTimeSymbolType(ch2, TimeSymbolType.Normal);\n            ret.symbol = dataSymbol;\n            foundSymbol = true;\n        }\n        if (ch2.name === \"separator\") {\n            var dataSeparator = getSeparatorType(ch2, SeparatorType.None);\n            ret.separator = dataSeparator;\n            foundSeparator = true;\n        }\n    }\n    if (!foundSymbol) {\n        ret.symbol = TimeSymbolType.Normal;\n    }\n    if (!foundSeparator) {\n        ret.separator = SeparatorType.None;\n    }\n    return ret;\n}\n(function (PartSymbolType) {\n    PartSymbolType[PartSymbolType[\"None\"] = 0] = \"None\";\n    PartSymbolType[PartSymbolType[\"Line\"] = 2] = \"Line\";\n    PartSymbolType[PartSymbolType[\"Bracket\"] = 3] = \"Bracket\";\n    PartSymbolType[PartSymbolType[\"Square\"] = 4] = \"Square\";\n    PartSymbolType[PartSymbolType[\"Brace\"] = 1] = \"Brace\";\n})(exports.PartSymbolType || (exports.PartSymbolType = {}));\nvar PartSymbolType = exports.PartSymbolType;\nfunction getPartSymbolType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return PartSymbolType.None;\n    }\n    if (s == \"line\") {\n        return PartSymbolType.Line;\n    }\n    if (s == \"bracket\") {\n        return PartSymbolType.Bracket;\n    }\n    if (s == \"square\") {\n        return PartSymbolType.Square;\n    }\n    if (s == \"brace\") {\n        return PartSymbolType.Brace;\n    }\n    return fallbackVal;\n}\nfunction xmlToPartSymbol(node) {\n    var ret = {};\n    var foundTopStaff = false;\n    var foundColor = false;\n    var foundBottomStaff = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"top-staff\") {\n            var dataTopStaff = getNumber(ch2, true);\n            ret.topStaff = dataTopStaff;\n            foundTopStaff = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"bottom-staff\") {\n            var dataBottomStaff = getNumber(ch2, true);\n            ret.bottomStaff = dataBottomStaff;\n            foundBottomStaff = true;\n        }\n    }\n    var ch3 = node;\n    var dataType = getPartSymbolType(ch3, null);\n    ret.type = dataType;\n    if (!foundTopStaff) {\n        ret.topStaff = -1;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundBottomStaff) {\n        ret.bottomStaff = -1;\n    }\n    ret._class = \"PartSymbol\";\n    return ret;\n}\nfunction xmlToClef(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundSize = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundAfterBarline = false;\n    var foundAdditional = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"clef-octave-change\") {\n            var dataClefOctaveChange = getString(ch, true);\n            ret.clefOctaveChange = dataClefOctaveChange;\n        }\n        if (ch.nodeName === \"sign\") {\n            var dataSign = getString(ch, true);\n            ret.sign = dataSign;\n        }\n        if (ch.nodeName === \"line\") {\n            var dataLine = getNumber(ch, true);\n            ret.line = dataLine;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"size\") {\n            var dataSize = getSymbolSize(ch2, SymbolSize.Full);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"after-barline\") {\n            var dataAfterBarline = xmlToYesNo(ch2);\n            ret.afterBarline = dataAfterBarline;\n            foundAfterBarline = true;\n        }\n        if (ch2.name === \"additional\") {\n            var dataAdditional = xmlToYesNo(ch2);\n            ret.additional = dataAdditional;\n            foundAdditional = true;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundSize) {\n        ret.size = SymbolSize.Full;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundAfterBarline) {\n        ret.afterBarline = false;\n    }\n    if (!foundAdditional) {\n        ret.additional = false;\n    }\n    return ret;\n}\nfunction xmlToStaffTuning(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tuning-alter\") {\n            var dataTuningAlter = getString(ch, true);\n            ret.tuningAlter = dataTuningAlter;\n        }\n        if (ch.nodeName === \"tuning-step\") {\n            var dataTuningStep = getString(ch, true);\n            ret.tuningStep = dataTuningStep;\n        }\n        if (ch.nodeName === \"tuning-octave\") {\n            var dataTuningOctave = getString(ch, true);\n            ret.tuningOctave = dataTuningOctave;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line\") {\n            var dataLine = getString(ch2, true);\n            ret.line = dataLine;\n        }\n    }\n    return ret;\n}\n(function (ShowFretsType) {\n    ShowFretsType[ShowFretsType[\"Letters\"] = 1] = \"Letters\";\n    ShowFretsType[ShowFretsType[\"Numbers\"] = 0] = \"Numbers\";\n})(exports.ShowFretsType || (exports.ShowFretsType = {}));\nvar ShowFretsType = exports.ShowFretsType;\nfunction getShowFretsType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"letters\") {\n        return ShowFretsType.Letters;\n    }\n    if (s == \"numbers\") {\n        return ShowFretsType.Numbers;\n    }\n    return fallbackVal;\n}\nfunction xmlToStaffDetails(node) {\n    var ret = {};\n    var foundShowFrets = false;\n    var foundNumber_ = false;\n    var foundPrintObject = false;\n    var foundPrintSpacing = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"staff-lines\") {\n            var dataStaffLines = getNumber(ch, true);\n            ret.staffLines = dataStaffLines;\n        }\n        if (ch.nodeName === \"staff-tuning\") {\n            var dataStaffTunings = xmlToStaffTuning(ch);\n            ret.staffTunings = (ret.staffTunings || []).concat(dataStaffTunings);\n        }\n        if (ch.nodeName === \"staff-size\") {\n            var dataStaffSize = getNumber(ch, true);\n            ret.staffSize = dataStaffSize;\n        }\n        if (ch.nodeName === \"capo\") {\n            var dataCapo = getString(ch, true);\n            ret.capo = dataCapo;\n        }\n        if (ch.nodeName === \"staff-type\") {\n            var dataStaffType = getString(ch, true);\n            ret.staffType = dataStaffType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"show-frets\") {\n            var dataShowFrets = getShowFretsType(ch2, ShowFretsType.Numbers);\n            ret.showFrets = dataShowFrets;\n            foundShowFrets = true;\n        }\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"print-spacing\") {\n            var dataPrintSpacing = xmlToYesNo(ch2);\n            ret.printSpacing = dataPrintSpacing;\n            foundPrintSpacing = true;\n        }\n    }\n    if (!foundShowFrets) {\n        ret.showFrets = ShowFretsType.Numbers;\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundPrintSpacing) {\n        ret.printSpacing = true;\n    }\n    return ret;\n}\nfunction xmlToDouble(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToTranspose(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"diatonic\") {\n            var dataDiatonic = getString(ch, true);\n            ret.diatonic = dataDiatonic;\n        }\n        if (ch.nodeName === \"octave-change\") {\n            var dataOctaveChange = getString(ch, true);\n            ret.octaveChange = dataOctaveChange;\n        }\n        if (ch.nodeName === \"double\") {\n            var dataDouble = xmlToDouble(ch);\n            ret.double = dataDouble;\n        }\n        if (ch.nodeName === \"chromatic\") {\n            var dataChromatic = getString(ch, true);\n            ret.chromatic = dataChromatic;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = NaN;\n    }\n    return ret;\n}\nfunction xmlToDirective(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToSlashDot(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToMultipleRest(node) {\n    var ret = {};\n    var foundUseSymbols = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"use-symbols\") {\n            var dataUseSymbols = xmlToYesNo(ch2);\n            ret.useSymbols = dataUseSymbols;\n            foundUseSymbols = true;\n        }\n    }\n    var ch3 = node;\n    var dataCount = getNumber(ch3, true);\n    ret.count = dataCount;\n    if (!foundUseSymbols) {\n        ret.useSymbols = false;\n    }\n    return ret;\n}\nfunction xmlToMeasureRepeat(node) {\n    var ret = {};\n    var foundSlashes = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"slashes\") {\n            var dataSlashes = getNumber(ch2, true);\n            ret.slashes = dataSlashes;\n            foundSlashes = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundSlashes) {\n        ret.slashes = 1;\n    }\n    return ret;\n}\nfunction xmlToBeatRepeat(node) {\n    var ret = {};\n    var foundUseDots = false;\n    var foundSlases = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"slash-type\") {\n            var dataSlashType = getString(ch, true);\n            ret.slashType = dataSlashType;\n        }\n        if (ch.nodeName === \"slash-dot\") {\n            var dataSlashDots = xmlToSlashDot(ch);\n            ret.slashDots = (ret.slashDots || []).concat(dataSlashDots);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"use-dots\") {\n            var dataUseDots = xmlToYesNo(ch2);\n            ret.useDots = dataUseDots;\n            foundUseDots = true;\n        }\n        if (ch2.name === \"slases\") {\n            var dataSlases = getNumber(ch2, true);\n            ret.slases = dataSlases;\n            foundSlases = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundUseDots) {\n        ret.useDots = false;\n    }\n    if (!foundSlases) {\n        ret.slases = 1;\n    }\n    return ret;\n}\nfunction xmlToSlash(node) {\n    var ret = {};\n    var foundUseDots = false;\n    var foundUseStems = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"slash-type\") {\n            var dataSlashType = getString(ch, true);\n            ret.slashType = dataSlashType;\n        }\n        if (ch.nodeName === \"slash-dot\") {\n            var dataSlashDots = xmlToSlashDot(ch);\n            ret.slashDots = (ret.slashDots || []).concat(dataSlashDots);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"use-dots\") {\n            var dataUseDots = xmlToYesNo(ch2);\n            ret.useDots = dataUseDots;\n            foundUseDots = true;\n        }\n        if (ch2.name === \"use-stems\") {\n            var dataUseStems = xmlToYesNo(ch2);\n            ret.useStems = dataUseStems;\n            foundUseStems = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundUseDots) {\n        ret.useDots = false;\n    }\n    if (!foundUseStems) {\n        ret.useStems = false;\n    }\n    return ret;\n}\nfunction xmlToMeasureStyle(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"measure-repeat\") {\n            var dataMeasureRepeat = xmlToMeasureRepeat(ch);\n            ret.measureRepeat = dataMeasureRepeat;\n        }\n        if (ch.nodeName === \"beat-repeat\") {\n            var dataBeatRepeat = xmlToBeatRepeat(ch);\n            ret.beatRepeat = dataBeatRepeat;\n        }\n        if (ch.nodeName === \"multiple-rest\") {\n            var dataMultipleRest = xmlToMultipleRest(ch);\n            ret.multipleRest = dataMultipleRest;\n        }\n        if (ch.nodeName === \"slash\") {\n            var dataSlash = xmlToSlash(ch);\n            ret.slash = dataSlash;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToAttributes(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"divisions\") {\n            var dataDivisions = getNumber(ch, true);\n            ret.divisions = dataDivisions;\n        }\n        if (ch.nodeName === \"part-symbol\") {\n            var dataPartSymbol = xmlToPartSymbol(ch);\n            ret.partSymbol = dataPartSymbol;\n        }\n        if (ch.nodeName === \"clef\") {\n            var dataClefs = xmlToClef(ch);\n            ret.clefs = (ret.clefs || []).concat(dataClefs);\n        }\n        if (ch.nodeName === \"measure-style\") {\n            var dataMeasureStyle = xmlToMeasureStyle(ch);\n            ret.measureStyles = (ret.measureStyles || []).concat(dataMeasureStyle);\n        }\n        if (ch.nodeName === \"time\") {\n            var dataTimes = xmlToTime(ch);\n            ret.times = (ret.times || []).concat(dataTimes);\n        }\n        if (ch.nodeName === \"staff-details\") {\n            var dataStaffDetails = xmlToStaffDetails(ch);\n            ret.staffDetails = (ret.staffDetails || []).concat(dataStaffDetails);\n        }\n        if (ch.nodeName === \"transpose\") {\n            var dataTransposes = xmlToTranspose(ch);\n            ret.transposes = (ret.transposes || []).concat(dataTransposes);\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"staves\") {\n            var dataStaves = getNumber(ch, true);\n            ret.staves = dataStaves;\n        }\n        if (ch.nodeName === \"instruments\") {\n            var dataInstruments = getString(ch, true);\n            ret.instruments = dataInstruments;\n        }\n        if (ch.nodeName === \"key\") {\n            var dataKeySignatures = xmlToKey(ch);\n            ret.keySignatures = (ret.keySignatures || []).concat(dataKeySignatures);\n        }\n        if (ch.nodeName === \"directive\") {\n            var dataDirectives = xmlToDirective(ch);\n            ret.directives = (ret.directives || []).concat(dataDirectives);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"Attributes\";\n    return ret;\n}\nfunction xmlToCue(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToGrace(node) {\n    var ret = {};\n    var foundSlash = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"make-time\") {\n            var dataMakeTime = getString(ch2, true);\n            ret.makeTime = dataMakeTime;\n        }\n        if (ch2.name === \"steal-time-previous\") {\n            var dataStealTimePrevious = getString(ch2, true);\n            ret.stealTimePrevious = dataStealTimePrevious;\n        }\n        if (ch2.name === \"slash\") {\n            var dataSlash = xmlToYesNo(ch2);\n            ret.slash = dataSlash;\n            foundSlash = true;\n        }\n        if (ch2.name === \"steal-time-following\") {\n            var dataStealTimeFollowing = getString(ch2, true);\n            ret.stealTimeFollowing = dataStealTimeFollowing;\n        }\n    }\n    if (!foundSlash) {\n        ret.slash = false;\n    }\n    return ret;\n}\nfunction xmlToChord(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToUnpitched(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"display-step\") {\n            var dataDisplayStep = getString(ch, true);\n            ret.displayStep = dataDisplayStep;\n        }\n        if (ch.nodeName === \"display-octave\") {\n            var dataDisplayOctave = getNumber(ch, true);\n            ret.displayOctave = dataDisplayOctave;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToPitch(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"alter\") {\n            var dataAlter = getNumber(ch, true);\n            ret.alter = dataAlter;\n        }\n        if (ch.nodeName === \"step\") {\n            var dataStep = getString(ch, true);\n            ret.step = dataStep.toLowerCase();\n        }\n        if (ch.nodeName === \"octave\") {\n            var dataOctave = getNumber(ch, true);\n            ret.octave = dataOctave;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToFullNote(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"unpitched\") {\n            var dataUnpitched = xmlToUnpitched(ch);\n            ret.unpitched = dataUnpitched;\n        }\n        if (ch.nodeName === \"chord\") {\n            var dataChord = xmlToChord(ch);\n            ret.chord = dataChord;\n        }\n        if (ch.nodeName === \"pitch\") {\n            var dataPitch = xmlToPitch(ch);\n            ret.pitch = dataPitch;\n        }\n        if (ch.nodeName === \"rest\") {\n            var dataRest = xmlToRest(ch);\n            ret.rest = dataRest;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToRest(node) {\n    var ret = {};\n    var foundMeasure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"display-step\") {\n            var dataDisplayStep = getString(ch, true);\n            ret.displayStep = dataDisplayStep;\n        }\n        if (ch.nodeName === \"display-octave\") {\n            var dataDisplayOctave = getNumber(ch, true);\n            ret.displayOctave = dataDisplayOctave;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"measure\") {\n            var dataMeasure = xmlToYesNo(ch2);\n            ret.measure = dataMeasure;\n            foundMeasure = true;\n        }\n    }\n    if (!foundMeasure) {\n        ret.measure = false;\n    }\n    return ret;\n}\nfunction xmlToTie(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"time-only\") {\n            var dataTimeOnly = getString(ch2, true);\n            ret.timeOnly = dataTimeOnly;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    return ret;\n}\nfunction xmlToInstrument(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"id\") {\n            var dataId = getString(ch2, true);\n            ret.id = dataId;\n        }\n    }\n    return ret;\n}\nfunction xmlToNote(node) {\n    var ret = {};\n    var foundAttack = false;\n    var foundEndDynamics = false;\n    var foundPizzicato = false;\n    var foundDynamics = false;\n    var foundRelease = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundPrintSpacing = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"notehead-text\") {\n            var dataNoteheadText = xmlToNoteheadText(ch);\n            ret.noteheadText = dataNoteheadText;\n        }\n        if (ch.nodeName === \"time-modification\") {\n            var dataTimeModification = xmlToTimeModification(ch);\n            ret.timeModification = dataTimeModification;\n        }\n        if (ch.nodeName === \"accidental\") {\n            var dataAccidental = xmlToAccidental(ch);\n            ret.accidental = dataAccidental;\n        }\n        if (ch.nodeName === \"instrument\") {\n            var dataInstrument = xmlToInstrument(ch);\n            ret.instrument = dataInstrument;\n        }\n        if (ch.nodeName === \"lyric\") {\n            var dataLyrics = xmlToLyric(ch);\n            ret.lyrics = (ret.lyrics || []).concat(dataLyrics);\n        }\n        if (ch.nodeName === \"dot\") {\n            var dataDots = xmlToDot(ch);\n            ret.dots = (ret.dots || []).concat(dataDots);\n        }\n        if (ch.nodeName === \"notations\") {\n            var dataNotations = xmlToNotations(ch);\n            ret.notations = (ret.notations || []).concat(dataNotations);\n        }\n        if (ch.nodeName === \"stem\") {\n            var dataStem = xmlToStem(ch);\n            ret.stem = dataStem;\n        }\n        if (ch.nodeName === \"type\") {\n            var dataNoteType = xmlToType(ch);\n            ret.noteType = dataNoteType;\n        }\n        if (ch.nodeName === \"cue\") {\n            var dataCue = xmlToCue(ch);\n            ret.cue = dataCue;\n        }\n        if (ch.nodeName === \"duration\") {\n            var dataDuration = getNumber(ch, true);\n            ret.duration = dataDuration;\n        }\n        if (ch.nodeName === \"tie\") {\n            var dataTies = xmlToTie(ch);\n            ret.ties = (ret.ties || []).concat(dataTies);\n        }\n        if (ch.nodeName === \"play\") {\n            var dataPlay = xmlToPlay(ch);\n            ret.play = dataPlay;\n        }\n        if (ch.nodeName === \"staff\") {\n            var dataStaff = getNumber(ch, true);\n            ret.staff = dataStaff;\n        }\n        if (ch.nodeName === \"grace\") {\n            var dataGrace = xmlToGrace(ch);\n            ret.grace = dataGrace;\n        }\n        if (ch.nodeName === \"notehead\") {\n            var dataNotehead = xmlToNotehead(ch);\n            ret.notehead = dataNotehead;\n        }\n        if (ch.nodeName === \"voice\") {\n            var dataVoice = getNumber(ch, true);\n            ret.voice = dataVoice;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"unpitched\") {\n            var dataUnpitched = xmlToUnpitched(ch);\n            ret.unpitched = dataUnpitched;\n        }\n        if (ch.nodeName === \"chord\") {\n            var dataChord = xmlToChord(ch);\n            ret.chord = dataChord;\n        }\n        if (ch.nodeName === \"pitch\") {\n            var dataPitch = xmlToPitch(ch);\n            ret.pitch = dataPitch;\n        }\n        if (ch.nodeName === \"rest\") {\n            var dataRest = xmlToRest(ch);\n            ret.rest = dataRest;\n        }\n        if (ch.nodeName === \"beam\") {\n            var dataBeams = xmlToBeam(ch);\n            ret.beams = (ret.beams || []).concat(dataBeams);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"attack\") {\n            var dataAttack = getNumber(ch2, true);\n            ret.attack = dataAttack;\n            foundAttack = true;\n        }\n        if (ch2.name === \"end-dynamics\") {\n            var dataEndDynamics = getNumber(ch2, true);\n            ret.endDynamics = dataEndDynamics;\n            foundEndDynamics = true;\n        }\n        if (ch2.name === \"pizzicato\") {\n            var dataPizzicato = xmlToYesNo(ch2);\n            ret.pizzicato = dataPizzicato;\n            foundPizzicato = true;\n        }\n        if (ch2.name === \"dynamics\") {\n            var dataDynamics = getNumber(ch2, true);\n            ret.dynamics = dataDynamics;\n            foundDynamics = true;\n        }\n        if (ch2.name === \"release\") {\n            var dataRelease = getNumber(ch2, true);\n            ret.release = dataRelease;\n            foundRelease = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-dot\") {\n            var dataPrintDot = xmlToYesNo(ch2);\n            ret.printDot = dataPrintDot;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"print-spacing\") {\n            var dataPrintSpacing = xmlToYesNo(ch2);\n            ret.printSpacing = dataPrintSpacing;\n            foundPrintSpacing = true;\n        }\n        if (ch2.name === \"print-lyric\") {\n            var dataPrintLyric = xmlToYesNo(ch2);\n            ret.printLyric = dataPrintLyric;\n        }\n        if (ch2.name === \"time-only\") {\n            var dataTimeOnly = getString(ch2, true);\n            ret.timeOnly = dataTimeOnly;\n        }\n    }\n    if (!foundAttack) {\n        ret.attack = NaN;\n    }\n    if (!foundEndDynamics) {\n        ret.endDynamics = 90;\n    }\n    if (!foundPizzicato) {\n        ret.pizzicato = false;\n    }\n    if (!foundDynamics) {\n        ret.dynamics = 90;\n    }\n    if (!foundRelease) {\n        ret.release = NaN;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundPrintSpacing) {\n        ret.printSpacing = true;\n    }\n    ret._class = \"Note\";\n    return ret;\n}\n(function (Count) {\n    Count[Count[\"Quarter\"] = 4] = \"Quarter\";\n    Count[Count[\"Breve\"] = 9990] = \"Breve\";\n    Count[Count[\"Long\"] = 9991] = \"Long\";\n    Count[Count[\"_1024th\"] = 1024] = \"_1024th\";\n    Count[Count[\"_32nd\"] = 32] = \"_32nd\";\n    Count[Count[\"_16th\"] = 16] = \"_16th\";\n    Count[Count[\"Eighth\"] = 8] = \"Eighth\";\n    Count[Count[\"Maxima\"] = 9992] = \"Maxima\";\n    Count[Count[\"_512th\"] = 512] = \"_512th\";\n    Count[Count[\"_64th\"] = 64] = \"_64th\";\n    Count[Count[\"_256th\"] = 256] = \"_256th\";\n    Count[Count[\"_128th\"] = 128] = \"_128th\";\n    Count[Count[\"Half\"] = 2] = \"Half\";\n    Count[Count[\"Whole\"] = 1] = \"Whole\";\n})(exports.Count || (exports.Count = {}));\nvar Count = exports.Count;\nfunction getCount(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"quarter\") {\n        return Count.Quarter;\n    }\n    if (s == \"breve\") {\n        return Count.Breve;\n    }\n    if (s == \"long\") {\n        return Count.Long;\n    }\n    if (s == \"1024th\") {\n        return Count._1024th;\n    }\n    if (s == \"32nd\") {\n        return Count._32nd;\n    }\n    if (s == \"16th\") {\n        return Count._16th;\n    }\n    if (s == \"eighth\") {\n        return Count.Eighth;\n    }\n    if (s == \"maxima\") {\n        return Count.Maxima;\n    }\n    if (s == \"512th\") {\n        return Count._512th;\n    }\n    if (s == \"64th\") {\n        return Count._64th;\n    }\n    if (s == \"256th\") {\n        return Count._256th;\n    }\n    if (s == \"128th\") {\n        return Count._128th;\n    }\n    if (s == \"half\") {\n        return Count.Half;\n    }\n    if (s == \"whole\") {\n        return Count.Whole;\n    }\n    return fallbackVal;\n}\nfunction xmlToType(node) {\n    var ret = {};\n    var foundSize = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"size\") {\n            var dataSize = getSymbolSize(ch2, SymbolSize.Unspecified);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n    }\n    var ch3 = node;\n    var dataDuration = getCount(ch3, null);\n    ret.duration = dataDuration;\n    if (!foundSize) {\n        ret.size = SymbolSize.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDot(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\n(function (MxmlAccidental) {\n    MxmlAccidental[MxmlAccidental[\"NaturalFlat\"] = 7] = \"NaturalFlat\";\n    MxmlAccidental[MxmlAccidental[\"SharpUp\"] = 13] = \"SharpUp\";\n    MxmlAccidental[MxmlAccidental[\"ThreeQuartersFlat\"] = 10] = \"ThreeQuartersFlat\";\n    MxmlAccidental[MxmlAccidental[\"ThreeQuartersSharp\"] = 11] = \"ThreeQuartersSharp\";\n    MxmlAccidental[MxmlAccidental[\"QuarterFlat\"] = 8] = \"QuarterFlat\";\n    MxmlAccidental[MxmlAccidental[\"Flat\"] = 2] = \"Flat\";\n    MxmlAccidental[MxmlAccidental[\"TripleSharp\"] = 18] = \"TripleSharp\";\n    MxmlAccidental[MxmlAccidental[\"Flat1\"] = 27] = \"Flat1\";\n    MxmlAccidental[MxmlAccidental[\"Flat2\"] = 28] = \"Flat2\";\n    MxmlAccidental[MxmlAccidental[\"Flat3\"] = 29] = \"Flat3\";\n    MxmlAccidental[MxmlAccidental[\"Flat4\"] = 291] = \"Flat4\";\n    MxmlAccidental[MxmlAccidental[\"TripleFlat\"] = 191] = \"TripleFlat\";\n    MxmlAccidental[MxmlAccidental[\"Flat5\"] = 30] = \"Flat5\";\n    MxmlAccidental[MxmlAccidental[\"Sharp\"] = 0] = \"Sharp\";\n    MxmlAccidental[MxmlAccidental[\"QuarterSharp\"] = 9] = \"QuarterSharp\";\n    MxmlAccidental[MxmlAccidental[\"SlashFlat\"] = 21] = \"SlashFlat\";\n    MxmlAccidental[MxmlAccidental[\"FlatDown\"] = 16] = \"FlatDown\";\n    MxmlAccidental[MxmlAccidental[\"NaturalDown\"] = 14] = \"NaturalDown\";\n    MxmlAccidental[MxmlAccidental[\"SlashQuarterSharp\"] = 19] = \"SlashQuarterSharp\";\n    MxmlAccidental[MxmlAccidental[\"SharpSharp\"] = 4] = \"SharpSharp\";\n    MxmlAccidental[MxmlAccidental[\"Sharp1\"] = 23] = \"Sharp1\";\n    MxmlAccidental[MxmlAccidental[\"FlatUp\"] = 17] = \"FlatUp\";\n    MxmlAccidental[MxmlAccidental[\"Sharp2\"] = 24] = \"Sharp2\";\n    MxmlAccidental[MxmlAccidental[\"Sharp3\"] = 25] = \"Sharp3\";\n    MxmlAccidental[MxmlAccidental[\"DoubleSharp\"] = 3] = \"DoubleSharp\";\n    MxmlAccidental[MxmlAccidental[\"Sharp4\"] = 251] = \"Sharp4\";\n    MxmlAccidental[MxmlAccidental[\"Sharp5\"] = 26] = \"Sharp5\";\n    MxmlAccidental[MxmlAccidental[\"Sori\"] = 31] = \"Sori\";\n    MxmlAccidental[MxmlAccidental[\"DoubleSlashFlat\"] = 22] = \"DoubleSlashFlat\";\n    MxmlAccidental[MxmlAccidental[\"SharpDown\"] = 12] = \"SharpDown\";\n    MxmlAccidental[MxmlAccidental[\"Koron\"] = 32] = \"Koron\";\n    MxmlAccidental[MxmlAccidental[\"NaturalUp\"] = 15] = \"NaturalUp\";\n    MxmlAccidental[MxmlAccidental[\"SlashSharp\"] = 20] = \"SlashSharp\";\n    MxmlAccidental[MxmlAccidental[\"NaturalSharp\"] = 6] = \"NaturalSharp\";\n    MxmlAccidental[MxmlAccidental[\"FlatFlat\"] = 5] = \"FlatFlat\";\n    MxmlAccidental[MxmlAccidental[\"Natural\"] = 1] = \"Natural\";\n    MxmlAccidental[MxmlAccidental[\"DoubleFlat\"] = 33] = \"DoubleFlat\";\n})(exports.MxmlAccidental || (exports.MxmlAccidental = {}));\nvar MxmlAccidental = exports.MxmlAccidental;\nfunction getMxmlAccidental(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"natural-flat\") {\n        return MxmlAccidental.NaturalFlat;\n    }\n    if (s == \"sharp-up\") {\n        return MxmlAccidental.SharpUp;\n    }\n    if (s == \"three-quarters-flat\") {\n        return MxmlAccidental.ThreeQuartersFlat;\n    }\n    if (s == \"three-quarters-sharp\") {\n        return MxmlAccidental.ThreeQuartersSharp;\n    }\n    if (s == \"quarter-flat\") {\n        return MxmlAccidental.QuarterFlat;\n    }\n    if (s == \"flat\") {\n        return MxmlAccidental.Flat;\n    }\n    if (s == \"triple-sharp\") {\n        return MxmlAccidental.TripleSharp;\n    }\n    if (s == \"flat-1\") {\n        return MxmlAccidental.Flat1;\n    }\n    if (s == \"flat-2\") {\n        return MxmlAccidental.Flat2;\n    }\n    if (s == \"flat-3\") {\n        return MxmlAccidental.Flat3;\n    }\n    if (s == \"flat-4\") {\n        return MxmlAccidental.Flat4;\n    }\n    if (s == \"triple-flat\") {\n        return MxmlAccidental.TripleFlat;\n    }\n    if (s == \"flat-5\") {\n        return MxmlAccidental.Flat5;\n    }\n    if (s == \"sharp\") {\n        return MxmlAccidental.Sharp;\n    }\n    if (s == \"quarter-sharp\") {\n        return MxmlAccidental.QuarterSharp;\n    }\n    if (s == \"slash-flat\") {\n        return MxmlAccidental.SlashFlat;\n    }\n    if (s == \"flat-down\") {\n        return MxmlAccidental.FlatDown;\n    }\n    if (s == \"natural-down\") {\n        return MxmlAccidental.NaturalDown;\n    }\n    if (s == \"slash-quarter-sharp\") {\n        return MxmlAccidental.SlashQuarterSharp;\n    }\n    if (s == \"sharp-sharp\") {\n        return MxmlAccidental.SharpSharp;\n    }\n    if (s == \"sharp-1\") {\n        return MxmlAccidental.Sharp1;\n    }\n    if (s == \"flat-up\") {\n        return MxmlAccidental.FlatUp;\n    }\n    if (s == \"sharp-2\") {\n        return MxmlAccidental.Sharp2;\n    }\n    if (s == \"sharp-3\") {\n        return MxmlAccidental.Sharp3;\n    }\n    if (s == \"double-sharp\") {\n        return MxmlAccidental.DoubleSharp;\n    }\n    if (s == \"sharp-4\") {\n        return MxmlAccidental.Sharp4;\n    }\n    if (s == \"sharp-5\") {\n        return MxmlAccidental.Sharp5;\n    }\n    if (s == \"sori\") {\n        return MxmlAccidental.Sori;\n    }\n    if (s == \"double-slash-flat\") {\n        return MxmlAccidental.DoubleSlashFlat;\n    }\n    if (s == \"sharp-down\") {\n        return MxmlAccidental.SharpDown;\n    }\n    if (s == \"koron\") {\n        return MxmlAccidental.Koron;\n    }\n    if (s == \"natural-up\") {\n        return MxmlAccidental.NaturalUp;\n    }\n    if (s == \"slash-sharp\") {\n        return MxmlAccidental.SlashSharp;\n    }\n    if (s == \"natural-sharp\") {\n        return MxmlAccidental.NaturalSharp;\n    }\n    if (s == \"flat-flat\") {\n        return MxmlAccidental.FlatFlat;\n    }\n    if (s == \"natural\") {\n        return MxmlAccidental.Natural;\n    }\n    if (s == \"double-flat\") {\n        return MxmlAccidental.DoubleFlat;\n    }\n    return fallbackVal;\n}\nfunction xmlToAccidental(node) {\n    var ret = {};\n    var foundCautionary = false;\n    var foundBracket = false;\n    var foundSize = false;\n    var foundParentheses = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundEditorial = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"cautionary\") {\n            var dataCautionary = xmlToYesNo(ch2);\n            ret.cautionary = dataCautionary;\n            foundCautionary = true;\n        }\n        if (ch2.name === \"bracket\") {\n            var dataBracket = xmlToYesNo(ch2);\n            ret.bracket = dataBracket;\n            foundBracket = true;\n        }\n        if (ch2.name === \"size\") {\n            var dataSize = getSymbolSize(ch2, SymbolSize.Unspecified);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n            foundParentheses = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"editorial\") {\n            var dataEditorial = xmlToYesNo(ch2);\n            ret.editorial = dataEditorial;\n            foundEditorial = true;\n        }\n    }\n    var ch3 = node;\n    var dataAccidental = getMxmlAccidental(ch3, null);\n    ret.accidental = dataAccidental;\n    if (!foundCautionary) {\n        ret.cautionary = false;\n    }\n    if (!foundBracket) {\n        ret.bracket = false;\n    }\n    if (!foundSize) {\n        ret.size = SymbolSize.Unspecified;\n    }\n    if (!foundParentheses) {\n        ret.parentheses = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundEditorial) {\n        ret.editorial = false;\n    }\n    return ret;\n}\nfunction xmlToTimeModification(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"actual-notes\") {\n            var dataActualNotes = getNumber(ch, true);\n            ret.actualNotes = dataActualNotes;\n        }\n        if (ch.nodeName === \"normal-type\") {\n            var dataNormalType = getString(ch, true);\n            ret.normalType = dataNormalType;\n        }\n        if (ch.nodeName === \"normal-notes\") {\n            var dataNormalNotes = getNumber(ch, true);\n            ret.normalNotes = dataNormalNotes;\n        }\n        if (ch.nodeName === \"normal-dot\") {\n            var dataNormalDots = xmlToNormalDot(ch);\n            ret.normalDots = (ret.normalDots || []).concat(dataNormalDots);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\n(function (StemType) {\n    StemType[StemType[\"None\"] = 2] = \"None\";\n    StemType[StemType[\"Double\"] = 3] = \"Double\";\n    StemType[StemType[\"Down\"] = 0] = \"Down\";\n    StemType[StemType[\"Up\"] = 1] = \"Up\";\n})(exports.StemType || (exports.StemType = {}));\nvar StemType = exports.StemType;\nfunction getStemType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return StemType.None;\n    }\n    if (s == \"double\") {\n        return StemType.Double;\n    }\n    if (s == \"down\") {\n        return StemType.Down;\n    }\n    if (s == \"up\") {\n        return StemType.Up;\n    }\n    return fallbackVal;\n}\nfunction xmlToStem(node) {\n    var ret = {};\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataType = getStemType(ch3, null);\n    ret.type = dataType;\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (NoteheadType) {\n    NoteheadType[NoteheadType[\"InvertedTriangle\"] = 7] = \"InvertedTriangle\";\n    NoteheadType[NoteheadType[\"CircleDot\"] = 14] = \"CircleDot\";\n    NoteheadType[NoteheadType[\"ArrowUp\"] = 9] = \"ArrowUp\";\n    NoteheadType[NoteheadType[\"Do\"] = 18] = \"Do\";\n    NoteheadType[NoteheadType[\"Mi\"] = 20] = \"Mi\";\n    NoteheadType[NoteheadType[\"Cross\"] = 4] = \"Cross\";\n    NoteheadType[NoteheadType[\"Slash\"] = 0] = \"Slash\";\n    NoteheadType[NoteheadType[\"Fa\"] = 21] = \"Fa\";\n    NoteheadType[NoteheadType[\"Triangle\"] = 1] = \"Triangle\";\n    NoteheadType[NoteheadType[\"FaUp\"] = 22] = \"FaUp\";\n    NoteheadType[NoteheadType[\"So\"] = 23] = \"So\";\n    NoteheadType[NoteheadType[\"LeftTriangle\"] = 15] = \"LeftTriangle\";\n    NoteheadType[NoteheadType[\"BackSlashed\"] = 11] = \"BackSlashed\";\n    NoteheadType[NoteheadType[\"None\"] = 17] = \"None\";\n    NoteheadType[NoteheadType[\"La\"] = 24] = \"La\";\n    NoteheadType[NoteheadType[\"Slashed\"] = 10] = \"Slashed\";\n    NoteheadType[NoteheadType[\"Normal\"] = 12] = \"Normal\";\n    NoteheadType[NoteheadType[\"Cluster\"] = 13] = \"Cluster\";\n    NoteheadType[NoteheadType[\"Ti\"] = 25] = \"Ti\";\n    NoteheadType[NoteheadType[\"Re\"] = 19] = \"Re\";\n    NoteheadType[NoteheadType[\"Rectangle\"] = 16] = \"Rectangle\";\n    NoteheadType[NoteheadType[\"Square\"] = 3] = \"Square\";\n    NoteheadType[NoteheadType[\"ArrowDown\"] = 8] = \"ArrowDown\";\n    NoteheadType[NoteheadType[\"X\"] = 5] = \"X\";\n    NoteheadType[NoteheadType[\"Diamond\"] = 2] = \"Diamond\";\n    NoteheadType[NoteheadType[\"CircleX\"] = 6] = \"CircleX\";\n})(exports.NoteheadType || (exports.NoteheadType = {}));\nvar NoteheadType = exports.NoteheadType;\nfunction getNoteheadType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"inverted triangle\") {\n        return NoteheadType.InvertedTriangle;\n    }\n    if (s == \"circle dot\") {\n        return NoteheadType.CircleDot;\n    }\n    if (s == \"arrow up\") {\n        return NoteheadType.ArrowUp;\n    }\n    if (s == \"do\") {\n        return NoteheadType.Do;\n    }\n    if (s == \"mi\") {\n        return NoteheadType.Mi;\n    }\n    if (s == \"cross\") {\n        return NoteheadType.Cross;\n    }\n    if (s == \"slash\") {\n        return NoteheadType.Slash;\n    }\n    if (s == \"fa\") {\n        return NoteheadType.Fa;\n    }\n    if (s == \"triangle\") {\n        return NoteheadType.Triangle;\n    }\n    if (s == \"fa up\") {\n        return NoteheadType.FaUp;\n    }\n    if (s == \"so\") {\n        return NoteheadType.So;\n    }\n    if (s == \"left triangle\") {\n        return NoteheadType.LeftTriangle;\n    }\n    if (s == \"back slashed\") {\n        return NoteheadType.BackSlashed;\n    }\n    if (s == \"none\") {\n        return NoteheadType.None;\n    }\n    if (s == \"la\") {\n        return NoteheadType.La;\n    }\n    if (s == \"slashed\") {\n        return NoteheadType.Slashed;\n    }\n    if (s == \"normal\") {\n        return NoteheadType.Normal;\n    }\n    if (s == \"cluster\") {\n        return NoteheadType.Cluster;\n    }\n    if (s == \"ti\") {\n        return NoteheadType.Ti;\n    }\n    if (s == \"re\") {\n        return NoteheadType.Re;\n    }\n    if (s == \"rectangle\") {\n        return NoteheadType.Rectangle;\n    }\n    if (s == \"square\") {\n        return NoteheadType.Square;\n    }\n    if (s == \"arrow down\") {\n        return NoteheadType.ArrowDown;\n    }\n    if (s == \"x\") {\n        return NoteheadType.X;\n    }\n    if (s == \"diamond\") {\n        return NoteheadType.Diamond;\n    }\n    if (s == \"circle-x\") {\n        return NoteheadType.CircleX;\n    }\n    return fallbackVal;\n}\nfunction xmlToNotehead(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"filled\") {\n            var dataFilled = xmlToYesNo(ch2);\n            ret.filled = dataFilled;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n        }\n    }\n    var ch3 = node;\n    var dataType = getNoteheadType(ch3, null);\n    ret.type = dataType;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (BeamType) {\n    BeamType[BeamType[\"BackwardHook\"] = 4] = \"BackwardHook\";\n    BeamType[BeamType[\"Begin\"] = 0] = \"Begin\";\n    BeamType[BeamType[\"ForwardHook\"] = 3] = \"ForwardHook\";\n    BeamType[BeamType[\"Continue\"] = 1] = \"Continue\";\n    BeamType[BeamType[\"End\"] = 2] = \"End\";\n})(exports.BeamType || (exports.BeamType = {}));\nvar BeamType = exports.BeamType;\nfunction getBeamType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"backward hook\") {\n        return BeamType.BackwardHook;\n    }\n    if (s == \"begin\") {\n        return BeamType.Begin;\n    }\n    if (s == \"forward hook\") {\n        return BeamType.ForwardHook;\n    }\n    if (s == \"continue\") {\n        return BeamType.Continue;\n    }\n    if (s == \"end\") {\n        return BeamType.End;\n    }\n    return fallbackVal;\n}\n(function (AccelRitNone) {\n    AccelRitNone[AccelRitNone[\"Accel\"] = 0] = \"Accel\";\n    AccelRitNone[AccelRitNone[\"None\"] = 2] = \"None\";\n    AccelRitNone[AccelRitNone[\"Rit\"] = 1] = \"Rit\";\n})(exports.AccelRitNone || (exports.AccelRitNone = {}));\nvar AccelRitNone = exports.AccelRitNone;\nfunction getAccelRitNone(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"accel\") {\n        return AccelRitNone.Accel;\n    }\n    if (s == \"none\") {\n        return AccelRitNone.None;\n    }\n    if (s == \"rit\") {\n        return AccelRitNone.Rit;\n    }\n    return fallbackVal;\n}\nfunction xmlToBeam(node) {\n    var ret = {};\n    var foundRepeater = false;\n    var foundNumber_ = false;\n    var foundFan = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"repeater\") {\n            var dataRepeater = xmlToYesNo(ch2);\n            ret.repeater = dataRepeater;\n            foundRepeater = true;\n        }\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"fan\") {\n            var dataFan = getAccelRitNone(ch2, AccelRitNone.None);\n            ret.fan = dataFan;\n            foundFan = true;\n        }\n    }\n    var ch3 = node;\n    var dataType = getBeamType(ch3, null);\n    ret.type = dataType;\n    if (!foundRepeater) {\n        ret.repeater = false;\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundFan) {\n        ret.fan = AccelRitNone.None;\n    }\n    return ret;\n}\nfunction xmlToNotations(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"slur\") {\n            var dataSlurs = xmlToSlur(ch);\n            ret.slurs = (ret.slurs || []).concat(dataSlurs);\n        }\n        if (ch.nodeName === \"articulations\") {\n            var dataArticulations = xmlToArticulations(ch);\n            ret.articulations = (ret.articulations || []).concat(dataArticulations);\n        }\n        if (ch.nodeName === \"slide\") {\n            var dataSlides = xmlToSlide(ch);\n            ret.slides = (ret.slides || []).concat(dataSlides);\n        }\n        if (ch.nodeName === \"technical\") {\n            var dataTechnicals = xmlToTechnical(ch);\n            ret.technicals = (ret.technicals || []).concat(dataTechnicals);\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"tied\") {\n            var dataTieds = xmlToTied(ch);\n            ret.tieds = (ret.tieds || []).concat(dataTieds);\n        }\n        if (ch.nodeName === \"tuplet\") {\n            var dataTuplets = xmlToTuplet(ch);\n            ret.tuplets = (ret.tuplets || []).concat(dataTuplets);\n        }\n        if (ch.nodeName === \"glissando\") {\n            var dataGlissandos = xmlToGlissando(ch);\n            ret.glissandos = (ret.glissandos || []).concat(dataGlissandos);\n        }\n        if (ch.nodeName === \"dynamics\") {\n            var dataDynamics = xmlToDynamics(ch);\n            ret.dynamics = (ret.dynamics || []).concat(dataDynamics);\n        }\n        if (ch.nodeName === \"fermata\") {\n            var dataFermatas = xmlToFermata(ch);\n            ret.fermatas = (ret.fermatas || []).concat(dataFermatas);\n        }\n        if (ch.nodeName === \"accidental-mark\") {\n            var dataAccidentalMarks = xmlToAccidentalMark(ch);\n            ret.accidentalMarks = (ret.accidentalMarks || []).concat(dataAccidentalMarks);\n        }\n        if (ch.nodeName === \"ornaments\") {\n            var dataOrnaments = xmlToOrnaments(ch);\n            ret.ornaments = (ret.ornaments || []).concat(dataOrnaments);\n        }\n        if (ch.nodeName === \"arpeggiate\") {\n            var dataArpeggiates = xmlToArpeggiate(ch);\n            ret.arpeggiates = (ret.arpeggiates || []).concat(dataArpeggiates);\n        }\n        if (ch.nodeName === \"non-arpeggiate\") {\n            var dataNonArpeggiates = xmlToNonArpeggiate(ch);\n            ret.nonArpeggiates = (ret.nonArpeggiates || []).concat(dataNonArpeggiates);\n        }\n        if (ch.nodeName === \"other-notation\") {\n            var dataOtherNotations = xmlToOtherNotation(ch);\n            ret.otherNotations = (ret.otherNotations || []).concat(dataOtherNotations);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    return ret;\n}\nfunction xmlToTied(node) {\n    var ret = {};\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundPlacement = false;\n    var foundOrientation = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"orientation\") {\n            var dataOrientation = getOverUnder(ch2, OverUnder.Unspecified);\n            ret.orientation = dataOrientation;\n            foundOrientation = true;\n        }\n        if (ch2.name === \"bezier-x2\") {\n            var dataBezierX2 = getNumber(ch2, true);\n            ret.bezierX2 = dataBezierX2;\n        }\n        if (ch2.name === \"bezier-offset\") {\n            var dataBezierOffset = getNumber(ch2, true);\n            ret.bezierOffset = dataBezierOffset;\n        }\n        if (ch2.name === \"bezier-offset2\") {\n            var dataBezierOffset2 = getNumber(ch2, true);\n            ret.bezierOffset2 = dataBezierOffset2;\n        }\n        if (ch2.name === \"bezier-x\") {\n            var dataBezierX = getNumber(ch2, true);\n            ret.bezierX = dataBezierX;\n        }\n        if (ch2.name === \"bezier-y\") {\n            var dataBezierY = getNumber(ch2, true);\n            ret.bezierY = dataBezierY;\n        }\n        if (ch2.name === \"bezier-y2\") {\n            var dataBezierY2 = getNumber(ch2, true);\n            ret.bezierY2 = dataBezierY2;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundOrientation) {\n        ret.orientation = OverUnder.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToSlur(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundPlacement = false;\n    var foundOrientation = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"orientation\") {\n            var dataOrientation = getOverUnder(ch2, OverUnder.Unspecified);\n            ret.orientation = dataOrientation;\n            foundOrientation = true;\n        }\n        if (ch2.name === \"bezier-x2\") {\n            var dataBezierX2 = getNumber(ch2, true);\n            ret.bezierX2 = dataBezierX2;\n        }\n        if (ch2.name === \"bezier-offset\") {\n            var dataBezierOffset = getNumber(ch2, true);\n            ret.bezierOffset = dataBezierOffset;\n        }\n        if (ch2.name === \"bezier-offset2\") {\n            var dataBezierOffset2 = getNumber(ch2, true);\n            ret.bezierOffset2 = dataBezierOffset2;\n        }\n        if (ch2.name === \"bezier-x\") {\n            var dataBezierX = getNumber(ch2, true);\n            ret.bezierX = dataBezierX;\n        }\n        if (ch2.name === \"bezier-y\") {\n            var dataBezierY = getNumber(ch2, true);\n            ret.bezierY = dataBezierY;\n        }\n        if (ch2.name === \"bezier-y2\") {\n            var dataBezierY2 = getNumber(ch2, true);\n            ret.bezierY2 = dataBezierY2;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundOrientation) {\n        ret.orientation = OverUnder.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (ActualBothNone) {\n    ActualBothNone[ActualBothNone[\"None\"] = 2] = \"None\";\n    ActualBothNone[ActualBothNone[\"Both\"] = 1] = \"Both\";\n    ActualBothNone[ActualBothNone[\"Actual\"] = 0] = \"Actual\";\n})(exports.ActualBothNone || (exports.ActualBothNone = {}));\nvar ActualBothNone = exports.ActualBothNone;\nfunction getActualBothNone(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return ActualBothNone.None;\n    }\n    if (s == \"both\") {\n        return ActualBothNone.Both;\n    }\n    if (s == \"actual\") {\n        return ActualBothNone.Actual;\n    }\n    return fallbackVal;\n}\nfunction xmlToTuplet(node) {\n    var ret = {};\n    var foundBracket = false;\n    var foundShowNumber = false;\n    var foundLineShape = false;\n    var foundPlacement = false;\n    var foundShowType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tuplet-normal\") {\n            var dataTupletNormal = xmlToTupletNormal(ch);\n            ret.tupletNormal = dataTupletNormal;\n        }\n        if (ch.nodeName === \"tuplet-actual\") {\n            var dataTupletActual = xmlToTupletActual(ch);\n            ret.tupletActual = dataTupletActual;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"bracket\") {\n            var dataBracket = xmlToYesNo(ch2);\n            ret.bracket = dataBracket;\n            foundBracket = true;\n        }\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"show-number\") {\n            var dataShowNumber = getActualBothNone(ch2, ActualBothNone.Actual);\n            ret.showNumber = dataShowNumber;\n            foundShowNumber = true;\n        }\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"show-type\") {\n            var dataShowType = getActualBothNone(ch2, ActualBothNone.None);\n            ret.showType = dataShowType;\n            foundShowType = true;\n        }\n    }\n    if (!foundBracket) {\n        ret.bracket = false;\n    }\n    if (!foundShowNumber) {\n        ret.showNumber = ActualBothNone.Actual;\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundShowType) {\n        ret.showType = ActualBothNone.None;\n    }\n    return ret;\n}\nfunction xmlToTupletActual(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tuplet-number\") {\n            var dataTupletNumber = xmlToTupletNumber(ch);\n            ret.tupletNumber = dataTupletNumber;\n        }\n        if (ch.nodeName === \"tuplet-dot\") {\n            var dataTupletDots = xmlToTupletDot(ch);\n            ret.tupletDots = (ret.tupletDots || []).concat(dataTupletDots);\n        }\n        if (ch.nodeName === \"tuplet-type\") {\n            var dataTupletType = xmlToTupletType(ch);\n            ret.tupletType = dataTupletType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToTupletNormal(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tuplet-number\") {\n            var dataTupletNumber = xmlToTupletNumber(ch);\n            ret.tupletNumber = dataTupletNumber;\n        }\n        if (ch.nodeName === \"tuplet-dot\") {\n            var dataTupletDots = xmlToTupletDot(ch);\n            ret.tupletDots = (ret.tupletDots || []).concat(dataTupletDots);\n        }\n        if (ch.nodeName === \"tuplet-type\") {\n            var dataTupletType = xmlToTupletType(ch);\n            ret.tupletType = dataTupletType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToTupletNumber(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToTupletType(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToTupletDot(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToGlissando(node) {\n    var ret = {};\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundNormal = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"normal\") {\n            var dataNormal = getNumber(ch2, true);\n            ret.normal = dataNormal;\n            foundNormal = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, false);\n    ret.text = dataText;\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundNormal) {\n        ret.normal = 1;\n    }\n    return ret;\n}\nfunction xmlToSlide(node) {\n    var ret = {};\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundFirstBeat = false;\n    var foundNormal = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"first-beat\") {\n            var dataFirstBeat = getNumber(ch2, true);\n            ret.firstBeat = dataFirstBeat;\n            foundFirstBeat = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"normal\") {\n            var dataNormal = getNumber(ch2, true);\n            ret.normal = dataNormal;\n            foundNormal = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, false);\n    ret.text = dataText;\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundFirstBeat) {\n        ret.firstBeat = 25;\n    }\n    if (!foundNormal) {\n        ret.normal = 1;\n    }\n    return ret;\n}\nfunction xmlToOtherNotation(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopSingle(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToOtherDirection(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToOrnaments(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"delayed-inverted-turn\") {\n            var dataDelayedInvertedTurn = xmlToDelayedInvertedTurn(ch);\n            ret.delayedInvertedTurn = dataDelayedInvertedTurn;\n        }\n        if (ch.nodeName === \"shake\") {\n            var dataShake = xmlToShake(ch);\n            ret.shake = dataShake;\n        }\n        if (ch.nodeName === \"turn\") {\n            var dataTurn = xmlToTurn(ch);\n            ret.turn = dataTurn;\n        }\n        if (ch.nodeName === \"inverted-turn\") {\n            var dataInvertedTurn = xmlToInvertedTurn(ch);\n            ret.invertedTurn = dataInvertedTurn;\n        }\n        if (ch.nodeName === \"other-ornament\") {\n            var dataOtherOrnament = xmlToOtherOrnament(ch);\n            ret.otherOrnament = dataOtherOrnament;\n        }\n        if (ch.nodeName === \"delayed-turn\") {\n            var dataDelayedTurn = xmlToDelayedTurn(ch);\n            ret.delayedTurn = dataDelayedTurn;\n        }\n        if (ch.nodeName === \"vertical-turn\") {\n            var dataVerticalTurn = xmlToVerticalTurn(ch);\n            ret.verticalTurn = dataVerticalTurn;\n        }\n        if (ch.nodeName === \"wavy-line\") {\n            var dataWavyLine = xmlToWavyLine(ch);\n            ret.wavyLine = dataWavyLine;\n        }\n        if (ch.nodeName === \"tremolo\") {\n            var dataTremolo = xmlToTremolo(ch);\n            ret.tremolo = dataTremolo;\n        }\n        if (ch.nodeName === \"accidental-mark\") {\n            var dataAccidentalMarks = xmlToAccidentalMark(ch);\n            ret.accidentalMarks = (ret.accidentalMarks || []).concat(dataAccidentalMarks);\n        }\n        if (ch.nodeName === \"trill-mark\") {\n            var dataTrillMark = xmlToTrillMark(ch);\n            ret.trillMark = dataTrillMark;\n        }\n        if (ch.nodeName === \"mordent\") {\n            var dataMordent = xmlToMordent(ch);\n            ret.mordent = dataMordent;\n        }\n        if (ch.nodeName === \"inverted-mordent\") {\n            var dataInvertedMordent = xmlToInvertedMordent(ch);\n            ret.invertedMordent = dataInvertedMordent;\n        }\n        if (ch.nodeName === \"schleifer\") {\n            var dataSchleifer = xmlToSchleifer(ch);\n            ret.schleifer = dataSchleifer;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToTrillMark(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToTurn(node) {\n    var ret = {};\n    var foundSlash = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"slash\") {\n            var dataSlash = xmlToYesNo(ch2);\n            ret.slash = dataSlash;\n            foundSlash = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundSlash) {\n        ret.slash = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToDelayedTurn(node) {\n    var ret = {};\n    var foundSlash = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"slash\") {\n            var dataSlash = xmlToYesNo(ch2);\n            ret.slash = dataSlash;\n            foundSlash = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundSlash) {\n        ret.slash = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToInvertedTurn(node) {\n    var ret = {};\n    var foundSlash = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"slash\") {\n            var dataSlash = xmlToYesNo(ch2);\n            ret.slash = dataSlash;\n            foundSlash = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundSlash) {\n        ret.slash = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToDelayedInvertedTurn(node) {\n    var ret = {};\n    var foundSlash = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"slash\") {\n            var dataSlash = xmlToYesNo(ch2);\n            ret.slash = dataSlash;\n            foundSlash = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundSlash) {\n        ret.slash = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToVerticalTurn(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToShake(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToMordent(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"long\") {\n            var dataLong = xmlToYesNo(ch2);\n            ret.long = dataLong;\n        }\n        if (ch2.name === \"approach\") {\n            var dataApproach = getAboveBelow(ch2, null);\n            ret.approach = dataApproach;\n        }\n        if (ch2.name === \"departure\") {\n            var dataDeparture = getAboveBelow(ch2, null);\n            ret.departure = dataDeparture;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToInvertedMordent(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundStartNote = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundTrillStep = false;\n    var foundTwoNoteTurn = false;\n    var foundSecondBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"long\") {\n            var dataLong = xmlToYesNo(ch2);\n            ret.long = dataLong;\n        }\n        if (ch2.name === \"approach\") {\n            var dataApproach = getAboveBelow(ch2, null);\n            ret.approach = dataApproach;\n        }\n        if (ch2.name === \"departure\") {\n            var dataDeparture = getAboveBelow(ch2, null);\n            ret.departure = dataDeparture;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"start-note\") {\n            var dataStartNote = getUpperMainBelow(ch2, UpperMainBelow.Upper);\n            ret.startNote = dataStartNote;\n            foundStartNote = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"trill-step\") {\n            var dataTrillStep = getWholeHalfUnison(ch2, WholeHalfUnison.Whole);\n            ret.trillStep = dataTrillStep;\n            foundTrillStep = true;\n        }\n        if (ch2.name === \"two-note-turn\") {\n            var dataTwoNoteTurn = getWholeHalfNone(ch2, WholeHalfNone.None);\n            ret.twoNoteTurn = dataTwoNoteTurn;\n            foundTwoNoteTurn = true;\n        }\n        if (ch2.name === \"second-beat\") {\n            var dataSecondBeat = getNumber(ch2, true);\n            ret.secondBeat = dataSecondBeat;\n            foundSecondBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundStartNote) {\n        ret.startNote = UpperMainBelow.Upper;\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundTrillStep) {\n        ret.trillStep = WholeHalfUnison.Whole;\n    }\n    if (!foundTwoNoteTurn) {\n        ret.twoNoteTurn = WholeHalfNone.None;\n    }\n    if (!foundSecondBeat) {\n        ret.secondBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToSchleifer(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToTremolo(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopSingle(ch2, StartStopSingle.Single);\n            ret.type = dataType;\n            foundType = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundType) {\n        ret.type = StartStopSingle.Single;\n    }\n    return ret;\n}\nfunction xmlToOtherOrnament(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopSingle(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToAccidentalMark(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataMark = getString(ch3, true);\n    ret.mark = dataMark;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToTechnical(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"triple-tongue\") {\n            var dataTripleTongue = xmlToTripleTongue(ch);\n            ret.tripleTongue = dataTripleTongue;\n        }\n        if (ch.nodeName === \"toe\") {\n            var dataToe = xmlToToe(ch);\n            ret.toe = dataToe;\n        }\n        if (ch.nodeName === \"hole\") {\n            var dataHole = xmlToHole(ch);\n            ret.hole = dataHole;\n        }\n        if (ch.nodeName === \"hammer-on\") {\n            var dataHammerOn = xmlToHammerOn(ch);\n            ret.hammerOn = dataHammerOn;\n        }\n        if (ch.nodeName === \"up-bow\") {\n            var dataUpBow = xmlToUpBow(ch);\n            ret.upBow = dataUpBow;\n        }\n        if (ch.nodeName === \"down-bow\") {\n            var dataDownBow = xmlToDownBow(ch);\n            ret.downBow = dataDownBow;\n        }\n        if (ch.nodeName === \"fret\") {\n            var dataFret = xmlToFret(ch);\n            ret.fret = dataFret;\n        }\n        if (ch.nodeName === \"tap\") {\n            var dataTap = xmlToTap(ch);\n            ret.tap = dataTap;\n        }\n        if (ch.nodeName === \"pull-off\") {\n            var dataPullOff = xmlToPullOff(ch);\n            ret.pullOff = dataPullOff;\n        }\n        if (ch.nodeName === \"handbell\") {\n            var dataHandbell = xmlToHandbell(ch);\n            ret.handbell = dataHandbell;\n        }\n        if (ch.nodeName === \"bend\") {\n            var dataBend = xmlToBend(ch);\n            ret.bend = dataBend;\n        }\n        if (ch.nodeName === \"thumb-position\") {\n            var dataThumbPosition = xmlToThumbPosition(ch);\n            ret.thumbPosition = dataThumbPosition;\n        }\n        if (ch.nodeName === \"stopped\") {\n            var dataStopped = xmlToStopped(ch);\n            ret.stopped = dataStopped;\n        }\n        if (ch.nodeName === \"pluck\") {\n            var dataPluck = xmlToPluck(ch);\n            ret.pluck = dataPluck;\n        }\n        if (ch.nodeName === \"double-tongue\") {\n            var dataDoubleTongue = xmlToDoubleTongue(ch);\n            ret.doubleTongue = dataDoubleTongue;\n        }\n        if (ch.nodeName === \"string\") {\n            var dataString = xmlToString(ch);\n            ret.string = dataString;\n        }\n        if (ch.nodeName === \"open-string\") {\n            var dataOpenString = xmlToOpenString(ch);\n            ret.openString = dataOpenString;\n        }\n        if (ch.nodeName === \"fingernails\") {\n            var dataFingernails = xmlToFingernails(ch);\n            ret.fingernails = dataFingernails;\n        }\n        if (ch.nodeName === \"arrow\") {\n            var dataArrow = xmlToArrow(ch);\n            ret.arrow = dataArrow;\n        }\n        if (ch.nodeName === \"harmonic\") {\n            var dataHarmonic = xmlToHarmonic(ch);\n            ret.harmonic = dataHarmonic;\n        }\n        if (ch.nodeName === \"heel\") {\n            var dataHeel = xmlToHeel(ch);\n            ret.heel = dataHeel;\n        }\n        if (ch.nodeName === \"other-technical\") {\n            var dataOtherTechnical = xmlToOtherTechnical(ch);\n            ret.otherTechnical = dataOtherTechnical;\n        }\n        if (ch.nodeName === \"snap-pizzicato\") {\n            var dataSnapPizzicato = xmlToSnapPizzicato(ch);\n            ret.snapPizzicato = dataSnapPizzicato;\n        }\n        if (ch.nodeName === \"fingering\") {\n            var dataFingering = xmlToFingering(ch);\n            ret.fingering = dataFingering;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToUpBow(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDownBow(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToHarmonic(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"artificial\") {\n            var dataArtificial = true;\n            ret.artificial = dataArtificial;\n        }\n        if (ch.nodeName === \"touching-pitch\") {\n            var dataTouchingPitch = true;\n            ret.touchingPitch = dataTouchingPitch;\n        }\n        if (ch.nodeName === \"sounding-pitch\") {\n            var dataSoundingPitch = true;\n            ret.soundingPitch = dataSoundingPitch;\n        }\n        if (ch.nodeName === \"natural\") {\n            var dataNatural = true;\n            ret.natural = dataNatural;\n        }\n        if (ch.nodeName === \"base-pitch\") {\n            var dataBasePitch = true;\n            ret.basePitch = dataBasePitch;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToOpenString(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToThumbPosition(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToPluck(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDoubleTongue(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToTripleTongue(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToStopped(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToSnapPizzicato(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToHammerOn(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToPullOff(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToBend(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundAccelerate = false;\n    var foundBeats = false;\n    var foundLastBeat = false;\n    var foundFirstBeat = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"bend-alter\") {\n            var dataBendAlter = getString(ch, true);\n            ret.bendAlter = dataBendAlter;\n        }\n        if (ch.nodeName === \"with-bar\") {\n            var dataWithBar = xmlToWithBar(ch);\n            ret.withBar = dataWithBar;\n        }\n        if (ch.nodeName === \"pre-bend\") {\n            var dataPreBend = true;\n            ret.preBend = dataPreBend;\n        }\n        if (ch.nodeName === \"release\") {\n            var dataRelease = true;\n            ret.release = dataRelease;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"accelerate\") {\n            var dataAccelerate = xmlToYesNo(ch2);\n            ret.accelerate = dataAccelerate;\n            foundAccelerate = true;\n        }\n        if (ch2.name === \"beats\") {\n            var dataBeats = getNumber(ch2, true);\n            ret.beats = dataBeats;\n            foundBeats = true;\n        }\n        if (ch2.name === \"last-beat\") {\n            var dataLastBeat = getNumber(ch2, true);\n            ret.lastBeat = dataLastBeat;\n            foundLastBeat = true;\n        }\n        if (ch2.name === \"first-beat\") {\n            var dataFirstBeat = getNumber(ch2, true);\n            ret.firstBeat = dataFirstBeat;\n            foundFirstBeat = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundAccelerate) {\n        ret.accelerate = false;\n    }\n    if (!foundBeats) {\n        ret.beats = 4;\n    }\n    if (!foundLastBeat) {\n        ret.lastBeat = 75;\n    }\n    if (!foundFirstBeat) {\n        ret.firstBeat = 25;\n    }\n    return ret;\n}\nfunction xmlToWithBar(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToTap(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToHeel(node) {\n    var ret = {};\n    var foundSubstitution = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"substitution\") {\n            var dataSubstitution = xmlToYesNo(ch2);\n            ret.substitution = dataSubstitution;\n            foundSubstitution = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundSubstitution) {\n        ret.substitution = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToToe(node) {\n    var ret = {};\n    var foundSubstitution = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"substitution\") {\n            var dataSubstitution = xmlToYesNo(ch2);\n            ret.substitution = dataSubstitution;\n            foundSubstitution = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundSubstitution) {\n        ret.substitution = false;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToFingernails(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToHole(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"hole-closed\") {\n            var dataHoleClosed = xmlToHoleClosed(ch);\n            ret.holeClosed = dataHoleClosed;\n        }\n        if (ch.nodeName === \"hole-shape\") {\n            var dataHoleShape = getString(ch, true);\n            ret.holeShape = dataHoleShape;\n        }\n        if (ch.nodeName === \"hole-type\") {\n            var dataHoleType = getString(ch, true);\n            ret.holeType = dataHoleType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\n(function (HoleLocation) {\n    HoleLocation[HoleLocation[\"Right\"] = 0] = \"Right\";\n    HoleLocation[HoleLocation[\"Top\"] = 3] = \"Top\";\n    HoleLocation[HoleLocation[\"Bottom\"] = 1] = \"Bottom\";\n    HoleLocation[HoleLocation[\"Left\"] = 2] = \"Left\";\n})(exports.HoleLocation || (exports.HoleLocation = {}));\nvar HoleLocation = exports.HoleLocation;\nfunction getHoleLocation(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return HoleLocation.Right;\n    }\n    if (s == \"top\") {\n        return HoleLocation.Top;\n    }\n    if (s == \"bottom\") {\n        return HoleLocation.Bottom;\n    }\n    if (s == \"left\") {\n        return HoleLocation.Left;\n    }\n    return fallbackVal;\n}\n(function (HoleClosedType) {\n    HoleClosedType[HoleClosedType[\"No\"] = 1] = \"No\";\n    HoleClosedType[HoleClosedType[\"Yes\"] = 0] = \"Yes\";\n    HoleClosedType[HoleClosedType[\"Half\"] = 2] = \"Half\";\n})(exports.HoleClosedType || (exports.HoleClosedType = {}));\nvar HoleClosedType = exports.HoleClosedType;\nfunction getHoleClosedType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"no\") {\n        return HoleClosedType.No;\n    }\n    if (s == \"yes\") {\n        return HoleClosedType.Yes;\n    }\n    if (s == \"half\") {\n        return HoleClosedType.Half;\n    }\n    return fallbackVal;\n}\nfunction xmlToHoleClosed(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"location\") {\n            var dataLocation = getHoleLocation(ch2, null);\n            ret.location = dataLocation;\n        }\n    }\n    var ch3 = node;\n    var dataData = getHoleClosedType(ch3, null);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToArrow(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"arrow-style\") {\n            var dataArrowStyle = getString(ch, true);\n            ret.arrowStyle = dataArrowStyle;\n        }\n        if (ch.nodeName === \"arrow-direction\") {\n            var dataArrowDirection = getString(ch, true);\n            ret.arrowDirection = dataArrowDirection;\n        }\n        if (ch.nodeName === \"circular-arrow\") {\n            var dataCircularArrow = getString(ch, true);\n            ret.circularArrow = dataCircularArrow;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToHandbell(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToOtherTechnical(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToArticulations(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"accent\") {\n            var dataAccent = xmlToAccent(ch);\n            ret.accent = dataAccent;\n        }\n        if (ch.nodeName === \"doit\") {\n            var dataDoit = xmlToDoit(ch);\n            ret.doit = dataDoit;\n        }\n        if (ch.nodeName === \"breath-mark\") {\n            var dataBreathMark = xmlToBreathMark(ch);\n            ret.breathMark = dataBreathMark;\n        }\n        if (ch.nodeName === \"other-articulation\") {\n            var dataOtherArticulations = xmlToOtherArticulation(ch);\n            ret.otherArticulations = (ret.otherArticulations || []).concat(dataOtherArticulations);\n        }\n        if (ch.nodeName === \"detached-legato\") {\n            var dataDetachedLegato = xmlToDetachedLegato(ch);\n            ret.detachedLegato = dataDetachedLegato;\n        }\n        if (ch.nodeName === \"staccatissimo\") {\n            var dataStaccatissimo = xmlToStaccatissimo(ch);\n            ret.staccatissimo = dataStaccatissimo;\n        }\n        if (ch.nodeName === \"plop\") {\n            var dataPlop = xmlToPlop(ch);\n            ret.plop = dataPlop;\n        }\n        if (ch.nodeName === \"unstress\") {\n            var dataUnstress = xmlToUnstress(ch);\n            ret.unstress = dataUnstress;\n        }\n        if (ch.nodeName === \"strong-accent\") {\n            var dataStrongAccent = xmlToStrongAccent(ch);\n            ret.strongAccent = dataStrongAccent;\n        }\n        if (ch.nodeName === \"staccato\") {\n            var dataStaccato = xmlToStaccato(ch);\n            ret.staccato = dataStaccato;\n        }\n        if (ch.nodeName === \"spiccato\") {\n            var dataSpiccato = xmlToSpiccato(ch);\n            ret.spiccato = dataSpiccato;\n        }\n        if (ch.nodeName === \"scoop\") {\n            var dataScoop = xmlToScoop(ch);\n            ret.scoop = dataScoop;\n        }\n        if (ch.nodeName === \"falloff\") {\n            var dataFalloff = xmlToFalloff(ch);\n            ret.falloff = dataFalloff;\n        }\n        if (ch.nodeName === \"caesura\") {\n            var dataCaesura = xmlToCaesura(ch);\n            ret.caesura = dataCaesura;\n        }\n        if (ch.nodeName === \"stress\") {\n            var dataStress = xmlToStress(ch);\n            ret.stress = dataStress;\n        }\n        if (ch.nodeName === \"tenuto\") {\n            var dataTenuto = xmlToTenuto(ch);\n            ret.tenuto = dataTenuto;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToAccent(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToStrongAccent(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    var foundType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getUpDown(ch2, UpDown.Up);\n            ret.type = dataType;\n            foundType = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundType) {\n        ret.type = UpDown.Up;\n    }\n    return ret;\n}\nfunction xmlToStaccato(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToTenuto(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDetachedLegato(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToStaccatissimo(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToSpiccato(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToScoop(node) {\n    var ret = {};\n    var foundLineShape = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToPlop(node) {\n    var ret = {};\n    var foundLineShape = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToDoit(node) {\n    var ret = {};\n    var foundLineShape = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToFalloff(node) {\n    var ret = {};\n    var foundLineShape = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\n(function (BreathMarkType) {\n    BreathMarkType[BreathMarkType[\"Empty\"] = 2] = \"Empty\";\n    BreathMarkType[BreathMarkType[\"Comma\"] = 0] = \"Comma\";\n    BreathMarkType[BreathMarkType[\"Tick\"] = 1] = \"Tick\";\n})(exports.BreathMarkType || (exports.BreathMarkType = {}));\nvar BreathMarkType = exports.BreathMarkType;\nfunction getBreathMarkType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"\") {\n        return BreathMarkType.Empty;\n    }\n    if (s == \"comma\") {\n        return BreathMarkType.Comma;\n    }\n    if (s == \"tick\") {\n        return BreathMarkType.Tick;\n    }\n    return fallbackVal;\n}\nfunction xmlToBreathMark(node) {\n    var ret = {};\n    var foundLineShape = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line-shape\") {\n            var dataLineShape = getStraightCurved(ch2, StraightCurved.Straight);\n            ret.lineShape = dataLineShape;\n            foundLineShape = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataType = getBreathMarkType(ch3, null);\n    ret.type = dataType;\n    if (!foundLineShape) {\n        ret.lineShape = StraightCurved.Straight;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToCaesura(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToStress(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToUnstress(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToOtherArticulation(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    return ret;\n}\nfunction xmlToArpeggiate(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundPlacement = false;\n    var foundColor = false;\n    var foundDirection = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"direction\") {\n            var dataDirection = getUpDown(ch2, UpDown.Up);\n            ret.direction = dataDirection;\n            foundDirection = true;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundDirection) {\n        ret.direction = UpDown.Up;\n    }\n    return ret;\n}\nfunction xmlToNonArpeggiate(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundPlacement = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getTopBottom(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToLaughing(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"Laughing\";\n    return ret;\n}\nfunction xmlToHumming(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"Humming\";\n    return ret;\n}\nfunction xmlToEndLine(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"EndLine\";\n    return ret;\n}\nfunction xmlToEndParagraph(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"EndParagraph\";\n    return ret;\n}\nfunction xmlToLyricParts(node) {\n    var rarr = [];\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"extend\") {\n            var data = xmlToExtend(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"end-line\") {\n            var data = xmlToEndLine(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"syllabic\") {\n            var data = xmlToSyllabic(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"text\") {\n            var data = xmlToText(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"laughing\") {\n            var data = xmlToLaughing(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"humming\") {\n            var data = xmlToHumming(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"end-paragraph\") {\n            var data = xmlToEndParagraph(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"elision\") {\n            var data = xmlToElision(ch);\n            rarr = (rarr || []).concat(data);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return rarr;\n}\nfunction xmlToText(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundDir = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    ret._class = \"Text\";\n    return ret;\n}\n(function (SyllabicType) {\n    SyllabicType[SyllabicType[\"Single\"] = 0] = \"Single\";\n    SyllabicType[SyllabicType[\"Begin\"] = 1] = \"Begin\";\n    SyllabicType[SyllabicType[\"Middle\"] = 3] = \"Middle\";\n    SyllabicType[SyllabicType[\"End\"] = 2] = \"End\";\n})(exports.SyllabicType || (exports.SyllabicType = {}));\nvar SyllabicType = exports.SyllabicType;\nfunction getSyllabicType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"single\") {\n        return SyllabicType.Single;\n    }\n    if (s == \"begin\") {\n        return SyllabicType.Begin;\n    }\n    if (s == \"middle\") {\n        return SyllabicType.Middle;\n    }\n    if (s == \"end\") {\n        return SyllabicType.End;\n    }\n    return fallbackVal;\n}\nfunction xmlToSyllabic(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getSyllabicType(ch3, null);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    ret._class = \"Syllabic\";\n    return ret;\n}\nfunction xmlToElision(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    ret._class = \"Elision\";\n    return ret;\n}\nfunction xmlToExtend(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundType = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, StartStopContinue.Start);\n            ret.type = dataType;\n            foundType = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundType) {\n        ret.type = StartStopContinue.Start;\n    }\n    ret._class = \"Extend\";\n    return ret;\n}\nfunction xmlToFiguredBass(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundPrintSpacing = false;\n    var foundParentheses = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"figure\") {\n            var dataFigures = xmlToFigure(ch);\n            ret.figures = (ret.figures || []).concat(dataFigures);\n        }\n        if (ch.nodeName === \"duration\") {\n            var dataDuration = getNumber(ch, true);\n            ret.duration = dataDuration;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-dot\") {\n            var dataPrintDot = xmlToYesNo(ch2);\n            ret.printDot = dataPrintDot;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"print-spacing\") {\n            var dataPrintSpacing = xmlToYesNo(ch2);\n            ret.printSpacing = dataPrintSpacing;\n            foundPrintSpacing = true;\n        }\n        if (ch2.name === \"print-lyric\") {\n            var dataPrintLyric = xmlToYesNo(ch2);\n            ret.printLyric = dataPrintLyric;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n            foundParentheses = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundPrintSpacing) {\n        ret.printSpacing = true;\n    }\n    if (!foundParentheses) {\n        ret.parentheses = false;\n    }\n    ret._class = \"FiguredBass\";\n    return ret;\n}\nfunction xmlToFigure(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"prefix\") {\n            var dataPrefix = xmlToPrefix(ch);\n            ret.prefix = dataPrefix;\n        }\n        if (ch.nodeName === \"figure-number\") {\n            var dataFigureNumber = xmlToFigureNumber(ch);\n            ret.figureNumber = dataFigureNumber;\n        }\n        if (ch.nodeName === \"extend\") {\n            var dataExtend = xmlToExtend(ch);\n            ret.extend = dataExtend;\n        }\n        if (ch.nodeName === \"suffix\") {\n            var dataSuffix = xmlToSuffix(ch);\n            ret.suffix = dataSuffix;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToPrefix(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToFigureNumber(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToSuffix(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToBackup(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"duration\") {\n            var dataDuration = getNumber(ch, true);\n            ret.duration = dataDuration;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"Backup\";\n    return ret;\n}\nfunction xmlToForward(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"voice\") {\n            var dataVoice = getNumber(ch, true);\n            ret.voice = dataVoice;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"duration\") {\n            var dataDuration = getNumber(ch, true);\n            ret.duration = dataDuration;\n        }\n        if (ch.nodeName === \"staff\") {\n            var dataStaff = getNumber(ch, true);\n            ret.staff = dataStaff;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    ret._class = \"Forward\";\n    return ret;\n}\n(function (BarlineLocation) {\n    BarlineLocation[BarlineLocation[\"Right\"] = 1] = \"Right\";\n    BarlineLocation[BarlineLocation[\"Middle\"] = 2] = \"Middle\";\n    BarlineLocation[BarlineLocation[\"Left\"] = 0] = \"Left\";\n})(exports.BarlineLocation || (exports.BarlineLocation = {}));\nvar BarlineLocation = exports.BarlineLocation;\nfunction getBarlineLocation(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return BarlineLocation.Right;\n    }\n    if (s == \"middle\") {\n        return BarlineLocation.Middle;\n    }\n    if (s == \"left\") {\n        return BarlineLocation.Left;\n    }\n    return fallbackVal;\n}\nfunction xmlToBarline(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"segno\") {\n            var dataSegno = xmlToSegno(ch);\n            ret.segno = dataSegno;\n        }\n        if (ch.nodeName === \"coda\") {\n            var dataCoda = xmlToCoda(ch);\n            ret.coda = dataCoda;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"wavy-line\") {\n            var dataWavyLine = xmlToWavyLine(ch);\n            ret.wavyLine = dataWavyLine;\n        }\n        if (ch.nodeName === \"fermata\") {\n            var dataFermatas = xmlToFermata(ch);\n            ret.fermatas = (ret.fermatas || []).concat(dataFermatas);\n        }\n        if (ch.nodeName === \"bar-style\") {\n            var dataBarStyle = xmlToBarStyle(ch);\n            ret.barStyle = dataBarStyle;\n        }\n        if (ch.nodeName === \"ending\") {\n            var dataEnding = xmlToEnding(ch);\n            ret.ending = dataEnding;\n        }\n        if (ch.nodeName === \"repeat\") {\n            var dataRepeat = xmlToRepeat(ch);\n            ret.repeat = dataRepeat;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"location\") {\n            var dataLocation = getBarlineLocation(ch2, null);\n            ret.location = dataLocation;\n        }\n        if (ch2.name === \"coda\") {\n            var dataCodaAttrib = getString(ch2, true);\n            ret.codaAttrib = dataCodaAttrib;\n        }\n        if (ch2.name === \"segno\") {\n            var dataSegnoAttrib = getString(ch2, true);\n            ret.segnoAttrib = dataSegnoAttrib;\n        }\n        if (ch2.name === \"divisions\") {\n            var dataDivisions = getNumber(ch2, true);\n            ret.divisions = dataDivisions;\n        }\n    }\n    ret._class = \"Barline\";\n    return ret;\n}\n/**\n * Bar-style contains style information. Choices are\n * regular, dotted, dashed, heavy, light-light,\n * light-heavy, heavy-light, heavy-heavy, tick (a\n * short stroke through the top line), short (a partial\n * barline between the 2nd and 4th lines), and none.\n */\n(function (BarStyleType) {\n    BarStyleType[BarStyleType[\"Regular\"] = 0] = \"Regular\";\n    BarStyleType[BarStyleType[\"LightHeavy\"] = 5] = \"LightHeavy\";\n    BarStyleType[BarStyleType[\"HeavyLight\"] = 6] = \"HeavyLight\";\n    BarStyleType[BarStyleType[\"Short\"] = 9] = \"Short\";\n    BarStyleType[BarStyleType[\"None\"] = 10] = \"None\";\n    BarStyleType[BarStyleType[\"Dashed\"] = 2] = \"Dashed\";\n    BarStyleType[BarStyleType[\"HeavyHeavy\"] = 7] = \"HeavyHeavy\";\n    BarStyleType[BarStyleType[\"Tick\"] = 8] = \"Tick\";\n    BarStyleType[BarStyleType[\"Dotted\"] = 1] = \"Dotted\";\n    BarStyleType[BarStyleType[\"Heavy\"] = 3] = \"Heavy\";\n    BarStyleType[BarStyleType[\"LightLight\"] = 4] = \"LightLight\";\n})(exports.BarStyleType || (exports.BarStyleType = {}));\nvar BarStyleType = exports.BarStyleType;\nfunction getBarStyleType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"regular\") {\n        return BarStyleType.Regular;\n    }\n    if (s == \"light-heavy\") {\n        return BarStyleType.LightHeavy;\n    }\n    if (s == \"heavy-light\") {\n        return BarStyleType.HeavyLight;\n    }\n    if (s == \"short\") {\n        return BarStyleType.Short;\n    }\n    if (s == \"none\") {\n        return BarStyleType.None;\n    }\n    if (s == \"dashed\") {\n        return BarStyleType.Dashed;\n    }\n    if (s == \"heavy-heavy\") {\n        return BarStyleType.HeavyHeavy;\n    }\n    if (s == \"tick\") {\n        return BarStyleType.Tick;\n    }\n    if (s == \"dotted\") {\n        return BarStyleType.Dotted;\n    }\n    if (s == \"heavy\") {\n        return BarStyleType.Heavy;\n    }\n    if (s == \"light-light\") {\n        return BarStyleType.LightLight;\n    }\n    return fallbackVal;\n}\nfunction xmlToBarStyle(node) {\n    var ret = {};\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getBarStyleType(ch3, null);\n    ret.data = dataData;\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (StartStopDiscontinue) {\n    StartStopDiscontinue[StartStopDiscontinue[\"Discontinue\"] = 2] = \"Discontinue\";\n    StartStopDiscontinue[StartStopDiscontinue[\"Start\"] = 0] = \"Start\";\n    StartStopDiscontinue[StartStopDiscontinue[\"Stop\"] = 1] = \"Stop\";\n})(exports.StartStopDiscontinue || (exports.StartStopDiscontinue = {}));\nvar StartStopDiscontinue = exports.StartStopDiscontinue;\nfunction getStartStopDiscontinue(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"discontinue\") {\n        return StartStopDiscontinue.Discontinue;\n    }\n    if (s == \"start\") {\n        return StartStopDiscontinue.Start;\n    }\n    if (s == \"stop\") {\n        return StartStopDiscontinue.Stop;\n    }\n    return fallbackVal;\n}\nfunction xmlToEnding(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"end-length\") {\n            var dataEndLength = getNumber(ch2, true);\n            ret.endLength = dataEndLength;\n        }\n        if (ch2.name === \"text-x\") {\n            var dataTextX = getNumber(ch2, true);\n            ret.textX = dataTextX;\n        }\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"text-y\") {\n            var dataTextY = getNumber(ch2, true);\n            ret.textY = dataTextY;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopDiscontinue(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataEnding = getString(ch3, false);\n    ret.ending = dataEnding;\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (WingedType) {\n    WingedType[WingedType[\"None\"] = 0] = \"None\";\n    WingedType[WingedType[\"Curved\"] = 2] = \"Curved\";\n    WingedType[WingedType[\"DoubleCurved\"] = 4] = \"DoubleCurved\";\n    WingedType[WingedType[\"Straight\"] = 1] = \"Straight\";\n    WingedType[WingedType[\"DoubleStraight\"] = 3] = \"DoubleStraight\";\n})(exports.WingedType || (exports.WingedType = {}));\nvar WingedType = exports.WingedType;\nfunction getWingedType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return WingedType.None;\n    }\n    if (s == \"curved\") {\n        return WingedType.Curved;\n    }\n    if (s == \"double-curved\") {\n        return WingedType.DoubleCurved;\n    }\n    if (s == \"straight\") {\n        return WingedType.Straight;\n    }\n    if (s == \"double-straight\") {\n        return WingedType.DoubleStraight;\n    }\n    return fallbackVal;\n}\n(function (DirectionTypeBg) {\n    DirectionTypeBg[DirectionTypeBg[\"Forward\"] = 1] = \"Forward\";\n    DirectionTypeBg[DirectionTypeBg[\"Backward\"] = 0] = \"Backward\";\n})(exports.DirectionTypeBg || (exports.DirectionTypeBg = {}));\nvar DirectionTypeBg = exports.DirectionTypeBg;\nfunction getDirectionTypeBg(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"forward\") {\n        return DirectionTypeBg.Forward;\n    }\n    if (s == \"backward\") {\n        return DirectionTypeBg.Backward;\n    }\n    return fallbackVal;\n}\nfunction xmlToRepeat(node) {\n    var ret = {};\n    var foundWinged = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"times\") {\n            var dataTimes = getString(ch2, true);\n            ret.times = dataTimes;\n        }\n        if (ch2.name === \"winged\") {\n            var dataWinged = getWingedType(ch2, WingedType.None);\n            ret.winged = dataWinged;\n            foundWinged = true;\n        }\n        if (ch2.name === \"direction\") {\n            var dataDirection = getDirectionTypeBg(ch2, null);\n            ret.direction = dataDirection;\n        }\n    }\n    if (!foundWinged) {\n        ret.winged = WingedType.None;\n    }\n    return ret;\n}\n/**\n * The tip-direction entity represents the direction in which\n * the tip of a stick or beater points, using Unicode arrow\n * terminology.\n */\n(function (TipDirection) {\n    TipDirection[TipDirection[\"Right\"] = 3] = \"Right\";\n    TipDirection[TipDirection[\"Northwest\"] = 4] = \"Northwest\";\n    TipDirection[TipDirection[\"Southwest\"] = 7] = \"Southwest\";\n    TipDirection[TipDirection[\"Down\"] = 1] = \"Down\";\n    TipDirection[TipDirection[\"Northeast\"] = 5] = \"Northeast\";\n    TipDirection[TipDirection[\"Southeast\"] = 6] = \"Southeast\";\n    TipDirection[TipDirection[\"Up\"] = 0] = \"Up\";\n    TipDirection[TipDirection[\"Left\"] = 2] = \"Left\";\n})(exports.TipDirection || (exports.TipDirection = {}));\nvar TipDirection = exports.TipDirection;\nfunction getTipDirection(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"right\") {\n        return TipDirection.Right;\n    }\n    if (s == \"northwest\") {\n        return TipDirection.Northwest;\n    }\n    if (s == \"southwest\") {\n        return TipDirection.Southwest;\n    }\n    if (s == \"down\") {\n        return TipDirection.Down;\n    }\n    if (s == \"northeast\") {\n        return TipDirection.Northeast;\n    }\n    if (s == \"southeast\") {\n        return TipDirection.Southeast;\n    }\n    if (s == \"up\") {\n        return TipDirection.Up;\n    }\n    if (s == \"left\") {\n        return TipDirection.Left;\n    }\n    return fallbackVal;\n}\nfunction xmlToDirection(node) {\n    var ret = {};\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"voice\") {\n            var dataVoice = getNumber(ch, true);\n            ret.voice = dataVoice;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"direction-type\") {\n            var dataDirectionTypes = xmlToDirectionType(ch);\n            ret.directionTypes = (ret.directionTypes || []).concat(dataDirectionTypes);\n        }\n        if (ch.nodeName === \"staff\") {\n            var dataStaff = getNumber(ch, true);\n            ret.staff = dataStaff;\n        }\n        if (ch.nodeName === \"offset\") {\n            var dataOffset = xmlToOffset(ch);\n            ret.offset = dataOffset;\n        }\n        if (ch.nodeName === \"sound\") {\n            var dataSound = xmlToSound(ch);\n            ret.sound = dataSound;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"directive\") {\n            var dataDirective = xmlToYesNo(ch2);\n            ret.directive = dataDirective;\n        }\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    ret._class = \"Direction\";\n    return ret;\n}\nfunction xmlToDirectionType(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"percussion\") {\n            var dataPercussions = xmlToPercussion(ch);\n            ret.percussions = (ret.percussions || []).concat(dataPercussions);\n        }\n        if (ch.nodeName === \"rehearsal\") {\n            var dataRehearsals = xmlToRehearsal(ch);\n            ret.rehearsals = (ret.rehearsals || []).concat(dataRehearsals);\n        }\n        if (ch.nodeName === \"pedal\") {\n            var dataPedal = xmlToPedal(ch);\n            ret.pedal = dataPedal;\n        }\n        if (ch.nodeName === \"principal-voice\") {\n            var dataPrincipalVoice = xmlToPrincipalVoice(ch);\n            ret.principalVoice = dataPrincipalVoice;\n        }\n        if (ch.nodeName === \"accordion-registration\") {\n            var dataAccordionRegistration = xmlToAccordionRegistration(ch);\n            ret.accordionRegistration = dataAccordionRegistration;\n        }\n        if (ch.nodeName === \"eyeglasses\") {\n            var dataEyeglasses = xmlToEyeglasses(ch);\n            ret.eyeglasses = dataEyeglasses;\n        }\n        if (ch.nodeName === \"image\") {\n            var dataImage = xmlToImage(ch);\n            ret.image = dataImage;\n        }\n        if (ch.nodeName === \"harp-pedals\") {\n            var dataHarpPedals = xmlToHarpPedals(ch);\n            ret.harpPedals = dataHarpPedals;\n        }\n        if (ch.nodeName === \"metronome\") {\n            var dataMetronome = xmlToMetronome(ch);\n            ret.metronome = dataMetronome;\n        }\n        if (ch.nodeName === \"other-direction\") {\n            var dataOtherDirection = xmlToOtherDirection(ch);\n            ret.otherDirection = dataOtherDirection;\n        }\n        if (ch.nodeName === \"segno\") {\n            var dataSegnos = xmlToSegno(ch);\n            ret.segnos = (ret.segnos || []).concat(dataSegnos);\n        }\n        if (ch.nodeName === \"scordatura\") {\n            var dataScordatura = xmlToScordatura(ch);\n            ret.scordatura = dataScordatura;\n        }\n        if (ch.nodeName === \"string-mute\") {\n            var dataStringMute = xmlToStringMute(ch);\n            ret.stringMute = dataStringMute;\n        }\n        if (ch.nodeName === \"wedge\") {\n            var dataWedge = xmlToWedge(ch);\n            ret.wedge = dataWedge;\n        }\n        if (ch.nodeName === \"dashes\") {\n            var dataDashes = xmlToDashes(ch);\n            ret.dashes = dataDashes;\n        }\n        if (ch.nodeName === \"damp\") {\n            var dataDamp = xmlToDamp(ch);\n            ret.damp = dataDamp;\n        }\n        if (ch.nodeName === \"bracket\") {\n            var dataBracket = xmlToBracket(ch);\n            ret.bracket = dataBracket;\n        }\n        if (ch.nodeName === \"dynamics\") {\n            var dataDynamics = xmlToDynamics(ch);\n            ret.dynamics = dataDynamics;\n        }\n        if (ch.nodeName === \"octave-shift\") {\n            var dataOctaveShift = xmlToOctaveShift(ch);\n            ret.octaveShift = dataOctaveShift;\n        }\n        if (ch.nodeName === \"words\") {\n            var dataWords = xmlToWords(ch);\n            ret.words = (ret.words || []).concat(dataWords);\n        }\n        if (ch.nodeName === \"damp-all\") {\n            var dataDampAll = xmlToDampAll(ch);\n            ret.dampAll = dataDampAll;\n        }\n        if (ch.nodeName === \"coda\") {\n            var dataCodas = xmlToCoda(ch);\n            ret.codas = (ret.codas || []).concat(dataCodas);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToRehearsal(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToWords(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\n(function (WedgeType) {\n    WedgeType[WedgeType[\"Diminuendo\"] = 1] = \"Diminuendo\";\n    WedgeType[WedgeType[\"Crescendo\"] = 0] = \"Crescendo\";\n    WedgeType[WedgeType[\"Stop\"] = 2] = \"Stop\";\n    WedgeType[WedgeType[\"Continue\"] = 3] = \"Continue\";\n})(exports.WedgeType || (exports.WedgeType = {}));\nvar WedgeType = exports.WedgeType;\nfunction getWedgeType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"diminuendo\") {\n        return WedgeType.Diminuendo;\n    }\n    if (s == \"crescendo\") {\n        return WedgeType.Crescendo;\n    }\n    if (s == \"stop\") {\n        return WedgeType.Stop;\n    }\n    if (s == \"continue\") {\n        return WedgeType.Continue;\n    }\n    return fallbackVal;\n}\nfunction xmlToWedge(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundNiente = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"niente\") {\n            var dataNiente = xmlToYesNo(ch2);\n            ret.niente = dataNiente;\n            foundNiente = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getWedgeType(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"spread\") {\n            var dataSpread = getNumber(ch2, true);\n            ret.spread = dataSpread;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundNiente) {\n        ret.niente = false;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToDashes(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (LineEndType) {\n    LineEndType[LineEndType[\"None\"] = 4] = \"None\";\n    LineEndType[LineEndType[\"Both\"] = 2] = \"Both\";\n    LineEndType[LineEndType[\"Arrow\"] = 3] = \"Arrow\";\n    LineEndType[LineEndType[\"Down\"] = 1] = \"Down\";\n    LineEndType[LineEndType[\"Up\"] = 0] = \"Up\";\n})(exports.LineEndType || (exports.LineEndType = {}));\nvar LineEndType = exports.LineEndType;\nfunction getLineEndType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return LineEndType.None;\n    }\n    if (s == \"both\") {\n        return LineEndType.Both;\n    }\n    if (s == \"arrow\") {\n        return LineEndType.Arrow;\n    }\n    if (s == \"down\") {\n        return LineEndType.Down;\n    }\n    if (s == \"up\") {\n        return LineEndType.Up;\n    }\n    return fallbackVal;\n}\nfunction xmlToBracket(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    var foundLineType = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"end-length\") {\n            var dataEndLength = getNumber(ch2, true);\n            ret.endLength = dataEndLength;\n        }\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"line-type\") {\n            var dataLineType = getSolidDashedDottedWavy(ch2, SolidDashedDottedWavy.Solid);\n            ret.lineType = dataLineType;\n            foundLineType = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStopContinue(ch2, null);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"line-end\") {\n            var dataLineEnd = getLineEndType(ch2, null);\n            ret.lineEnd = dataLineEnd;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    if (!foundLineType) {\n        ret.lineType = SolidDashedDottedWavy.Solid;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\n(function (PedalType) {\n    PedalType[PedalType[\"Change\"] = 3] = \"Change\";\n    PedalType[PedalType[\"Start\"] = 0] = \"Start\";\n    PedalType[PedalType[\"Stop\"] = 1] = \"Stop\";\n    PedalType[PedalType[\"Continue\"] = 2] = \"Continue\";\n})(exports.PedalType || (exports.PedalType = {}));\nvar PedalType = exports.PedalType;\nfunction getPedalType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"change\") {\n        return PedalType.Change;\n    }\n    if (s == \"start\") {\n        return PedalType.Start;\n    }\n    if (s == \"stop\") {\n        return PedalType.Stop;\n    }\n    if (s == \"continue\") {\n        return PedalType.Continue;\n    }\n    return fallbackVal;\n}\nfunction xmlToPedal(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"line\") {\n            var dataLine = xmlToYesNo(ch2);\n            ret.line = dataLine;\n        }\n        if (ch2.name === \"sign\") {\n            var dataSign = xmlToYesNo(ch2);\n            ret.sign = dataSign;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getPedalType(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToMetronome(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundJustify = false;\n    var gotFirstPair = false;\n    var gotSecondPair = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"metronome-note\") {\n            var dataMetronomeNotes = xmlToMetronomeNote(ch);\n            ret.metronomeNotes = (ret.metronomeNotes || []).concat(dataMetronomeNotes);\n        }\n        if (ch.nodeName === \"per-minute\") {\n            var dataPerMinute = xmlToPerMinute(ch);\n            ret.perMinute = dataPerMinute;\n        }\n        if (ch.nodeName === \"beat-unit\") {\n            var dataBeatUnit = getString(ch, true);\n            if (!gotFirstPair) {\n                ret.beatUnit = dataBeatUnit;\n                gotFirstPair = true;\n            }\n            else if (!gotSecondPair) {\n                ret.beatUnitChange = dataBeatUnit;\n                gotSecondPair = true;\n            }\n            else {\n                throw \"Too many beat-units in metronome\";\n            }\n        }\n        if (ch.nodeName === \"beat-unit-dot\") {\n            var dataBeatUnitDots = xmlToBeatUnitDot(ch);\n            if (!gotSecondPair) {\n                ret.beatUnitDots = (ret.beatUnitDots || []).concat(dataBeatUnitDots);\n            }\n            else {\n                ret.beatUnitDotsChange = (ret.beatUnitDotsChange || []).concat(dataBeatUnitDots);\n            }\n        }\n        if (ch.nodeName === \"metronome-relation\") {\n            var dataMetronomeRelation = getString(ch, true);\n            ret.metronomeRelation = dataMetronomeRelation;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"parentheses\") {\n            var dataParentheses = xmlToYesNo(ch2);\n            ret.parentheses = dataParentheses;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToBeatUnitDot(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToPerMinute(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    return ret;\n}\nfunction xmlToMetronomeNote(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"metronome-dot\") {\n            var dataMetronomeDots = xmlToMetronomeDot(ch);\n            ret.metronomeDots = (ret.metronomeDots || []).concat(dataMetronomeDots);\n        }\n        if (ch.nodeName === \"metronome-beam\") {\n            var dataMetronomeBeams = xmlToMetronomeBeam(ch);\n            ret.metronomeBeams = (ret.metronomeBeams || []).concat(dataMetronomeBeams);\n        }\n        if (ch.nodeName === \"metronome-type\") {\n            var dataMetronomeType = getString(ch, true);\n            ret.metronomeType = dataMetronomeType;\n        }\n        if (ch.nodeName === \"metronome-tuplet\") {\n            var dataMetronomeTuplet = xmlToMetronomeTuplet(ch);\n            ret.metronomeTuplet = dataMetronomeTuplet;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToMetronomeDot(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToMetronomeBeam(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    return ret;\n}\nfunction xmlToMetronomeTuplet(node) {\n    var ret = {};\n    var foundBracket = false;\n    var foundShowNumber = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"actual-notes\") {\n            var dataActualNotes = getNumber(ch, true);\n            ret.actualNotes = dataActualNotes;\n        }\n        if (ch.nodeName === \"normal-type\") {\n            var dataNormalType = getString(ch, true);\n            ret.normalType = dataNormalType;\n        }\n        if (ch.nodeName === \"normal-notes\") {\n            var dataNormalNotes = getNumber(ch, true);\n            ret.normalNotes = dataNormalNotes;\n        }\n        if (ch.nodeName === \"normal-dot\") {\n            var dataNormalDots = xmlToNormalDot(ch);\n            ret.normalDots = (ret.normalDots || []).concat(dataNormalDots);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"bracket\") {\n            var dataBracket = xmlToYesNo(ch2);\n            ret.bracket = dataBracket;\n            foundBracket = true;\n        }\n        if (ch2.name === \"show-number\") {\n            var dataShowNumber = getActualBothNone(ch2, ActualBothNone.Both);\n            ret.showNumber = dataShowNumber;\n            foundShowNumber = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundBracket) {\n        ret.bracket = false;\n    }\n    if (!foundShowNumber) {\n        ret.showNumber = ActualBothNone.Both;\n    }\n    return ret;\n}\n(function (OctaveShiftType) {\n    OctaveShiftType[OctaveShiftType[\"Down\"] = 2] = \"Down\";\n    OctaveShiftType[OctaveShiftType[\"Stop\"] = 3] = \"Stop\";\n    OctaveShiftType[OctaveShiftType[\"Up\"] = 1] = \"Up\";\n    OctaveShiftType[OctaveShiftType[\"Continue\"] = 4] = \"Continue\";\n})(exports.OctaveShiftType || (exports.OctaveShiftType = {}));\nvar OctaveShiftType = exports.OctaveShiftType;\nfunction getOctaveShiftType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"down\") {\n        return OctaveShiftType.Down;\n    }\n    if (s == \"stop\") {\n        return OctaveShiftType.Stop;\n    }\n    if (s == \"up\") {\n        return OctaveShiftType.Up;\n    }\n    if (s == \"continue\") {\n        return OctaveShiftType.Continue;\n    }\n    return fallbackVal;\n}\nfunction xmlToOctaveShift(node) {\n    var ret = {};\n    var foundSize = false;\n    var foundDashLength = false;\n    var foundSpaceLength = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"size\") {\n            var dataSize = getNumber(ch2, true);\n            ret.size = dataSize;\n            foundSize = true;\n        }\n        if (ch2.name === \"dash-length\") {\n            var dataDashLength = getNumber(ch2, true);\n            ret.dashLength = dataDashLength;\n            foundDashLength = true;\n        }\n        if (ch2.name === \"space-length\") {\n            var dataSpaceLength = getNumber(ch2, true);\n            ret.spaceLength = dataSpaceLength;\n            foundSpaceLength = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getOctaveShiftType(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundSize) {\n        ret.size = 8;\n    }\n    if (!foundDashLength) {\n        ret.dashLength = 1;\n    }\n    if (!foundSpaceLength) {\n        ret.spaceLength = 1;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToHarpPedals(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"pedal-tuning\") {\n            var dataPedalTunings = xmlToPedalTuning(ch);\n            ret.pedalTunings = (ret.pedalTunings || []).concat(dataPedalTunings);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToPedalTuning(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"pedal-step\") {\n            var dataPedalStep = getString(ch, true);\n            ret.pedalStep = dataPedalStep;\n        }\n        if (ch.nodeName === \"pedal-alter\") {\n            var dataPedalAlter = getString(ch, true);\n            ret.pedalAlter = dataPedalAlter;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToDamp(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToDampAll(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToEyeglasses(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToStringMute(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToScordatura(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"accord\") {\n            var dataAccords = xmlToAccord(ch);\n            ret.accords = (ret.accords || []).concat(dataAccords);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToAccord(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"tuning-alter\") {\n            var dataTuningAlter = getString(ch, true);\n            ret.tuningAlter = dataTuningAlter;\n        }\n        if (ch.nodeName === \"tuning-step\") {\n            var dataTuningStep = getString(ch, true);\n            ret.tuningStep = dataTuningStep;\n        }\n        if (ch.nodeName === \"tuning-octave\") {\n            var dataTuningOctave = getString(ch, true);\n            ret.tuningOctave = dataTuningOctave;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"string\") {\n            var dataString = getString(ch2, true);\n            ret.string = dataString;\n        }\n    }\n    return ret;\n}\nfunction xmlToImage(node) {\n    var ret = {};\n    var foundHalign = false;\n    var foundValignImage = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValignImage = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valignImage = dataValignImage;\n            foundValignImage = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"source\") {\n            var dataSource = getString(ch2, true);\n            ret.source = dataSource;\n        }\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValignImage) {\n        ret.valignImage = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\n(function (VoiceSymbol) {\n    VoiceSymbol[VoiceSymbol[\"None\"] = 4] = \"None\";\n    VoiceSymbol[VoiceSymbol[\"Hauptstimme\"] = 1] = \"Hauptstimme\";\n    VoiceSymbol[VoiceSymbol[\"Nebenstimme\"] = 2] = \"Nebenstimme\";\n    VoiceSymbol[VoiceSymbol[\"Plain\"] = 3] = \"Plain\";\n})(exports.VoiceSymbol || (exports.VoiceSymbol = {}));\nvar VoiceSymbol = exports.VoiceSymbol;\nfunction getVoiceSymbol(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"none\") {\n        return VoiceSymbol.None;\n    }\n    if (s == \"Hauptstimme\") {\n        return VoiceSymbol.Hauptstimme;\n    }\n    if (s == \"Nebenstimme\") {\n        return VoiceSymbol.Nebenstimme;\n    }\n    if (s == \"plain\") {\n        return VoiceSymbol.Plain;\n    }\n    return fallbackVal;\n}\nfunction xmlToPrincipalVoice(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"symbol\") {\n            var dataSymbol = getVoiceSymbol(ch2, null);\n            ret.symbol = dataSymbol;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, false);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToAccordionRegistration(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"accordion-middle\") {\n            var dataAccordionMiddle = getString(ch, true);\n            ret.accordionMiddle = dataAccordionMiddle;\n        }\n        if (ch.nodeName === \"accordion-high\") {\n            var dataAccordionHigh = true;\n            ret.accordionHigh = dataAccordionHigh;\n        }\n        if (ch.nodeName === \"accordion-low\") {\n            var dataAccordionLow = true;\n            ret.accordionLow = dataAccordionLow;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToPercussion(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundEnclosure = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"stick-location\") {\n            var dataStickLocation = getString(ch, true);\n            ret.stickLocation = dataStickLocation;\n        }\n        if (ch.nodeName === \"other-percussion\") {\n            var dataOtherPercussion = getString(ch, true);\n            ret.otherPercussion = dataOtherPercussion;\n        }\n        if (ch.nodeName === \"wood\") {\n            var dataWood = getString(ch, true);\n            ret.wood = dataWood;\n        }\n        if (ch.nodeName === \"effect\") {\n            var dataEffect = getString(ch, true);\n            ret.effect = dataEffect;\n        }\n        if (ch.nodeName === \"glass\") {\n            var dataGlass = getString(ch, true);\n            ret.glass = dataGlass;\n        }\n        if (ch.nodeName === \"timpani\") {\n            var dataTimpani = xmlToTimpani(ch);\n            ret.timpani = dataTimpani;\n        }\n        if (ch.nodeName === \"stick\") {\n            var dataStick = xmlToStick(ch);\n            ret.stick = dataStick;\n        }\n        if (ch.nodeName === \"metal\") {\n            var dataMetal = getString(ch, true);\n            ret.metal = dataMetal;\n        }\n        if (ch.nodeName === \"pitched\") {\n            var dataPitched = getString(ch, true);\n            ret.pitched = dataPitched;\n        }\n        if (ch.nodeName === \"membrane\") {\n            var dataMembrane = getString(ch, true);\n            ret.membrane = dataMembrane;\n        }\n        if (ch.nodeName === \"beater\") {\n            var dataBeater = xmlToBeater(ch);\n            ret.beater = dataBeater;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    return ret;\n}\nfunction xmlToTimpani(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToBeater(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"tip\") {\n            var dataTip = getTipDirection(ch2, null);\n            ret.tip = dataTip;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToStick(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"stick-material\") {\n            var dataStickMaterial = getString(ch, true);\n            ret.stickMaterial = dataStickMaterial;\n        }\n        if (ch.nodeName === \"stick-type\") {\n            var dataStickType = getString(ch, true);\n            ret.stickType = dataStickType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"tip\") {\n            var dataTip = getTipDirection(ch2, null);\n            ret.tip = dataTip;\n        }\n    }\n    return ret;\n}\nfunction xmlToOffset(node) {\n    var ret = {};\n    var foundSound = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"sound\") {\n            var dataSound = xmlToYesNo(ch2);\n            ret.sound = dataSound;\n            foundSound = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundSound) {\n        ret.sound = false;\n    }\n    return ret;\n}\nfunction xmlToHarmonyChord(node) {\n    var ret = {\n        root: null,\n        \"function\": null,\n        kind: null,\n        degrees: [],\n        inversion: null,\n        bass: null\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"root\") {\n            var dataRoot = xmlToRoot(ch);\n            ret.root = dataRoot;\n        }\n        if (ch.nodeName === \"function\") {\n            var dataFunction = xmlToFunction(ch);\n            ret.function = dataFunction;\n        }\n        if (ch.nodeName === \"kind\") {\n            var dataKind = xmlToKind(ch);\n            ret.kind = dataKind;\n        }\n        if (ch.nodeName === \"degree\") {\n            var dataDegree = xmlToDegree(ch);\n            ret.degrees.push(dataDegree);\n        }\n        if (ch.nodeName === \"inversion\") {\n            var dataInversion = xmlToInversion(ch);\n            ret.inversion = dataInversion;\n        }\n        if (ch.nodeName === \"bass\") {\n            var dataBass = xmlToBass(ch);\n            ret.bass = dataBass;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\n(function (ExplicitImpliedAlternate) {\n    ExplicitImpliedAlternate[ExplicitImpliedAlternate[\"Explicit\"] = 1] = \"Explicit\";\n    ExplicitImpliedAlternate[ExplicitImpliedAlternate[\"Implied\"] = 2] = \"Implied\";\n    ExplicitImpliedAlternate[ExplicitImpliedAlternate[\"Alternate\"] = 3] = \"Alternate\";\n})(exports.ExplicitImpliedAlternate || (exports.ExplicitImpliedAlternate = {}));\nvar ExplicitImpliedAlternate = exports.ExplicitImpliedAlternate;\nfunction getExplicitImpliedAlternate(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"explicit\") {\n        return ExplicitImpliedAlternate.Explicit;\n    }\n    if (s == \"implied\") {\n        return ExplicitImpliedAlternate.Implied;\n    }\n    if (s == \"alternate\") {\n        return ExplicitImpliedAlternate.Alternate;\n    }\n    return fallbackVal;\n}\nfunction xmlToHarmony(node) {\n    var ret = {\n        frame: null,\n        printFrame: null,\n        staff: null,\n        type: null,\n        offset: null,\n        root: null,\n        \"function\": null,\n        kind: null,\n        degrees: [],\n        inversion: null,\n        bass: null\n    };\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPlacement = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"frame\") {\n            var dataFrame = xmlToFrame(ch);\n            ret.frame = dataFrame;\n        }\n        if (ch.nodeName === \"root\") {\n            var dataRoot = xmlToRoot(ch);\n            ret.root = dataRoot;\n        }\n        if (ch.nodeName === \"function\") {\n            var dataFunction = xmlToFunction(ch);\n            ret.function = dataFunction;\n        }\n        if (ch.nodeName === \"kind\") {\n            var dataKind = xmlToKind(ch);\n            ret.kind = dataKind;\n        }\n        if (ch.nodeName === \"degree\") {\n            var dataDegree = xmlToDegree(ch);\n            ret.degrees.push(dataDegree);\n        }\n        if (ch.nodeName === \"inversion\") {\n            var dataInversion = xmlToInversion(ch);\n            ret.inversion = dataInversion;\n        }\n        if (ch.nodeName === \"bass\") {\n            var dataBass = xmlToBass(ch);\n            ret.bass = dataBass;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"staff\") {\n            var dataStaff = getNumber(ch, true);\n            ret.staff = dataStaff;\n        }\n        if (ch.nodeName === \"offset\") {\n            var dataOffset = xmlToOffset(ch);\n            ret.offset = dataOffset;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-frame\") {\n            var dataPrintFrame = xmlToYesNo(ch2);\n            ret.printFrame = dataPrintFrame;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"placement\") {\n            var dataPlacement = getAboveBelow(ch2, AboveBelow.Unspecified);\n            ret.placement = dataPlacement;\n            foundPlacement = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataHarmonyType = getExplicitImpliedAlternate(ch2, null);\n            ret.type = dataHarmonyType;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPlacement) {\n        ret.placement = AboveBelow.Unspecified;\n    }\n    ret._class = \"Harmony\";\n    return ret;\n}\nfunction xmlToRoot(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"root-step\") {\n            var dataRootStep = xmlToRootStep(ch);\n            ret.rootStep = dataRootStep;\n        }\n        if (ch.nodeName === \"root-alter\") {\n            var dataRootAlter = xmlToRootAlter(ch);\n            ret.rootAlter = dataRootAlter;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToRootStep(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToRootAlter(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"location\") {\n            var dataLocation = getLeftRight(ch2, null);\n            ret.location = dataLocation;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToFunction(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToKind(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"parentheses-degrees\") {\n            var dataParenthesesDegrees = xmlToYesNo(ch2);\n            ret.parenthesesDegrees = dataParenthesesDegrees;\n        }\n        if (ch2.name === \"use-symbols\") {\n            var dataUseSymbols = xmlToYesNo(ch2);\n            ret.useSymbols = dataUseSymbols;\n        }\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"stack-degrees\") {\n            var dataStackDegrees = xmlToYesNo(ch2);\n            ret.stackDegrees = dataStackDegrees;\n        }\n        if (ch2.name === \"bracket-degrees\") {\n            var dataBracketDegrees = xmlToYesNo(ch2);\n            ret.bracketDegrees = dataBracketDegrees;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToInversion(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToBass(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"bass-step\") {\n            var dataBassStep = xmlToBassStep(ch);\n            ret.bassStep = dataBassStep;\n        }\n        if (ch.nodeName === \"bass-alter\") {\n            var dataBassAlter = xmlToBassAlter(ch);\n            ret.bassAlter = dataBassAlter;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToBassStep(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToBassAlter(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"location\") {\n            var dataLocation = getLeftRight(ch2, null);\n            ret.location = dataLocation;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToDegree(node) {\n    var ret = {};\n    var foundPrintObject = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"degree-alter\") {\n            var dataDegreeAlter = xmlToDegreeAlter(ch);\n            ret.degreeAlter = dataDegreeAlter;\n        }\n        if (ch.nodeName === \"degree-value\") {\n            var dataDegreeValue = xmlToDegreeValue(ch);\n            ret.degreeValue = dataDegreeValue;\n        }\n        if (ch.nodeName === \"degree-type\") {\n            var dataDegreeType = xmlToDegreeType(ch);\n            ret.degreeType = dataDegreeType;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    return ret;\n}\n(function (ChordType) {\n    ChordType[ChordType[\"Augmented\"] = 3] = \"Augmented\";\n    ChordType[ChordType[\"Diminished\"] = 4] = \"Diminished\";\n    ChordType[ChordType[\"Major\"] = 1] = \"Major\";\n    ChordType[ChordType[\"Minor\"] = 2] = \"Minor\";\n    ChordType[ChordType[\"HalfDiminished\"] = 5] = \"HalfDiminished\";\n})(exports.ChordType || (exports.ChordType = {}));\nvar ChordType = exports.ChordType;\nfunction getChordType(node, fallbackVal) {\n    \"use strict\";\n    var s = (node.nodeType === node.ATTRIBUTE_NODE ? node.value : node.textContent).trim();\n    if (s === \"\" && fallbackVal !== null && fallbackVal !== undefined) {\n        return fallbackVal;\n    }\n    if (s == \"augmented\") {\n        return ChordType.Augmented;\n    }\n    if (s == \"diminished\") {\n        return ChordType.Diminished;\n    }\n    if (s == \"major\") {\n        return ChordType.Major;\n    }\n    if (s == \"minor\") {\n        return ChordType.Minor;\n    }\n    if (s == \"half-diminished\") {\n        return ChordType.HalfDiminished;\n    }\n    return fallbackVal;\n}\nfunction xmlToDegreeValue(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"symbol\") {\n            var dataSymbol = getChordType(ch2, null);\n            ret.symbol = dataSymbol;\n        }\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToDegreeAlter(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"plus-minus\") {\n            var dataPlusMinus = xmlToYesNo(ch2);\n            ret.plusMinus = dataPlusMinus;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToDegreeType(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToFrame(node) {\n    var ret = {};\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValignImage = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"frame-strings\") {\n            var dataFrameStrings = getString(ch, true);\n            ret.frameStrings = dataFrameStrings;\n        }\n        if (ch.nodeName === \"frame-note\") {\n            var dataFrameNotes = xmlToFrameNote(ch);\n            ret.frameNotes = (ret.frameNotes || []).concat(dataFrameNotes);\n        }\n        if (ch.nodeName === \"frame-frets\") {\n            var dataFrameFrets = getString(ch, true);\n            ret.frameFrets = dataFrameFrets;\n        }\n        if (ch.nodeName === \"first-fret\") {\n            var dataFirstFret = xmlToFirstFret(ch);\n            ret.firstFret = dataFirstFret;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"unplayed\") {\n            var dataUnplayed = getString(ch2, true);\n            ret.unplayed = dataUnplayed;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValignImage = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valignImage = dataValignImage;\n            foundValignImage = true;\n        }\n        if (ch2.name === \"width\") {\n            var dataWidth = getNumber(ch2, true);\n            ret.width = dataWidth;\n        }\n        if (ch2.name === \"height\") {\n            var dataHeight = getNumber(ch2, true);\n            ret.height = dataHeight;\n        }\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValignImage) {\n        ret.valignImage = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToFirstFret(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"text\") {\n            var dataText = getString(ch2, true);\n            ret.text = dataText;\n        }\n        if (ch2.name === \"location\") {\n            var dataLocation = getLeftRight(ch2, null);\n            ret.location = dataLocation;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToFrameNote(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"barre\") {\n            var dataBarre = xmlToBarre(ch);\n            ret.barre = dataBarre;\n        }\n        if (ch.nodeName === \"string\") {\n            var dataString = xmlToString(ch);\n            ret.string = dataString;\n        }\n        if (ch.nodeName === \"fingering\") {\n            var dataFingering = xmlToFingering(ch);\n            ret.fingering = dataFingering;\n        }\n        if (ch.nodeName === \"fret\") {\n            var dataFret = xmlToFret(ch);\n            ret.fret = dataFret;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToBarre(node) {\n    var ret = {};\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToGrouping(node) {\n    var ret = {};\n    var foundNumber_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"feature\") {\n            var dataFeatures = xmlToFeature(ch);\n            ret.features = (ret.features || []).concat(dataFeatures);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataGroupingType = getStartStopSingle(ch2, null);\n            ret.type = dataGroupingType;\n        }\n        if (ch2.name === \"member-of\") {\n            var dataMemberOf = getString(ch2, true);\n            ret.memberOf = dataMemberOf;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    ret._class = \"Grouping\";\n    return ret;\n}\nfunction xmlToFeature(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    return ret;\n}\nfunction xmlToPrint(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"measure-numbering\") {\n            var dataMeasureNumbering = xmlToMeasureNumbering(ch);\n            ret.measureNumbering = dataMeasureNumbering;\n        }\n        if (ch.nodeName === \"part-name-display\") {\n            var dataPartNameDisplay = xmlToPartNameDisplay(ch);\n            ret.partNameDisplay = dataPartNameDisplay;\n        }\n        if (ch.nodeName === \"measure-layout\") {\n            var dataMeasureLayout = xmlToMeasureLayout(ch);\n            ret.measureLayout = dataMeasureLayout;\n        }\n        if (ch.nodeName === \"part-abbreviation-display\") {\n            var dataPartAbbreviationDisplay = xmlToPartAbbreviationDisplay(ch);\n            ret.partAbbreviationDisplay = dataPartAbbreviationDisplay;\n        }\n        if (ch.nodeName === \"page-layout\") {\n            var dataPageLayout = xmlToPageLayout(ch);\n            ret.pageLayout = dataPageLayout;\n        }\n        if (ch.nodeName === \"system-layout\") {\n            var dataSystemLayout = xmlToSystemLayout(ch);\n            ret.systemLayout = dataSystemLayout;\n        }\n        if (ch.nodeName === \"staff-layout\") {\n            var dataStaffLayouts = xmlToStaffLayout(ch);\n            ret.staffLayouts = (ret.staffLayouts || []).concat(dataStaffLayouts);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"new-system\") {\n            var dataNewSystem = xmlToYesNo(ch2);\n            ret.newSystem = dataNewSystem;\n        }\n        if (ch2.name === \"new-page\") {\n            var dataNewPage = xmlToYesNo(ch2);\n            ret.newPage = dataNewPage;\n        }\n        if (ch2.name === \"blank-page\") {\n            var dataBlankPage = getString(ch2, true);\n            ret.blankPage = dataBlankPage;\n        }\n        if (ch2.name === \"staff-spacing\") {\n            var dataStaffSpacing = getNumber(ch2, true);\n            ret.staffSpacing = dataStaffSpacing;\n        }\n        if (ch2.name === \"page-number\") {\n            var dataPageNumber = getString(ch2, true);\n            ret.pageNumber = dataPageNumber;\n        }\n    }\n    ret._class = \"Print\";\n    return ret;\n}\nfunction xmlToMeasureNumbering(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToSound(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"midi-instrument\") {\n            var dataMidiInstruments = xmlToMidiInstrument(ch);\n            ret.midiInstruments = (ret.midiInstruments || []).concat(dataMidiInstruments);\n        }\n        if (ch.nodeName === \"play\") {\n            var dataPlays = xmlToPlay(ch);\n            ret.plays = (ret.plays || []).concat(dataPlays);\n        }\n        if (ch.nodeName === \"offset\") {\n            var dataOffset = xmlToOffset(ch);\n            ret.offset = dataOffset;\n        }\n        if (ch.nodeName === \"midi-device\") {\n            var dataMidiDevices = xmlToMidiDevice(ch);\n            ret.midiDevices = (ret.midiDevices || []).concat(dataMidiDevices);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"soft-pedal\") {\n            var dataSoftPedal = getString(ch2, true);\n            ret.softPedal = dataSoftPedal;\n        }\n        if (ch2.name === \"pan\") {\n            var dataPan = getString(ch2, true);\n            ret.pan = dataPan;\n        }\n        if (ch2.name === \"tocoda\") {\n            var dataTocoda = getString(ch2, true);\n            ret.tocoda = dataTocoda;\n        }\n        if (ch2.name === \"decapo\") {\n            var dataDecapo = xmlToYesNo(ch2);\n            ret.decapo = dataDecapo;\n        }\n        if (ch2.name === \"divisions\") {\n            var dataDivisions = getNumber(ch2, true);\n            ret.divisions = dataDivisions;\n        }\n        if (ch2.name === \"pizzicato\") {\n            var dataPizzicato = xmlToYesNo(ch2);\n            ret.pizzicato = dataPizzicato;\n        }\n        if (ch2.name === \"coda\") {\n            var dataCoda = getString(ch2, true);\n            ret.coda = dataCoda;\n        }\n        if (ch2.name === \"segno\") {\n            var dataSegno = getString(ch2, true);\n            ret.segno = dataSegno;\n        }\n        if (ch2.name === \"elevation\") {\n            var dataElevation = getString(ch2, true);\n            ret.elevation = dataElevation;\n        }\n        if (ch2.name === \"fine\") {\n            var dataFine = getString(ch2, true);\n            ret.fine = dataFine;\n        }\n        if (ch2.name === \"damper-pedal\") {\n            var dataDamperPedal = getString(ch2, true);\n            ret.damperPedal = dataDamperPedal;\n        }\n        if (ch2.name === \"dynamics\") {\n            var dataDynamics = getString(ch2, true);\n            ret.dynamics = dataDynamics;\n        }\n        if (ch2.name === \"time-only\") {\n            var dataTimeOnly = getString(ch2, true);\n            ret.timeOnly = dataTimeOnly;\n        }\n        if (ch2.name === \"sostenuto-pedal\") {\n            var dataSostenutoPedal = getString(ch2, true);\n            ret.sostenutoPedal = dataSostenutoPedal;\n        }\n        if (ch2.name === \"dalsegno\") {\n            var dataDalsegno = getString(ch2, true);\n            ret.dalsegno = dataDalsegno;\n        }\n        if (ch2.name === \"tempo\") {\n            var dataTempo = getString(ch2, true);\n            ret.tempo = dataTempo;\n        }\n        if (ch2.name === \"forward-repeat\") {\n            var dataForwardRepeat = xmlToYesNo(ch2);\n            ret.forwardRepeat = dataForwardRepeat;\n        }\n    }\n    ret._class = \"Sound\";\n    return ret;\n}\nfunction xmlToWork(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"work-number\") {\n            var dataWorkNumber = getString(ch, true);\n            ret.workNumber = dataWorkNumber;\n        }\n        if (ch.nodeName === \"work-title\") {\n            var dataWorkTitle = getString(ch, true);\n            ret.workTitle = dataWorkTitle;\n        }\n        if (ch.nodeName === \"opus\") {\n            var dataOpus = xmlToOpus(ch);\n            ret.opus = dataOpus;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToOpus(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToDefaults(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"word-font\") {\n            var dataWordFont = xmlToWordFont(ch);\n            ret.wordFont = dataWordFont;\n        }\n        if (ch.nodeName === \"lyric-language\") {\n            var dataLyricLanguages = xmlToLyricLanguage(ch);\n            ret.lyricLanguages = (ret.lyricLanguages || []).concat(dataLyricLanguages);\n        }\n        if (ch.nodeName === \"lyric-font\") {\n            var dataLyricFonts = xmlToLyricFont(ch);\n            ret.lyricFonts = (ret.lyricFonts || []).concat(dataLyricFonts);\n        }\n        if (ch.nodeName === \"page-layout\") {\n            var dataPageLayout = xmlToPageLayout(ch);\n            ret.pageLayout = dataPageLayout;\n        }\n        if (ch.nodeName === \"system-layout\") {\n            var dataSystemLayout = xmlToSystemLayout(ch);\n            ret.systemLayout = dataSystemLayout;\n        }\n        if (ch.nodeName === \"appearance\") {\n            var dataAppearance = xmlToAppearance(ch);\n            ret.appearance = dataAppearance;\n        }\n        if (ch.nodeName === \"scaling\") {\n            var dataScaling = xmlToScaling(ch);\n            ret.scaling = dataScaling;\n        }\n        if (ch.nodeName === \"staff-layout\") {\n            var dataStaffLayouts = xmlToStaffLayout(ch);\n            ret.staffLayouts = (ret.staffLayouts || []).concat(dataStaffLayouts);\n        }\n        if (ch.nodeName === \"music-font\") {\n            var dataMusicFont = xmlToMusicFont(ch);\n            ret.musicFont = dataMusicFont;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToMusicFont(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    return ret;\n}\nfunction xmlToWordFont(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    return ret;\n}\nfunction xmlToLyricFont(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"name\") {\n            var dataName = getString(ch2, true);\n            ret.name = dataName;\n        }\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    return ret;\n}\nfunction xmlToLyricLanguage(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n        }\n        if (ch2.name === \"name\") {\n            var dataName = getString(ch2, true);\n            ret.name = dataName;\n        }\n    }\n    return ret;\n}\nfunction xmlToCredit(node) {\n    var ret = {};\n    ret.creditWords = [];\n    var foundCreditTypes = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"credit-type\") {\n            var dataCreditTypes = getString(ch, true);\n            ret.creditTypes = (ret.creditTypes || []).concat(dataCreditTypes);\n            foundCreditTypes = true;\n        }\n        if (ch.nodeName === \"credit-words\") {\n            var dataCreditWords = xmlToCreditWords(ch);\n            ret.creditWords.push(dataCreditWords);\n        }\n        if (ch.nodeName === \"credit-image\") {\n            var dataCreditImage = xmlToCreditImage(ch);\n            ret.creditImage = dataCreditImage;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"page\") {\n            var dataPage = getNumber(ch2, true);\n            ret.page = dataPage;\n        }\n    }\n    if (!foundCreditTypes) {\n        ret.creditTypes = [];\n    }\n    return ret;\n}\nfunction xmlToCreditWords(node) {\n    var ret = {};\n    var foundJustify = false;\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundHalign = false;\n    var foundValign = false;\n    var foundUnderline = false;\n    var foundOverline = false;\n    var foundLineThrough = false;\n    var foundRotation = false;\n    var foundLetterSpacing = false;\n    var foundLineHeight = false;\n    var foundDir = false;\n    var foundEnclosure = false;\n    var foundFontFamily = false;\n    var foundRelativeX = false;\n    var foundRelativeY = false;\n    var foundDefaultX = false;\n    var foundDefaultY = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n            foundDefaultX = true;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n            foundRelativeY = true;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n            foundDefaultY = true;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n            foundRelativeX = true;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n            foundFontFamily = true;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValign = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valign = dataValign;\n            foundValign = true;\n        }\n        if (ch2.name === \"underline\") {\n            var dataUnderline = getNumber(ch2, true);\n            ret.underline = dataUnderline;\n            foundUnderline = true;\n        }\n        if (ch2.name === \"overline\") {\n            var dataOverline = getNumber(ch2, true);\n            ret.overline = dataOverline;\n            foundOverline = true;\n        }\n        if (ch2.name === \"line-through\") {\n            var dataLineThrough = getNumber(ch2, true);\n            ret.lineThrough = dataLineThrough;\n            foundLineThrough = true;\n        }\n        if (ch2.name === \"rotation\") {\n            var dataRotation = getNumber(ch2, true);\n            ret.rotation = dataRotation;\n            foundRotation = true;\n        }\n        if (ch2.name === \"letter-spacing\") {\n            var dataLetterSpacing = getString(ch2, true);\n            ret.letterSpacing = dataLetterSpacing;\n            foundLetterSpacing = true;\n        }\n        if (ch2.name === \"line-height\") {\n            var dataLineHeight = getString(ch2, true);\n            ret.lineHeight = dataLineHeight;\n            foundLineHeight = true;\n        }\n        if (ch2.name === \"dir\") {\n            var dataDir = getDirectionMode(ch2, DirectionMode.Ltr);\n            ret.dir = dataDir;\n            foundDir = true;\n        }\n        if (ch2.name === \"enclosure\") {\n            var dataEnclosure = getEnclosureShape(ch2, EnclosureShape.None);\n            ret.enclosure = dataEnclosure;\n            foundEnclosure = true;\n        }\n    }\n    var ch3 = node;\n    var dataWords = getString(ch3, true);\n    ret.words = dataWords;\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValign) {\n        ret.valign = TopMiddleBottomBaseline.Bottom;\n    }\n    if (!foundUnderline) {\n        ret.underline = 0;\n    }\n    if (!foundOverline) {\n        ret.overline = 0;\n    }\n    if (!foundLineThrough) {\n        ret.lineThrough = 0;\n    }\n    if (!foundRotation) {\n        ret.rotation = 0;\n    }\n    if (!foundLetterSpacing) {\n        ret.letterSpacing = \"normal\";\n    }\n    if (!foundLineHeight) {\n        ret.lineHeight = \"normal\";\n    }\n    if (!foundDir) {\n        ret.dir = DirectionMode.Ltr;\n    }\n    if (!foundEnclosure) {\n        ret.enclosure = EnclosureShape.None;\n    }\n    if (!foundFontFamily) {\n        ret.fontFamily = \"\";\n    }\n    if (!foundRelativeX) {\n        ret.relativeX = null;\n    }\n    if (!foundRelativeY) {\n        ret.relativeY = null;\n    }\n    if (!foundDefaultX) {\n        ret.defaultX = null;\n    }\n    if (!foundDefaultY) {\n        ret.defaultY = null;\n    }\n    return ret;\n}\nfunction xmlToCreditImage(node) {\n    var ret = {};\n    var foundHalign = false;\n    var foundValignImage = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"halign\") {\n            var dataHalign = getLeftCenterRight(ch2, (ret.justify || LeftCenterRight.Left));\n            ret.halign = dataHalign;\n            foundHalign = true;\n        }\n        if (ch2.name === \"valign\") {\n            var dataValignImage = getTopMiddleBottomBaseline(ch2, TopMiddleBottomBaseline.Bottom);\n            ret.valignImage = dataValignImage;\n            foundValignImage = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getString(ch2, true);\n            ret.type = dataType;\n        }\n        if (ch2.name === \"source\") {\n            var dataSource = getString(ch2, true);\n            ret.source = dataSource;\n        }\n    }\n    if (!foundHalign) {\n        ret.halign = (ret.justify || LeftCenterRight.Left);\n    }\n    if (!foundValignImage) {\n        ret.valignImage = TopMiddleBottomBaseline.Bottom;\n    }\n    return ret;\n}\nfunction xmlToPartList(node) {\n    var ret = [];\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"score-part\") {\n            var dataScoreParts = xmlToScorePart(ch);\n            ret.push(dataScoreParts);\n        }\n        if (ch.nodeName === \"part-group\") {\n            var dataPartGroups = xmlToPartGroup(ch);\n            ret.push(dataPartGroups);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToScorePart(node) {\n    var ret = {\n        _class: \"ScorePart\",\n        identification: null,\n        partNameDisplay: null,\n        scoreInstruments: [],\n        midiDevices: [],\n        partName: null,\n        partAbbreviationDisplay: null,\n        partAbbreviation: null,\n        groups: [],\n        midiInstruments: [],\n        id: \"\"\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"identification\") {\n            var dataIdentification = xmlToIdentification(ch);\n            ret.identification = dataIdentification;\n        }\n        if (ch.nodeName === \"part-name-display\") {\n            var dataPartNameDisplay = xmlToPartNameDisplay(ch);\n            ret.partNameDisplay = dataPartNameDisplay;\n        }\n        if (ch.nodeName === \"score-instrument\") {\n            var dataScoreInstruments = xmlToScoreInstrument(ch);\n            ret.scoreInstruments = (ret.scoreInstruments || []).concat(dataScoreInstruments);\n        }\n        if (ch.nodeName === \"midi-device\") {\n            var dataMidiDevices = xmlToMidiDevice(ch);\n            ret.midiDevices = (ret.midiDevices || []).concat(dataMidiDevices);\n        }\n        if (ch.nodeName === \"part-name\") {\n            var dataPartName = xmlToPartName(ch);\n            ret.partName = dataPartName;\n        }\n        if (ch.nodeName === \"part-abbreviation-display\") {\n            var dataPartAbbreviationDisplay = xmlToPartAbbreviationDisplay(ch);\n            ret.partAbbreviationDisplay = dataPartAbbreviationDisplay;\n        }\n        if (ch.nodeName === \"part-abbreviation\") {\n            var dataPartAbbreviation = xmlToPartAbbreviation(ch);\n            ret.partAbbreviation = dataPartAbbreviation;\n        }\n        if (ch.nodeName === \"group\") {\n            var dataGroups = getString(ch, true);\n            ret.groups = (ret.groups || []).concat(dataGroups);\n        }\n        if (ch.nodeName === \"midi-instrument\") {\n            var dataMidiInstruments = xmlToMidiInstrument(ch);\n            ret.midiInstruments = (ret.midiInstruments || []).concat(dataMidiInstruments);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"id\") {\n            var dataId = getString(ch2, true);\n            ret.id = dataId;\n        }\n    }\n    return ret;\n}\nfunction xmlToPartName(node) {\n    var ret = {\n        partName: \"\",\n        defaultX: null,\n        defaultY: null,\n        relativeX: null,\n        relativeY: null,\n        fontFamily: \"\",\n        fontSize: \"\"\n    };\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundJustify = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n    }\n    var ch3 = node;\n    var dataPartName = getString(ch3, true);\n    ret.partName = dataPartName;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToPartAbbreviation(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundPrintObject = false;\n    var foundJustify = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"print-object\") {\n            var dataPrintObject = xmlToYesNo(ch2);\n            ret.printObject = dataPrintObject;\n            foundPrintObject = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n    }\n    var ch3 = node;\n    var dataAbbreviation = getString(ch3, true);\n    ret.abbreviation = dataAbbreviation;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundPrintObject) {\n        ret.printObject = true;\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToPartGroup(node) {\n    var ret = {\n        _class: \"PartGroup\"\n    };\n    var foundNumber_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"group-name-display\") {\n            var dataGroupNameDisplay = xmlToGroupNameDisplay(ch);\n            ret.groupNameDisplay = dataGroupNameDisplay;\n        }\n        if (ch.nodeName === \"group-symbol\") {\n            var dataGroupSymbol = xmlToGroupSymbol(ch);\n            ret.groupSymbol = dataGroupSymbol;\n        }\n        if (ch.nodeName === \"group-name\") {\n            var dataGroupName = xmlToGroupName(ch);\n            ret.groupName = dataGroupName;\n        }\n        if (ch.nodeName === \"group-abbreviation-display\") {\n            var dataGroupAbbreviationDisplay = xmlToGroupAbbreviationDisplay(ch);\n            ret.groupAbbreviationDisplay = dataGroupAbbreviationDisplay;\n        }\n        if (ch.nodeName === \"group-barline\") {\n            var dataGroupBarline = xmlToGroupBarline(ch);\n            ret.groupBarline = dataGroupBarline;\n        }\n        if (ch.nodeName === \"footnote\") {\n            var dataFootnote = xmlToFootnote(ch);\n            ret.footnote = dataFootnote;\n        }\n        if (ch.nodeName === \"level\") {\n            var dataLevel = xmlToLevel(ch);\n            ret.level = dataLevel;\n        }\n        if (ch.nodeName === \"group-abbreviation\") {\n            var dataGroupAbbreviation = xmlToGroupAbbreviation(ch);\n            ret.groupAbbreviation = dataGroupAbbreviation;\n        }\n        if (ch.nodeName === \"group-time\") {\n            var dataGroupTime = xmlToGroupTime(ch);\n            ret.groupTime = dataGroupTime;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"number\") {\n            var dataNumber = getNumber(ch2, true);\n            ret.number = dataNumber;\n            foundNumber_ = true;\n        }\n        if (ch2.name === \"type\") {\n            var dataType = getStartStop(ch2, null);\n            ret.type = dataType;\n        }\n    }\n    if (!foundNumber_) {\n        ret.number = 1;\n    }\n    return ret;\n}\nfunction xmlToGroupName(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundJustify = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n    }\n    var ch3 = node;\n    var dataName = getString(ch3, true);\n    ret.name = dataName;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToGroupAbbreviation(node) {\n    var ret = {};\n    var foundFontWeight = false;\n    var foundFontStyle = false;\n    var foundColor = false;\n    var foundJustify = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"font-family\") {\n            var dataFontFamily = getString(ch2, true);\n            ret.fontFamily = dataFontFamily;\n        }\n        if (ch2.name === \"font-weight\") {\n            var dataFontWeight = getNormalBold(ch2, NormalBold.Normal);\n            ret.fontWeight = dataFontWeight;\n            foundFontWeight = true;\n        }\n        if (ch2.name === \"font-style\") {\n            var dataFontStyle = getNormalItalic(ch2, NormalItalic.Normal);\n            ret.fontStyle = dataFontStyle;\n            foundFontStyle = true;\n        }\n        if (ch2.name === \"font-size\") {\n            var dataFontSize = getString(ch2, true);\n            ret.fontSize = dataFontSize;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n        if (ch2.name === \"justify\") {\n            var dataJustify = getLeftCenterRight(ch2, LeftCenterRight.Left);\n            ret.justify = dataJustify;\n            foundJustify = true;\n        }\n    }\n    var ch3 = node;\n    var dataText = getString(ch3, true);\n    ret.text = dataText;\n    if (!foundFontWeight) {\n        ret.fontWeight = NormalBold.Normal;\n    }\n    if (!foundFontStyle) {\n        ret.fontStyle = NormalItalic.Normal;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    if (!foundJustify) {\n        ret.justify = LeftCenterRight.Left;\n    }\n    return ret;\n}\nfunction xmlToGroupSymbol(node) {\n    var ret = {};\n    var foundData = false;\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"default-x\") {\n            var dataDefaultX = getNumber(ch2, true);\n            ret.defaultX = dataDefaultX;\n        }\n        if (ch2.name === \"relative-y\") {\n            var dataRelativeY = getNumber(ch2, true);\n            ret.relativeY = dataRelativeY;\n        }\n        if (ch2.name === \"default-y\") {\n            var dataDefaultY = getNumber(ch2, true);\n            ret.defaultY = dataDefaultY;\n        }\n        if (ch2.name === \"relative-x\") {\n            var dataRelativeX = getNumber(ch2, true);\n            ret.relativeX = dataRelativeX;\n        }\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getPartSymbolType(ch3, PartSymbolType.None);\n    ret.data = dataData;\n    if (!foundData) {\n        ret.data = PartSymbolType.None;\n    }\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToGroupBarline(node) {\n    var ret = {};\n    var foundColor = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"color\") {\n            var dataColor = getString(ch2, true);\n            ret.color = dataColor;\n            foundColor = true;\n        }\n    }\n    var ch3 = node;\n    var dataData = getString(ch3, true);\n    ret.data = dataData;\n    if (!foundColor) {\n        ret.color = \"#000000\";\n    }\n    return ret;\n}\nfunction xmlToGroupTime(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToScoreInstrument(node) {\n    var ret = {\n        instrumentName: \"\",\n        instrumentSound: \"\",\n        ensemble: \"\",\n        virtualInstrument: null,\n        instrumentAbbreviation: \"\",\n        solo: null,\n        id: \"\"\n    };\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"instrument-name\") {\n            var dataInstrumentName = getString(ch, true);\n            ret.instrumentName = dataInstrumentName;\n        }\n        if (ch.nodeName === \"instrument-sound\") {\n            var dataInstrumentSound = getString(ch, true);\n            ret.instrumentSound = dataInstrumentSound;\n        }\n        if (ch.nodeName === \"ensemble\") {\n            var dataEnsemble = getString(ch, true);\n            ret.ensemble = dataEnsemble;\n        }\n        if (ch.nodeName === \"virtual-instrument\") {\n            var dataVirtualInstrument = xmlToVirtualInstrument(ch);\n            ret.virtualInstrument = dataVirtualInstrument;\n        }\n        if (ch.nodeName === \"instrument-abbreviation\") {\n            var dataInstrumentAbbreviation = getString(ch, true);\n            ret.instrumentAbbreviation = dataInstrumentAbbreviation;\n        }\n        if (ch.nodeName === \"solo\") {\n            var dataSolo = xmlToSolo(ch);\n            ret.solo = dataSolo;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"id\") {\n            var dataId = getString(ch2, true);\n            ret.id = dataId;\n        }\n    }\n    return ret;\n}\nfunction xmlToSolo(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToVirtualInstrument(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"virtual-library\") {\n            var dataVirtualLibrary = getString(ch, true);\n            ret.virtualLibrary = dataVirtualLibrary;\n        }\n        if (ch.nodeName === \"virtual-name\") {\n            var dataVirtualName = getString(ch, true);\n            ret.virtualName = dataVirtualName;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToScoreHeader(node) {\n    var ret = {};\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"movement-title\") {\n            var dataMovementTitle = getString(ch, true);\n            ret.movementTitle = dataMovementTitle;\n        }\n        if (ch.nodeName === \"identification\") {\n            var dataIdentification = xmlToIdentification(ch);\n            ret.identification = dataIdentification;\n        }\n        if (ch.nodeName === \"defaults\") {\n            var dataDefaults = xmlToDefaults(ch);\n            ret.defaults = dataDefaults;\n        }\n        if (ch.nodeName === \"work\") {\n            var dataWork = xmlToWork(ch);\n            ret.work = dataWork;\n        }\n        if (ch.nodeName === \"credit\") {\n            var dataCredits = xmlToCredit(ch);\n            ret.credits = (ret.credits || []).concat(dataCredits);\n        }\n        if (ch.nodeName === \"part-list\") {\n            var dataPartList = xmlToPartList(ch);\n            ret.partList = dataPartList;\n        }\n        if (ch.nodeName === \"movement-number\") {\n            var dataMovementNumber = getString(ch, true);\n            ret.movementNumber = dataMovementNumber;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return ret;\n}\nfunction xmlToScoreTimewise(node) {\n    var ret = {};\n    var foundVersion_ = false;\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"measure\") {\n            var dataMeasures = xmlToMeasure(ch);\n            ret.measures = (ret.measures || []).concat(dataMeasures);\n        }\n        if (ch.nodeName === \"movement-title\") {\n            var dataMovementTitle = getString(ch, true);\n            ret.movementTitle = dataMovementTitle;\n        }\n        if (ch.nodeName === \"identification\") {\n            var dataIdentification = xmlToIdentification(ch);\n            ret.identification = dataIdentification;\n        }\n        if (ch.nodeName === \"defaults\") {\n            var dataDefaults = xmlToDefaults(ch);\n            ret.defaults = dataDefaults;\n        }\n        if (ch.nodeName === \"work\") {\n            var dataWork = xmlToWork(ch);\n            ret.work = dataWork;\n        }\n        if (ch.nodeName === \"credit\") {\n            var dataCredits = xmlToCredit(ch);\n            ret.credits = (ret.credits || []).concat(dataCredits);\n        }\n        if (ch.nodeName === \"part-list\") {\n            var dataPartList = xmlToPartList(ch);\n            ret.partList = dataPartList;\n        }\n        if (ch.nodeName === \"movement-number\") {\n            var dataMovementNumber = getString(ch, true);\n            ret.movementNumber = dataMovementNumber;\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n        if (ch2.name === \"version\") {\n            var dataVersion = getString(ch2, true);\n            ret.version = dataVersion;\n            foundVersion_ = true;\n        }\n    }\n    if (!foundVersion_) {\n        ret.version = \"1.0\";\n    }\n    return ret;\n}\nfunction xmlToPart(node) {\n    var rarr = [];\n    for (var i = 0; i < node.childNodes.length; ++i) {\n        var ch = node.childNodes[i];\n        if (ch.nodeName === \"note\") {\n            var data = xmlToNote(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"backup\") {\n            var data = xmlToBackup(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"harmony\") {\n            var data = xmlToHarmony(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"forward\") {\n            var data = xmlToForward(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"print\") {\n            var data = xmlToPrint(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"figured-bass\") {\n            var data = xmlToFiguredBass(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"direction\") {\n            var data = xmlToDirection(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"attributes\") {\n            var data = xmlToAttributes(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"sound\") {\n            var data = xmlToSound(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"barline\") {\n            var data = xmlToBarline(ch);\n            rarr = (rarr || []).concat(data);\n        }\n        if (ch.nodeName === \"grouping\") {\n            var data = xmlToGrouping(ch);\n            rarr = (rarr || []).concat(data);\n        }\n    }\n    for (var i = 0; i < node.attributes.length; ++i) {\n        var ch2 = node.attributes[i];\n    }\n    return rarr;\n}\n/*---- Serialization ----------------------------------------------------------------------------*/\n/**\n * Safe, escaped tagged template handler.\n */\nfunction xml(literals) {\n    var vals = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        vals[_i - 1] = arguments[_i];\n    }\n    var escaped = \"\";\n    for (var i = 0; i < literals.length; ++i) {\n        escaped += literals[i];\n        if (i < vals.length) {\n            escaped += (\"\" + vals[i])\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/\"/g, \"&apos;\");\n        }\n    }\n    return escaped;\n}\n/**\n * Safe tagged template handler for YesNo.\n */\nfunction yesNo(literals) {\n    var booleans = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        booleans[_i - 1] = arguments[_i];\n    }\n    var escaped = \"\";\n    for (var i = 0; i < literals.length; ++i) {\n        escaped += literals[i];\n        if (i < booleans.length) {\n            escaped += booleans[i] ? \"yes\" : \"no\";\n        }\n    }\n    return escaped;\n}\n/**\n * Unescaped tagged template literal\n */\nfunction dangerous(literals) {\n    var vals = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        vals[_i - 1] = arguments[_i];\n    }\n    var result = \"\";\n    for (var i = 0; i < literals.length; ++i) {\n        result += literals[i];\n        if (i < vals.length) {\n            result += vals[i];\n        }\n    }\n    return result;\n}\nfunction defined(val) {\n    return (val !== undefined) && (val !== null) && (val !== \"\");\n}\nfunction scalingToXML(scaling) {\n    // <!ELEMENT scaling (millimeters, tenths)>\n    var children = [];\n    if (defined(scaling.millimeters)) {\n        children.push(millimetersToXML(scaling.millimeters));\n    }\n    if (defined(scaling.tenths)) {\n        children.push(tenthsToXML(scaling.tenths));\n    }\n    return (_a = [\"<scaling>\\n\", \"\\n</scaling>\"], _a.raw = [\"<scaling>\\\\n\", \"\\\\n</scaling>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction millimetersToXML(mm) {\n    return (_a = [\"<millimeters>\", \"</millimeters>\"], _a.raw = [\"<millimeters>\", \"</millimeters>\"], xml(_a, mm));\n    var _a;\n}\nfunction tenthsToXML(tenths) {\n    return (_a = [\"<tenths>\", \"</tenths>\"], _a.raw = [\"<tenths>\", \"</tenths>\"], xml(_a, tenths));\n    var _a;\n}\nfunction pageLayoutToXML(pageLayout) {\n    // <!ELEMENT page-layout ((page-height, page-width)?,\n    //     (page-margins, page-margins?)?)>\n    // <!ELEMENT page-height %layout-tenths;>\n    // <!ELEMENT page-width %layout-tenths;>\n    var children = [];\n    if (defined(pageLayout.pageHeight)) {\n        children.push((_a = [\"<page-height>\", \"</page-height>\"], _a.raw = [\"<page-height>\", \"</page-height>\"], xml(_a, pageLayout.pageHeight)));\n    }\n    if (defined(pageLayout.pageWidth)) {\n        children.push((_b = [\"<page-width>\", \"</page-width>\"], _b.raw = [\"<page-width>\", \"</page-width>\"], xml(_b, pageLayout.pageWidth)));\n    }\n    (pageLayout.pageMargins || []).forEach(function (pageMargins) {\n        children.push(pageMarginsToXML(pageMargins));\n    });\n    return (_c = [\"<page-layout>\\n\", \"\\n</page-layout>\"], _c.raw = [\"<page-layout>\\\\n\", \"\\\\n</page-layout>\"], dangerous(_c, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nvar oddEvenBothToXML = {\n    2: \"both\",\n    1: \"even\",\n    0: \"odd\"\n};\nfunction pageMarginsToXML(pageMargins) {\n    // <!ELEMENT page-margins (left-margin, right-margin,\n    //     top-margin, bottom-margin)>\n    // <!ATTLIST page-margins\n    //     type (odd | even | both) #IMPLIED\n    // >\n    var children = [];\n    children = children.concat(hmarginsToXML(pageMargins));\n    children = children.concat(vmarginsToXML(pageMargins));\n    var attribs = \"\";\n    if (defined(pageMargins.type)) {\n        attribs += (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, oddEvenBothToXML[pageMargins.type]));\n    }\n    return (_b = [\"<page-margins\", \">\\n\", \"\\n</page-margins>\"], _b.raw = [\"<page-margins\", \">\\\\n\", \"\\\\n</page-margins>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction hmarginsToXML(hmargins) {\n    // <!ELEMENT left-margin %layout-tenths;>\n    // <!ELEMENT right-margin %layout-tenths;>\n    var children = [];\n    if (defined(hmargins.leftMargin)) {\n        children.push((_a = [\"<left-margin>\", \"</left-margin>\"], _a.raw = [\"<left-margin>\", \"</left-margin>\"], xml(_a, hmargins.leftMargin)));\n    }\n    if (defined(hmargins.rightMargin)) {\n        children.push((_b = [\"<right-margin>\", \"</right-margin>\"], _b.raw = [\"<right-margin>\", \"</right-margin>\"], xml(_b, hmargins.rightMargin)));\n    }\n    return children;\n    var _a, _b;\n}\nfunction vmarginsToXML(hmargins) {\n    // <!ELEMENT top-margin %layout-tenths;>\n    // <!ELEMENT bottom-margin %layout-tenths;>\n    var children = [];\n    if (defined(hmargins.topMargin)) {\n        children.push((_a = [\"<top-margin>\", \"</top-margin>\"], _a.raw = [\"<top-margin>\", \"</top-margin>\"], xml(_a, hmargins.topMargin)));\n    }\n    if (defined(hmargins.bottomMargin)) {\n        children.push((_b = [\"<bottom-margin>\", \"</bottom-margin>\"], _b.raw = [\"<bottom-margin>\", \"</bottom-margin>\"], xml(_b, hmargins.bottomMargin)));\n    }\n    return children;\n    var _a, _b;\n}\nfunction systemLayoutToXML(systemLayout) {\n    // <!ELEMENT system-layout\n    //     (system-margins?, system-distance?,\n    //      top-system-distance?, system-dividers?)>\n    var children = [];\n    if (defined(systemLayout.systemMargins)) {\n        children.push(systemMarginsToXML(systemLayout.systemMargins));\n    }\n    if (defined(systemLayout.systemDistance)) {\n        children.push((_a = [\"<system-distance>\", \"</system-distance>\"], _a.raw = [\"<system-distance>\", \"</system-distance>\"], xml(_a, systemLayout.systemDistance)));\n    }\n    if (defined(systemLayout.topSystemDistance)) {\n        children.push((_b = [\"<top-system-distance>\", \"</top-system-distance>\"], _b.raw = [\"<top-system-distance>\", \"</top-system-distance>\"], xml(_b, systemLayout.topSystemDistance)));\n    }\n    if (defined(systemLayout.systemDividers)) {\n        children.push(systemDividersToXML(systemLayout.systemDividers));\n    }\n    return (_c = [\"<system-layout>\\n\", \"\\n</system-layout>\"], _c.raw = [\"<system-layout>\\\\n\", \"\\\\n</system-layout>\"], dangerous(_c, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nfunction systemMarginsToXML(systemMargins) {\n    // <!ELEMENT system-margins (left-margin, right-margin)>\n    var children = hmarginsToXML(systemMargins);\n    return (_a = [\"<system-margins>\\n\", \"\\n</system-margins>\"], _a.raw = [\"<system-margins>\\\\n\", \"\\\\n</system-margins>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction systemDividersToXML(systemDividers) {\n    // <!ELEMENT system-dividers (left-divider, right-divider)>\n    // <!ELEMENT left-divider EMPTY>\n    // <!ATTLIST left-divider\n    //     %print-object;\n    //     %print-style-align;\n    // >\n    // <!ELEMENT right-divider EMPTY>\n    // <!ATTLIST right-divider\n    //     %print-object;\n    //     %print-style-align;\n    // >\n    var children = [];\n    if (defined(systemDividers.leftDivider)) {\n        children.push((_a = [\"<left-divider\", \" />\"], _a.raw = [\"<left-divider\", \" />\"], xml(_a, printObjectToXML(systemDividers.leftDivider) +\n            printStyleAlignToXML(systemDividers.leftDivider))));\n    }\n    if (defined(systemDividers.rightDivider)) {\n        children.push((_b = [\"<right-divider\", \" />\"], _b.raw = [\"<right-divider\", \" />\"], xml(_b, printObjectToXML(systemDividers.rightDivider) +\n            printStyleAlignToXML(systemDividers.rightDivider))));\n    }\n    return (_c = [\"<system-dividers>\\n\", \"\\n</system-dividers>\"], _c.raw = [\"<system-dividers>\\\\n\", \"\\\\n</system-dividers>\"], dangerous(_c, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nfunction appearanceToXML(appearance) {\n    // <!ELEMENT appearance\n    //     (line-width*, note-size*, distance*,\n    //      other-appearance*)>\n    var children = [];\n    Object.keys(appearance.lineWidths || {}).forEach(function (key) {\n        children.push(lineWidthToXML(appearance.lineWidths[key]));\n    });\n    Object.keys(appearance.noteSizes || {}).forEach(function (key) {\n        children.push(noteSizeToXML(appearance.noteSizes[key]));\n    });\n    Object.keys(appearance.distances || {}).forEach(function (key) {\n        children.push(distanceToXML(appearance.distances[key]));\n    });\n    // TODO: fix musicxml-interfaces\n    // appearance.otherAppearances.forEach(otherAppearance => {\n    //     children.push(otherAppearanceToXML(otherAppearance));\n    // });\n    return (_a = [\"<appearance>\\n\", \"\\n</appearance>\"], _a.raw = [\"<appearance>\\\\n\", \"\\\\n</appearance>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction lineWidthToXML(lineWidth) {\n    // <!ELEMENT line-width %layout-tenths;>\n    // <!ATTLIST line-width\n    //     type CDATA #REQUIRED\n    // >\n    return (_a = [\"<line-width type=\\\"\", \"\\\">\", \"</line-width>\"], _a.raw = [\"<line-width type=\\\"\", \"\\\">\", \"</line-width>\"], xml(_a, lineWidth.type, lineWidth.tenths));\n    var _a;\n}\nvar cueGraceLargeToXML = {\n    1: \"grace\",\n    0: \"cue\",\n    2: \"large\"\n};\nfunction noteSizeToXML(noteSize) {\n    // <!ELEMENT note-size (#PCDATA)>\n    // <!ATTLIST note-size\n    //     type (cue | grace | large) #REQUIRED\n    // >\n    return (_a = [\"<note-size type=\\\"\", \"\\\">\", \"</note-size>\"], _a.raw = [\"<note-size type=\\\"\", \"\\\">\", \"</note-size>\"], xml(_a, cueGraceLargeToXML[noteSize.type], noteSize.size));\n    var _a;\n}\nfunction distanceToXML(distance) {\n    // <!ELEMENT distance %layout-tenths;>\n    // <!ATTLIST distance\n    //     type CDATA #REQUIRED\n    // >\n    return (_a = [\"<distance type=\\\"\", \"\\\">\", \"</distance>\"], _a.raw = [\"<distance type=\\\"\", \"\\\">\", \"</distance>\"], xml(_a, distance.type, distance.tenths));\n    var _a;\n}\nfunction workToXML(work) {\n    // <!ELEMENT work (work-number?, work-title?, opus?)>\n    if (!work || (!work.workNumber && !work.workTitle)) {\n        return (_a = [\"<!-- no work metadata -->\"], _a.raw = [\"<!-- no work metadata -->\"], xml(_a));\n    }\n    var children = [];\n    if (defined(work.workNumber)) {\n        // <!ELEMENT work-number (#PCDATA)>\n        children.push((_b = [\"<work-number>\", \"</work-number>\"], _b.raw = [\"<work-number>\", \"</work-number>\"], xml(_b, work.workNumber)));\n    }\n    if (defined(work.workTitle)) {\n        // <!ELEMENT work-title (#PCDATA)>\n        children.push((_c = [\"<work-title>\", \"</work-title>\"], _c.raw = [\"<work-title>\", \"</work-title>\"], xml(_c, work.workTitle)));\n    }\n    if (defined(work.opus) && !!work.opus) {\n        // <!ELEMENT opus EMPTY>\n        // <!ATTLIST opus\n        //     %link-attributes;\n        //     >\n        console.warn(\"link-attributes in <opus /> aren't implemented.\"); // TODO: IMPLEMENT link-attributes\n        children.push((_d = [\"<opus />\"], _d.raw = [\"<opus />\"], dangerous(_d)));\n    }\n    return (_e = [\"<work>\\n\", \"\\n</work>\"], _e.raw = [\"<work>\\\\n\", \"\\\\n</work>\"], dangerous(_e, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e;\n}\nfunction movementNumberToXML(movementNumber) {\n    // <!ELEMENT movement-number (#PCDATA)>\n    if (!movementNumber) {\n        return (_a = [\"<!-- no movement-number metadata -->\"], _a.raw = [\"<!-- no movement-number metadata -->\"], xml(_a));\n    }\n    return (_b = [\"<movement-number>\", \"</movement-number>\"], _b.raw = [\"<movement-number>\", \"</movement-number>\"], xml(_b, movementNumber));\n    var _a, _b;\n}\nfunction movementTitleToXML(movementTitle) {\n    // <!ELEMENT movement-title (#PCDATA)>\n    if (!movementTitle) {\n        return (_a = [\"<!-- no movement-title metadata -->\"], _a.raw = [\"<!-- no movement-title metadata -->\"], xml(_a));\n    }\n    return (_b = [\"<movement-title>\", \"</movement-title>\"], _b.raw = [\"<movement-title>\", \"</movement-title>\"], xml(_b, movementTitle));\n    var _a, _b;\n}\nfunction identificationToXML(identification) {\n    // <!ELEMENT identification (creator*, rights*, encoding?,\n    //     source?, relation*, miscellaneous?)>\n    var children = [];\n    (identification.creators || []).forEach(function (creator) {\n        children.push(creatorToXML(creator));\n    });\n    (identification.rights || []).forEach(function (rights) {\n        children.push(rightsToXML(rights));\n    });\n    if (defined(identification.encoding)) {\n        children.push(encodingToXML(identification.encoding));\n    }\n    if (defined(identification.source) && !!identification.source) {\n        children.push(sourceToXML(identification.source));\n    }\n    (identification.relations || []).forEach(function (relation) {\n        children.push(relationToXML(relation));\n    });\n    if (defined(identification.miscellaneous)) {\n        children.push(miscellaneousToXML(identification.miscellaneous));\n    }\n    return (_a = [\"<identification>\\n\", \"\\n</identification>\"], _a.raw = [\"<identification>\\\\n\", \"\\\\n</identification>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction creatorToXML(creator) {\n    // <!ELEMENT creator (#PCDATA)>\n    // <!ATTLIST creator\n    //     type CDATA #IMPLIED\n    // >\n    var attribs = \"\";\n    if (creator.type) {\n        attribs += (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, creator.type));\n    }\n    var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, creator.creator));\n    return (_c = [\"<creator\", \">\", \"</creator>\"], _c.raw = [\"<creator\", \">\", \"</creator>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction rightsToXML(rights) {\n    // <!ELEMENT rights (#PCDATA)>\n    // <!ATTLIST rights\n    //     type CDATA #IMPLIED\n    // >\n    var attribs = \"\";\n    if (rights.type) {\n        attribs += (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, rights.type));\n    }\n    var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, rights.rights));\n    return (_c = [\"<rights\", \">\", \"</rights>\"], _c.raw = [\"<rights\", \">\", \"</rights>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction encodingToXML(encoding) {\n    // <!ELEMENT encoding ((encoding-date | encoder | software |\n    //     encoding-description | supports)*)>\n    var children = [];\n    if (defined(encoding.encodingDate)) {\n        children.push(encodingDateToXML(encoding.encodingDate));\n    }\n    (encoding.encoders || []).forEach(function (encoder) {\n        children.push(encoderToXML(encoder));\n    });\n    (encoding.softwares || []).forEach(function (software) {\n        children.push(softwareToXML(software));\n    });\n    (encoding.encodingDescriptions || []).forEach(function (encodingDescription) {\n        children.push(encodingDescriptionToXML(encodingDescription));\n    });\n    Object.keys(encoding.supports || {}).forEach(function (key) {\n        children.push(supportsToXML(encoding.supports[key]));\n    });\n    return (_a = [\"<encoding>\\n\", \"\\n</encoding>\"], _a.raw = [\"<encoding>\\\\n\", \"\\\\n</encoding>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction encodingDateToXML(encodingDate) {\n    // <!ELEMENT encoding-date %yyyy-mm-dd;>\n    return (_a = [\"<encoding-date>\", \"-\", \"-\", \"</encoding-date>\"], _a.raw = [\"<encoding-date>\", \"-\", \"-\", \"</encoding-date>\"], xml(_a, (\"0000\" + encodingDate.year).slice(-4), (\"00\" + encodingDate.month).slice(-2), (\"00\" + encodingDate.day).slice(-2)));\n    var _a;\n}\nfunction encoderToXML(encoder) {\n    // <!ELEMENT encoder (#PCDATA)>\n    // <!ATTLIST encoder\n    //     type CDATA #IMPLIED\n    // >\n    var attribs = \"\";\n    if (defined(encoder.type)) {\n        attribs = (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, encoder.type));\n    }\n    var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, encoder.encoder));\n    return (_c = [\"<encoder\", \">\", \"</encoder>\"], _c.raw = [\"<encoder\", \">\", \"</encoder>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction softwareToXML(software) {\n    // <!ELEMENT software (#PCDATA)>\n    return (_a = [\"<software>\", \"</software>\"], _a.raw = [\"<software>\", \"</software>\"], xml(_a, software));\n    var _a;\n}\nfunction encodingDescriptionToXML(encodingDescription) {\n    // <!ELEMENT encoding-description (#PCDATA)>\n    return (_a = [\"<encoding-description>\", \"</encoding-description>\"], _a.raw = [\"<encoding-description>\", \"</encoding-description>\"], xml(_a, encodingDescription));\n    var _a;\n}\nfunction supportsToXML(supports) {\n    // <!ELEMENT supports EMPTY>\n    // <!ATTLIST supports\n    //     type %yes-no; #REQUIRED\n    //     element CDATA #REQUIRED\n    //     attribute CDATA #IMPLIED\n    //     value CDATA #IMPLIED\n    var attribs = \"\";\n    if (defined(supports.type)) {\n        attribs += (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], yesNo(_a, supports.type));\n    }\n    if (defined(supports.element)) {\n        attribs += (_b = [\" element=\\\"\", \"\\\"\"], _b.raw = [\" element=\\\"\", \"\\\"\"], xml(_b, supports.element));\n    }\n    if (defined(supports.attribute)) {\n        attribs += (_c = [\" attribute=\\\"\", \"\\\"\"], _c.raw = [\" attribute=\\\"\", \"\\\"\"], xml(_c, supports.attribute));\n    }\n    if (defined(supports.value)) {\n        attribs += (_d = [\" value=\\\"\", \"\\\"\"], _d.raw = [\" value=\\\"\", \"\\\"\"], xml(_d, supports.value));\n    }\n    return (_e = [\"<supports\", \" />\"], _e.raw = [\"<supports\", \" />\"], dangerous(_e, attribs));\n    var _a, _b, _c, _d, _e;\n}\nfunction sourceToXML(source) {\n    // <!ELEMENT source (#PCDATA)>\n    return (_a = [\"<source>\", \"</source>\"], _a.raw = [\"<source>\", \"</source>\"], xml(_a, source));\n    var _a;\n}\nfunction relationToXML(relation) {\n    // <!ELEMENT relation (#PCDATA)>\n    // <!ATTLIST relation\n    //     type CDATA #IMPLIED\n    // >\n    var attribs = \"\";\n    if (relation.type) {\n        attribs += (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, relation.type));\n    }\n    var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, relation.data));\n    return (_c = [\"<relation\", \">\", \"</relation>\"], _c.raw = [\"<relation\", \">\", \"</relation>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction miscellaneousToXML(miscellaneous) {\n    // <!ELEMENT miscellaneous (miscellaneous-field*)>\n    var children = miscellaneous.miscellaneousFields.map(function (field) { return miscellaneousFieldToXML(field); });\n    return (_a = [\"<miscellaneous>\\n\", \"\\n</miscellaneous>\"], _a.raw = [\"<miscellaneous>\\\\n\", \"\\\\n</miscellaneous>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction miscellaneousFieldToXML(field) {\n    // <!ELEMENT miscellaneous-field (#PCDATA)>\n    // <!ATTLIST miscellaneous-field\n    //     name CDATA #REQUIRED\n    // >\n    return (_a = [\"<miscellaneous-field name=\\\"\", \"\\\">\", \"</miscellaneous-field>\"], _a.raw = [\"<miscellaneous-field name=\\\"\", \"\\\">\", \"</miscellaneous-field>\"], xml(_a, field.name, field.data || \"\"));\n    var _a;\n}\nfunction defaultsToXML(defaults) {\n    // <!ELEMENT defaults (scaling?, page-layout?,\n    //     system-layout?, staff-layout*, appearance?,\n    //     music-font?, word-font?, lyric-font*, lyric-language*)>\n    var children = [];\n    if (defined(defaults.scaling)) {\n        children.push(scalingToXML(defaults.scaling));\n    }\n    if (defined(defaults.pageLayout)) {\n        children.push(pageLayoutToXML(defaults.pageLayout));\n    }\n    if (defined(defaults.systemLayout)) {\n        children.push(systemLayoutToXML(defaults.systemLayout));\n    }\n    if (defined(defaults.appearance)) {\n        children.push(appearanceToXML(defaults.appearance));\n    }\n    if (defined(defaults.musicFont)) {\n        children.push(musicFontToXML(defaults.musicFont));\n    }\n    if (defined(defaults.wordFont)) {\n        children.push(wordFontToXML(defaults.wordFont));\n    }\n    (defaults.lyricFonts || []).forEach(function (lyricFont) {\n        children.push(lyricFontToXML(lyricFont));\n    });\n    (defaults.lyricLanguages || []).forEach(function (lyricLanguage) {\n        children.push(lyricLanguageToXML(lyricLanguage));\n    });\n    return (_a = [\"<defaults>\\n\", \"\\n</defaults>\"], _a.raw = [\"<defaults>\\\\n\", \"\\\\n</defaults>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction musicFontToXML(musicFont) {\n    // <!ELEMENT music-font EMPTY>\n    // <!ATTLIST music-font\n    //     %font;\n    // >\n    return (_a = [\"<music-font\", \" />\"], _a.raw = [\"<music-font\", \" />\"], dangerous(_a, fontToXML(musicFont)));\n    var _a;\n}\nfunction wordFontToXML(wordFont) {\n    // <!ELEMENT word-font EMPTY>\n    // <!ATTLIST word-font\n    //     %font;\n    // >\n    return (_a = [\"<word-font\", \" />\"], _a.raw = [\"<word-font\", \" />\"], dangerous(_a, fontToXML(wordFont)));\n    var _a;\n}\nfunction lyricFontToXML(lyricFont) {\n    // <!ELEMENT lyric-font EMPTY>\n    // <!ATTLIST lyric-font\n    //     number NMTOKEN #IMPLIED\n    //     name CDATA #IMPLIED\n    //     %font;\n    // >\n    return (_a = [\"<lyric-font\", \" />\"], _a.raw = [\"<lyric-font\", \" />\"], dangerous(_a, numberLevelToXML(lyricFont) +\n        nameToXML(lyricFont) +\n        fontToXML(lyricFont)));\n    var _a;\n}\nfunction lyricLanguageToXML(lyricLanguage) {\n    // <!ELEMENT lyric-language EMPTY>\n    // <!ATTLIST lyric-language\n    //     number NMTOKEN #IMPLIED\n    //     name CDATA #IMPLIED\n    //     xml:lang NMTOKEN #REQUIRED TODO musicxml-interfaces\n    // >\n    return (_a = [\"<lyric-language\", \" />\"], _a.raw = [\"<lyric-language\", \" />\"], dangerous(_a, numberLevelToXML(lyricLanguage) +\n        nameToXML(lyricLanguage)));\n    var _a;\n}\nfunction creditToXML(credit) {\n    // <!ELEMENT credit\n    //     (credit-type*, link*, bookmark*,\n    //     (credit-image |\n    //      (credit-words, (link*, bookmark*, credit-words)*)))>\n    // <!ATTLIST credit\n    //     page NMTOKEN #IMPLIED\n    // >\n    var attributes = \"\";\n    var children = [];\n    (credit.creditTypes || []).forEach(function (creditType) {\n        children.push(creditTypeToXML(creditType));\n    });\n    // credit.links.forEach(link => { // TODO: missing in musicxml-interfaces\n    //     children.push(linkToXML(link));\n    // });\n    // credit.bookmarks.forEach(bookmark => { // TODO: missing in musicxml-interfaces\n    //     children.push(bookmarkToXML(bookmark));\n    // });\n    if (defined(credit.creditImage)) {\n        children.push(creditImageToXML(credit.creditImage));\n    }\n    (credit.creditWords || []).forEach(function (words) {\n        children.push(creditWordsToXML(words));\n    });\n    if (defined(credit.page)) {\n        attributes += (_a = [\" page=\\\"\", \"\\\"\"], _a.raw = [\" page=\\\"\", \"\\\"\"], xml(_a, credit.page));\n    }\n    return (_b = [\"<credit\", \">\\n\", \"\\n</credit>\"], _b.raw = [\"<credit\", \">\\\\n\", \"\\\\n</credit>\"], dangerous(_b, attributes, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction creditTypeToXML(creditType) {\n    // <!ELEMENT credit-type (#PCDATA)>\n    return (_a = [\"<credit-type>\", \"</credit-type>\"], _a.raw = [\"<credit-type>\", \"</credit-type>\"], xml(_a, creditType));\n    var _a;\n}\nfunction creditWordsToXML(creditWords) {\n    // <!ELEMENT credit-words (#PCDATA)>\n    // <!ATTLIST credit-words\n    //     %text-formatting;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, creditWords.words));\n    return (_b = [\"<credit-words\", \">\", \"</credit-words>\"], _b.raw = [\"<credit-words\", \">\", \"</credit-words>\"], dangerous(_b, textFormattingToXML(creditWords), pcdata));\n    var _a, _b;\n}\nfunction creditImageToXML(creditImage) {\n    // <!ELEMENT credit-image EMPTY>\n    // <!ATTLIST credit-image\n    //     source CDATA #REQUIRED\n    //     type CDATA #REQUIRED\n    //     %position;\n    //     %halign;\n    //     %valign-image;\n    // >\n    var attribs = \"\";\n    if (defined(creditImage.source)) {\n        attribs += (_a = [\" credit-image=\\\"\", \"\\\"\"], _a.raw = [\" credit-image=\\\"\", \"\\\"\"], xml(_a, creditImage.source));\n    }\n    if (defined(creditImage.type)) {\n        attribs += (_b = [\" type=\\\"\", \"\\\"\"], _b.raw = [\" type=\\\"\", \"\\\"\"], xml(_b, creditImage.type));\n    }\n    attribs += positionToXML(creditImage) +\n        halignToXML(creditImage) +\n        valignImageToXML(creditImage);\n    return (_c = [\"<credit-image\", \" />\"], _c.raw = [\"<credit-image\", \" />\"], dangerous(_c, attribs));\n    var _a, _b, _c;\n}\nvar topMiddleBottomBaselineToXML = {\n    0: \"top\",\n    1: \"middle\",\n    3: \"baseline\",\n    2: \"bottom\"\n};\nfunction valignImageToXML(valignImage) {\n    // <!ENTITY % valign-image\n    //     \"valign (top | middle | bottom) #IMPLIED\">\n    if (defined(valignImage.valignImage)) {\n        return (_a = [\" valign=\\\"\", \"\\\"\"], _a.raw = [\" valign=\\\"\", \"\\\"\"], xml(_a, topMiddleBottomBaselineToXML[valignImage.valignImage]));\n    }\n    return \"\";\n    var _a;\n}\nfunction partListToXML(partList) {\n    // <!ELEMENT part-list (part-group*, score-part,\n    //     (part-group | score-part)*)>\n    var children = [];\n    partList.forEach(function (partGroupOrScorePart) {\n        if (partGroupOrScorePart._class === 'PartGroup') {\n            children.push(partGroupToXML(partGroupOrScorePart));\n        }\n        else if (partGroupOrScorePart._class === 'ScorePart') {\n            children.push(scorePartToXML(partGroupOrScorePart));\n        }\n        else {\n            console.warn(\"Unknwn type for\", partGroupOrScorePart);\n        }\n    });\n    return (_a = [\"<part-list>\\n\", \"\\n</part-list>\"], _a.raw = [\"<part-list>\\\\n\", \"\\\\n</part-list>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction scorePartToXML(scorePart) {\n    // <!ELEMENT score-part (identification?,\n    //     part-name, part-name-display?,\n    //     part-abbreviation?, part-abbreviation-display?,\n    //     group*, score-instrument*,\n    //     (midi-device?, midi-instrument?)*)>\n    // <!ATTLIST score-part\n    //     id ID #REQUIRED\n    // >\n    var children = [];\n    var attribs = \"\";\n    if (defined(scorePart.identification)) {\n        children.push(identificationToXML(scorePart.identification));\n    }\n    if (defined(scorePart.partName)) {\n        children.push(partNameToXML(scorePart.partName));\n    }\n    if (defined(scorePart.partNameDisplay)) {\n        children.push(partNameDisplayToXML(scorePart.partNameDisplay));\n    }\n    if (defined(scorePart.partAbbreviation)) {\n        children.push(partAbbreviationToXML(scorePart.partAbbreviation));\n    }\n    if (defined(scorePart.partAbbreviationDisplay)) {\n        children.push(partAbbreviationDisplayToXML(scorePart.partAbbreviationDisplay));\n    }\n    (scorePart.groups || []).forEach(function (group) {\n        children.push((_a = [\"<group>\", \"</group>\"], _a.raw = [\"<group>\", \"</group>\"], xml(_a, group)));\n        var _a;\n    });\n    (scorePart.scoreInstruments || []).forEach(function (scoreInstrument) {\n        children.push(scoreInstrumentToXML(scoreInstrument));\n    });\n    // Is it okay if there are different numbers of devices and instruments?\n    (scorePart.midiDevices || []).forEach(function (device, idx) {\n        children.push(midiDeviceToXML(device));\n        if (scorePart.midiInstruments[idx]) {\n            children.push(midiInstrumentToXML(scorePart.midiInstruments[idx]));\n        }\n    });\n    if (defined(scorePart.id)) {\n        attribs += (_a = [\" id=\\\"\", \"\\\"\"], _a.raw = [\" id=\\\"\", \"\\\"\"], xml(_a, scorePart.id));\n    }\n    return (_b = [\"<score-part\", \">\\n\", \"\\n</score-part>\"], _b.raw = [\"<score-part\", \">\\\\n\", \"\\\\n</score-part>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction partNameToXML(partName) {\n    // <!ELEMENT part-name (#PCDATA)>\n    // <!ATTLIST part-name\n    //     %print-style;\n    //     %print-object;\n    //     %justify;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, partName.partName));\n    return (_b = [\"<part-name\", \">\", \"</part-name>\"], _b.raw = [\"<part-name\", \">\", \"</part-name>\"], dangerous(_b, printStyleToXML(partName) +\n        printObjectToXML(partName) +\n        justifyToXML(partName), pcdata));\n    var _a, _b;\n}\nfunction partNameDisplayToXML(partNameDisplay) {\n    // <!ELEMENT part-name-display\n    //     ((display-text | accidental-text)*)>\n    // <!ATTLIST part-name-display\n    //     %print-object;\n    // >\n    return (_a = [\"<part-name-display\", \">\\n\", \"</part-name-display>\"], _a.raw = [\"<part-name-display\", \">\\\\n\", \"</part-name-display>\"], dangerous(_a, printObjectToXML(partNameDisplay), textArrayToXML(partNameDisplay.name).join(\"\\n\")\n        .split(\"\\n\").map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction partAbbreviationToXML(abbreviation) {\n    // <!ELEMENT part-abbreviation (#PCDATA)>\n    // <!ATTLIST part-abbreviation\n    //     %print-style;\n    //     %print-object;\n    //     %justify;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, abbreviation.abbreviation));\n    return (_b = [\"<part-abbreviation\", \">\", \"</part-abbreviation>\"], _b.raw = [\"<part-abbreviation\", \">\", \"</part-abbreviation>\"], dangerous(_b, printStyleToXML(abbreviation) +\n        printObjectToXML(abbreviation) +\n        justifyToXML(abbreviation), pcdata));\n    var _a, _b;\n}\nfunction partAbbreviationDisplayToXML(partAbbreviationDisplay) {\n    // <!ELEMENT part-abbreviation-display\n    //     ((display-text | accidental-text)*)>\n    // <!ATTLIST part-abbreviation-display\n    //     %print-object;\n    // >\n    return (_a = [\"<part-abbreviation-display\", \">\", \"</part-abbreviation-display>\"], _a.raw = [\"<part-abbreviation-display\", \">\", \"</part-abbreviation-display>\"], dangerous(_a, printObjectToXML(partAbbreviationDisplay), textArrayToXML(partAbbreviationDisplay.name).join(\"\\n\")\n        .split(\"\\n\").map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction textArrayToXML(texts) {\n    return texts.map(function (text) {\n        if (text.acc) {\n            return (_a = [\"<accidental-text\", \"\"], _a.raw = [\"<accidental-text\", \"\"], dangerous(_a, textFormattingToXML(text.acc))) +\n                (_b = [\">\", \"</accidental-text>\"], _b.raw = [\">\", \"</accidental-text>\"], xml(_b, text.acc.text));\n        }\n        else if (text.text) {\n            return (_c = [\"<display-text\", \"\"], _c.raw = [\"<display-text\", \"\"], dangerous(_c, textFormattingToXML(text.text))) +\n                (_d = [\">\", \"</display-text>\"], _d.raw = [\">\", \"</display-text>\"], xml(_d, text.text.text));\n        }\n        else {\n            throw \"Unknown type \" + text;\n        }\n        var _a, _b, _c, _d;\n    });\n}\nfunction midiDeviceToXML(midiDevice) {\n    // <!ELEMENT midi-device (#PCDATA)>\n    // <!ATTLIST midi-device\n    //     port CDATA #IMPLIED\n    //     id IDREF #IMPLIED\n    // >\n    var attribs = \"\";\n    if (defined(midiDevice.port)) {\n        attribs += (_a = [\" port=\\\"\", \"\\\"\"], _a.raw = [\" port=\\\"\", \"\\\"\"], xml(_a, midiDevice.port));\n    }\n    if (defined(midiDevice.id)) {\n        attribs += (_b = [\" id=\\\"\", \"\\\"\"], _b.raw = [\" id=\\\"\", \"\\\"\"], xml(_b, midiDevice.id));\n    }\n    var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, midiDevice.deviceName || \"\"));\n    return (_d = [\"<midi-device\", \">\", \"</midi-device>\"], _d.raw = [\"<midi-device\", \">\", \"</midi-device>\"], dangerous(_d, attribs, pcdata));\n    var _a, _b, _c, _d;\n}\nfunction midiInstrumentToXML(midiInstrument) {\n    // <!ELEMENT midi-instrument\n    //     (midi-channel?, midi-name?, midi-bank?, midi-program?,\n    //      midi-unpitched?, volume?, pan?, elevation?)>\n    // <!ATTLIST midi-instrument\n    //     id IDREF #REQUIRED\n    // >\n    var children = [];\n    var attribs = \"\";\n    if (defined(midiInstrument.midiChannel)) {\n        // <!ELEMENT midi-channel (#PCDATA)>\n        children.push((_a = [\"<midi-channel>\", \"</midi-channel>\"], _a.raw = [\"<midi-channel>\", \"</midi-channel>\"], xml(_a, midiInstrument.midiChannel)));\n    }\n    if (defined(midiInstrument.midiName)) {\n        // <!ELEMENT midi-name (#PCDATA)>\n        children.push((_b = [\"<midi-name>\", \"</midi-name>\"], _b.raw = [\"<midi-name>\", \"</midi-name>\"], xml(_b, midiInstrument.midiName)));\n    }\n    if (defined(midiInstrument.midiBank)) {\n        // <!ELEMENT midi-bank (#PCDATA)>\n        children.push((_c = [\"<midi-bank>\", \"</midi-bank>\"], _c.raw = [\"<midi-bank>\", \"</midi-bank>\"], xml(_c, midiInstrument.midiBank)));\n    }\n    if (defined(midiInstrument.midiProgram)) {\n        // <!ELEMENT midi-program (#PCDATA)>\n        children.push((_d = [\"<midi-program>\", \"</midi-program>\"], _d.raw = [\"<midi-program>\", \"</midi-program>\"], xml(_d, midiInstrument.midiProgram)));\n    }\n    if (defined(midiInstrument.midiUnpitched)) {\n        // <!ELEMENT midi-unpitched (#PCDATA)>\n        children.push((_e = [\"<midi-unpitched>\", \"</midi-unpitche>\"], _e.raw = [\"<midi-unpitched>\", \"</midi-unpitche>\"], xml(_e, midiInstrument.midiUnpitched)));\n    }\n    if (defined(midiInstrument.volume)) {\n        // <!ELEMENT volume (#PCDATA)>\n        children.push((_f = [\"<volume>\", \"</volume>\"], _f.raw = [\"<volume>\", \"</volume>\"], xml(_f, midiInstrument.volume)));\n    }\n    if (defined(midiInstrument.pan)) {\n        // <!ELEMENT pan (#PCDATA)>\n        children.push((_g = [\"<pan>\", \"</pan>\"], _g.raw = [\"<pan>\", \"</pan>\"], xml(_g, midiInstrument.pan)));\n    }\n    if (defined(midiInstrument.elevation)) {\n        // <!ELEMENT elevation (#PCDATA)>\n        children.push((_h = [\"<elevation>\", \"</elevation>\"], _h.raw = [\"<elevation>\", \"</elevation>\"], xml(_h, midiInstrument.elevation)));\n    }\n    if (defined(midiInstrument.id)) {\n        attribs += (_j = [\" id=\\\"\", \"\\\"\"], _j.raw = [\" id=\\\"\", \"\\\"\"], xml(_j, midiInstrument.id));\n    }\n    return (_k = [\"<midi-instrument\", \">\\n\", \"\\n</midi-instrument>\"], _k.raw = [\"<midi-instrument\", \">\\\\n\", \"\\\\n</midi-instrument>\"], dangerous(_k, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n}\nfunction scoreInstrumentToXML(scoreInstrument) {\n    // <!ELEMENT score-instrument\n    //     (instrument-name, instrument-abbreviation?,\n    //      instrument-sound?, (solo | ensemble)?,\n    //      virtual-instrument?)>\n    // <!ATTLIST score-instrument\n    //     id ID #REQUIRED\n    // >\n    var children = [];\n    var attribs = (_a = [\" id=\\\"\", \"\\\"\"], _a.raw = [\" id=\\\"\", \"\\\"\"], xml(_a, scoreInstrument.id));\n    if (defined(scoreInstrument.instrumentName)) {\n        // <!ELEMENT instrument-name (#PCDATA)>\n        children.push((_b = [\"<instrument-name>\", \"</instrument-name>\"], _b.raw = [\"<instrument-name>\", \"</instrument-name>\"], xml(_b, scoreInstrument.instrumentName)));\n    }\n    if (defined(scoreInstrument.instrumentAbbreviation)) {\n        // <!ELEMENT instrument-abbreviation (#PCDATA)>\n        children.push((_c = [\"<instrument-abbreviation>\", \"</instrument-abbreviation>\"], _c.raw = [\"<instrument-abbreviation>\", \"</instrument-abbreviation>\"], xml(_c, scoreInstrument.instrumentAbbreviation)));\n    }\n    if (defined(scoreInstrument.instrumentSound)) {\n        // <!ELEMENT instrument-sound (#PCDATA)>\n        children.push((_d = [\"<instrument-sound>\", \"</instrument-sound>\"], _d.raw = [\"<instrument-sound>\", \"</instrument-sound>\"], xml(_d, scoreInstrument.instrumentSound)));\n    }\n    if (scoreInstrument.solo) {\n        // <!ELEMENT solo EMPTY>\n        children.push((_e = [\"<solo />\"], _e.raw = [\"<solo />\"], xml(_e)));\n    }\n    if (defined(scoreInstrument.ensemble)) {\n        // <!ELEMENT ensemble (#PCDATA)>\n        children.push((_f = [\"<ensemble>\", \"</ensemble>\"], _f.raw = [\"<ensemble>\", \"</ensemble>\"], xml(_f, scoreInstrument.ensemble)));\n    }\n    if (defined(scoreInstrument.virtualInstrument)) {\n        // <!ELEMENT virtual-instrument\n        //     (virtual-library?, virtual-name?)>\n        var vChildren = [];\n        var v = scoreInstrument.virtualInstrument;\n        if (defined(v.virtualLibrary)) {\n            // <!ELEMENT virtual-library (#PCDATA)>\n            vChildren.push((_g = [\"<virtual-library>\", \"</virtual-library>\"], _g.raw = [\"<virtual-library>\", \"</virtual-library>\"], xml(_g, v.virtualLibrary)));\n        }\n        if (defined(v.virtualName)) {\n            // <!ELEMENT virtual-name (#PCDATA)>\n            vChildren.push((_h = [\"<virtual-name>\", \"</virtual-name>\"], _h.raw = [\"<virtual-name>\", \"</virtual-name>\"], xml(_h, v.virtualName)));\n        }\n        children.push((_j = [\"<virtual-instrument>\\n\", \"\\n</virtual-instrument>\"], _j.raw = [\"<virtual-instrument>\\\\n\", \"\\\\n</virtual-instrument>\"], dangerous(_j, vChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    return (_k = [\"<score-instrument\", \">\\n\", \"\\n</score-instrument>\"], _k.raw = [\"<score-instrument\", \">\\\\n\", \"\\\\n</score-instrument>\"], dangerous(_k, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n}\nfunction partGroupToXML(partGroup) {\n    // <!ELEMENT part-group (group-name?, group-name-display?,\n    //     group-abbreviation?, group-abbreviation-display?,\n    //     group-symbol?, group-barline?, group-time?, %editorial;)>\n    // <!ATTLIST part-group\n    //     type %start-stop; #REQUIRED\n    //     number CDATA \"1\"\n    // >\n    // <!ELEMENT group-time EMPTY>\n    var children = [];\n    var attribs = \"\" +\n        startStopToXML(partGroup) +\n        numberLevelToXML(partGroup);\n    if (defined(partGroup.groupName)) {\n        children.push(groupNameToXML(partGroup.groupName));\n    }\n    if (defined(partGroup.groupNameDisplay)) {\n        children.push(groupNameDisplayToXML(partGroup.groupNameDisplay));\n    }\n    if (defined(partGroup.groupAbbreviation)) {\n        children.push(groupAbbreviationToXML(partGroup.groupAbbreviation));\n    }\n    if (defined(partGroup.groupAbbreviationDisplay)) {\n        children.push(groupAbbreviationDisplayToXML(partGroup.groupAbbreviationDisplay));\n    }\n    if (defined(partGroup.groupSymbol)) {\n        children.push(groupSymbolToXML(partGroup.groupSymbol));\n    }\n    if (defined(partGroup.groupBarline)) {\n        children.push(groupBarlineToXML(partGroup.groupBarline));\n    }\n    if (!!partGroup.groupTime) {\n        children.push((_a = [\"<group-time />\"], _a.raw = [\"<group-time />\"], xml(_a)));\n    }\n    children = children.concat(editorialToXML(partGroup));\n    return (_b = [\"<part-group\", \">\\n\", \"\\n</part-group>\"], _b.raw = [\"<part-group\", \">\\\\n\", \"\\\\n</part-group>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction groupNameToXML(groupName) {\n    // <!ELEMENT group-name (#PCDATA)>\n    // <!ATTLIST group-name\n    //     %print-style;\n    //     %justify;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, groupName.name));\n    return (_b = [\"<group-name\", \">\", \"</group-name>\"], _b.raw = [\"<group-name\", \">\", \"</group-name>\"], dangerous(_b, printStyleToXML(groupName) +\n        justifyToXML(groupName), pcdata));\n    var _a, _b;\n}\nfunction groupNameDisplayToXML(groupNameDisplay) {\n    // <!ELEMENT group-name-display\n    //     ((display-text | accidental-text)*)>\n    // <!ATTLIST group-name-display\n    //     %print-object;\n    // >\n    return \"\"; // TODO: bug in musicxml-interfaces\n    // return dangerous `<group-name-display${\n    //     printObjectToXML(groupNameDisplay)}>${\n    //         textArrayToXML(groupNameDisplay.name).join(\"\\n\")\n    //         .split(\"\\n\").map(n => \"  \" + n).join(\"\\n\")}</group-name-display>`;\n}\nfunction groupAbbreviationToXML(groupAbbreviation) {\n    // <!ELEMENT group-abbreviation (#PCDATA)>\n    // <!ATTLIST group-abbreviation\n    //     %print-style;\n    //     %justify;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, groupAbbreviation.text));\n    return (_b = [\"<group-abbreviation\", \">\", \"</group-abbreviation>\"], _b.raw = [\"<group-abbreviation\", \">\", \"</group-abbreviation>\"], dangerous(_b, printStyleToXML(groupAbbreviation) +\n        justifyToXML(groupAbbreviation), pcdata));\n    var _a, _b;\n}\nfunction groupAbbreviationDisplayToXML(groupAbbreviationDisplay) {\n    // <!ELEMENT group-abbreviation-display\n    //     ((display-text | accidental-text)*)>\n    // <!ATTLIST group-abbreviation-display\n    //     %print-object;\n    // >\n    return \"\"; // TODO: bug in musicxml-interfaces\n    // return dangerous `<group-name-display${\n    //     printObjectToXML(groupNameDisplay)}>${\n    //         textArrayToXML(groupNameDisplay.name).join(\"\\n\")\n    //         .split(\"\\n\").map(n => \"  \" + n).join(\"\\n\")}</group-name-display>`;\n}\nfunction groupSymbolToXML(groupSymbol) {\n    // <!ELEMENT group-symbol (#PCDATA)>\n    // <!ATTLIST group-symbol\n    //     %position;\n    //     %color;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, groupSymbol.data));\n    return (_b = [\"<group-symbol\", \">\", \"</group-symbol>\"], _b.raw = [\"<group-symbol\", \">\", \"</group-symbol>\"], dangerous(_b, positionToXML(groupSymbol) +\n        colorToXML(groupSymbol), pcdata));\n    var _a, _b;\n}\nfunction groupBarlineToXML(groupBarline) {\n    // <!ELEMENT group-barline (#PCDATA)>\n    // <!ATTLIST group-barline\n    //     %color;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, groupBarline.data));\n    return (_b = [\"<group-barline\", \">\", \"</group-barline>\"], _b.raw = [\"<group-barline\", \">\", \"</group-barline>\"], dangerous(_b, colorToXML(groupBarline), pcdata));\n    var _a, _b;\n}\nfunction scoreHeaderToXML(header) {\n    // <!ENTITY % score-header\n    // \"(work?, movement-number?, movement-title?,\n    // identification?, defaults?, credit*, part-list)\">\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(header));\n    if (defined(header.work)) {\n        children.push(workToXML(header.work));\n    }\n    if (defined(header.movementNumber)) {\n        children.push(movementNumberToXML(header.movementNumber));\n    }\n    if (defined(header.movementTitle)) {\n        children.push(movementTitleToXML(header.movementTitle));\n    }\n    if (defined(header.identification)) {\n        children.push(identificationToXML(header.identification));\n    }\n    if (defined(header.defaults)) {\n        children.push(defaultsToXML(header.defaults));\n    }\n    (header.credits || []).forEach(function (credit) {\n        children.push(creditToXML(credit));\n    });\n    if (defined(header.partList)) {\n        children.push(partListToXML(header.partList));\n    }\n    return children;\n}\nfunction backupToXML(backup) {\n    // <!ELEMENT backup (duration, %editorial;)>\n    var children = [];\n    children.push((_a = [\"<duration>\", \"</duration>\"], _a.raw = [\"<duration>\", \"</duration>\"], xml(_a, backup.duration)));\n    children = children.concat(editorialToXML(backup));\n    return (_b = [\"<backup>\\n\", \"\\n</backup>\"], _b.raw = [\"<backup>\\\\n\", \"\\\\n</backup>\"], dangerous(_b, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction forwardToXML(forward) {\n    // <!ELEMENT forward\n    //     (duration, %editorial-voice;, staff?)>\n    var children = [];\n    children.push((_a = [\"<duration>\", \"</duration>\"], _a.raw = [\"<duration>\", \"</duration>\"], xml(_a, forward.duration)));\n    children = children.concat(editorialVoiceToXML(forward));\n    if (forward.staff) {\n        children.push((_b = [\"<staff>\", \"</staff>\"], _b.raw = [\"<staff>\", \"</staff>\"], xml(_b, forward.staff)));\n    }\n    return (_c = [\"<forward>\\n\", \"\\n</forward>\"], _c.raw = [\"<forward>\\\\n\", \"\\\\n</forward>\"], dangerous(_c, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nfunction groupingToXML(grouping) {\n    // <!ELEMENT grouping ((feature)*)>\n    // <!ATTLIST grouping\n    //     type %start-stop-single; #REQUIRED\n    //     number CDATA \"1\"\n    //     member-of CDATA #IMPLIED\n    // >\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(grouping));\n    (grouping.features || []).forEach(function (feature) {\n        // <!ELEMENT feature (#PCDATA)>\n        // <!ATTLIST feature\n        //     type CDATA #IMPLIED\n        // >\n        var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, feature.data));\n        var attribs = \"\";\n        if (defined(feature.type)) {\n            attribs += (_b = [\" type=\\\"\", \"\\\"\"], _b.raw = [\" type=\\\"\", \"\\\"\"], xml(_b, feature.type));\n        }\n        children.push((_c = [\"<grouping\", \">\", \"</grouping>\"], _c.raw = [\"<grouping\", \">\", \"</grouping>\"], dangerous(_c, attribs, pcdata)));\n        var _a, _b, _c;\n    });\n    var attribs = \"\" +\n        startStopSingleToXML(grouping) +\n        numberLevelToXML(grouping);\n    if (defined(grouping.memberOf)) {\n        attribs += (_a = [\" member-of=\\\"\", \"\\\"\"], _a.raw = [\" member-of=\\\"\", \"\\\"\"], xml(_a, grouping.memberOf));\n    }\n    return (_b = [\"<grouping\", \">\\n\", \"\\n</grouping>\"], _b.raw = [\"<grouping\", \">\\\\n\", \"\\\\n</grouping>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction harmonyToXML(harmony) {\n    // <!ENTITY % harmony-chord \"((root | function), kind,\n    //     inversion?, bass?, degree*)\">\n    // \n    // <!ELEMENT harmony ((%harmony-chord;)+, frame?,\n    //     offset?, %editorial;, staff?)>\n    // <!ATTLIST harmony\n    //     type (explicit | implied | alternate) #IMPLIED\n    //     %print-object;\n    //     print-frame  %yes-no; #IMPLIED\n    //     %print-style;\n    //     %placement;\n    // >\n    var attribs = \"\" +\n        explicitImpliedAlternateToXML(harmony) +\n        printObjectToXML(harmony);\n    if (defined(harmony.printFrame)) {\n        attribs += (_a = [\" print-frame=\\\"\", \"\\\"\"], _a.raw = [\" print-frame=\\\"\", \"\\\"\"], yesNo(_a, harmony.printFrame));\n    }\n    attribs +=\n        printStyleToXML(harmony) +\n            placementToXML(harmony);\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(harmony));\n    // TODO: multiple of everything in harmony-chord!\n    if (defined(harmony.root)) {\n        children.push(rootToXML(harmony.root));\n    }\n    else if (defined(harmony.function)) {\n        children.push(functionToXML(harmony.function));\n    }\n    children.push(kindToXML(harmony.kind));\n    if (defined(harmony.inversion)) {\n        children.push(inversionToXML(harmony.inversion));\n    }\n    if (defined(harmony.bass)) {\n        children.push(bassToXML(harmony.bass));\n    }\n    (harmony.degrees || []).forEach(function (degree) {\n        children.push(degreeToXML(degree));\n    });\n    if (defined(harmony.frame)) {\n        children.push(frameToXML(harmony.frame));\n    }\n    if (defined(harmony.offset)) {\n        children.push(offsetToXML(harmony.offset));\n    }\n    children = children.concat(editorialToXML(harmony));\n    if (!isNaN(harmony.staff)) {\n        children.push((_b = [\"<staff>\", \"</staff>\"], _b.raw = [\"<staff>\", \"</staff>\"], xml(_b, harmony.staff)));\n    }\n    return (_c = [\"<harmony\", \">\\n\", \"\\n</harmony>\"], _c.raw = [\"<harmony\", \">\\\\n\", \"\\\\n</harmony>\"], dangerous(_c, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nvar eiaTypeToXML = (_a = {},\n    _a[ExplicitImpliedAlternate.Explicit] = \"explicit\",\n    _a[ExplicitImpliedAlternate.Implied] = \"implied\",\n    _a[ExplicitImpliedAlternate.Alternate] = \"alternate\",\n    _a\n);\nfunction explicitImpliedAlternateToXML(eia) {\n    if (defined(eia.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, eiaTypeToXML[eia.type]));\n    }\n    return \"\";\n    var _a;\n}\nfunction rootToXML(root) {\n    // <!ELEMENT root (root-step, root-alter?)>\n    var children = [];\n    if (defined(root.rootStep)) {\n        // <!ELEMENT root-step (#PCDATA)>\n        // <!ATTLIST root-step\n        //     text CDATA #IMPLIED\n        //     %print-style;\n        // >\n        var attribs = \"\";\n        if (defined(root.rootStep.text)) {\n            attribs += (_a = [\" text=\\\"\", \"\\\"\"], _a.raw = [\" text=\\\"\", \"\\\"\"], xml(_a, root.rootStep.text));\n        }\n        attribs += printStyleToXML(root.rootStep);\n        var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, root.rootStep.data));\n        children.push((_c = [\"<root-step\", \">\", \"</root-step>\"], _c.raw = [\"<root-step\", \">\", \"</root-step>\"], dangerous(_c, attribs, pcdata)));\n    }\n    if (defined(root.rootAlter)) {\n        // <!ELEMENT root-alter (#PCDATA)>\n        // <!ATTLIST root-alter\n        //     %print-object;\n        //     %print-style;\n        //     location %left-right; #IMPLIED\n        // >\n        var attribs = printObjectToXML(root.rootAlter) +\n            printStyleToXML(root.rootAlter);\n        if (defined(root.rootAlter.location)) {\n            attribs += (_d = [\" location=\\\"\", \"\\\"\"], _d.raw = [\" location=\\\"\", \"\\\"\"], xml(_d, root.rootAlter.location === LeftRight.Left ? \"left\" : \"right\"));\n        }\n        var pcdata = root.rootAlter.data;\n        children.push((_e = [\"<root-alter\", \">\", \"</root-alter>\"], _e.raw = [\"<root-alter\", \">\", \"</root-alter>\"], dangerous(_e, attribs, pcdata)));\n    }\n    return (_f = [\"<root>\\n\", \"\\n</root>\"], _f.raw = [\"<root>\\\\n\", \"\\\\n</root>\"], dangerous(_f, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f;\n}\nfunction functionToXML(func) {\n    // <!ELEMENT function (#PCDATA)>\n    // <!ATTLIST function\n    //     %print-style;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, func.data));\n    var attribs = printStyleToXML(func);\n    return \"<function\" + attribs + \">\" + pcdata + \"</function>\";\n    var _a;\n}\nfunction kindToXML(kind) {\n    // <!ELEMENT kind (#PCDATA)>\n    // <!ATTLIST kind\n    //     use-symbols          %yes-no;   #IMPLIED\n    //     text                 CDATA      #IMPLIED\n    //     stack-degrees        %yes-no;   #IMPLIED\n    //     parentheses-degrees  %yes-no;   #IMPLIED\n    //     bracket-degrees      %yes-no;   #IMPLIED\n    //     %print-style;\n    //     %halign;\n    //     %valign;\n    // >\n    var attribs = \"\";\n    if (defined(kind.useSymbols)) {\n        attribs += (_a = [\" kind=\\\"\", \"\\\"\"], _a.raw = [\" kind=\\\"\", \"\\\"\"], yesNo(_a, kind.useSymbols));\n    }\n    if (defined(kind.text)) {\n        attribs += (_b = [\" text=\\\"\", \"\\\"\"], _b.raw = [\" text=\\\"\", \"\\\"\"], xml(_b, kind.text));\n    }\n    if (defined(kind.stackDegrees)) {\n        attribs += (_c = [\" stack-degrees=\\\"\", \"\\\"\"], _c.raw = [\" stack-degrees=\\\"\", \"\\\"\"], yesNo(_c, kind.stackDegrees));\n    }\n    if (defined(kind.parenthesesDegrees)) {\n        attribs += (_d = [\" parentheses-degrees=\\\"\", \"\\\"\"], _d.raw = [\" parentheses-degrees=\\\"\", \"\\\"\"], yesNo(_d, kind.parenthesesDegrees));\n    }\n    attribs +=\n        printStyleToXML(kind) +\n            halignToXML(kind) +\n            valignToXML(kind);\n    var pcdata = (_e = [\"\", \"\"], _e.raw = [\"\", \"\"], xml(_e, kind.data));\n    return (_f = [\"<kind\", \">\\n\", \"</kind>\"], _f.raw = [\"<kind\", \">\\\\n\", \"</kind>\"], dangerous(_f, attribs, pcdata));\n    var _a, _b, _c, _d, _e, _f;\n}\nfunction inversionToXML(inversion) {\n    // <!ELEMENT inversion (#PCDATA)>\n    // <!ATTLIST inversion\n    //     %print-style;\n    //     >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, inversion.data));\n    var attribs = printStyleToXML(inversion);\n    return \"<inversion\" + attribs + \">\" + pcdata + \"</inversion>\";\n    var _a;\n}\nfunction bassToXML(bass) {\n    // <!ELEMENT bass (bass-step, bass-alter?)>\n    var children = [];\n    if (defined(bass.bassStep)) {\n        // <!ELEMENT bass-step (#PCDATA)>\n        // <!ATTLIST bass-step\n        //     text CDATA #IMPLIED\n        //     %print-style;\n        // >\n        var attribs = \"\";\n        if (defined(bass.bassStep.text)) {\n            attribs += (_a = [\" text=\\\"\", \"\\\"\"], _a.raw = [\" text=\\\"\", \"\\\"\"], xml(_a, bass.bassStep.text));\n        }\n        attribs += printStyleToXML(bass.bassStep);\n        var pcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, bass.bassStep.data));\n        children.push((_c = [\"<bass-step\", \">\", \"</bass-step>\"], _c.raw = [\"<bass-step\", \">\", \"</bass-step>\"], dangerous(_c, attribs, pcdata)));\n    }\n    if (defined(bass.bassAlter)) {\n        // <!ELEMENT bass-alter (#PCDATA)>\n        // <!ATTLIST bass-alter\n        //     %print-object;\n        //     %print-style;\n        //     location (left | right) #IMPLIED\n        // >\n        var attribs = printObjectToXML(bass.bassAlter) +\n            printStyleToXML(bass.bassAlter);\n        if (defined(bass.bassAlter.location)) {\n            attribs += (_d = [\" location=\\\"\", \"\\\"\"], _d.raw = [\" location=\\\"\", \"\\\"\"], xml(_d, bass.bassAlter.location === LeftRight.Left ? \"left\" : \"right\"));\n        }\n        var pcdata = bass.bassAlter.data;\n        children.push((_e = [\"<bass-alter\", \">\", \"</bass-alter>\"], _e.raw = [\"<bass-alter\", \">\", \"</bass-alter>\"], dangerous(_e, attribs, pcdata)));\n    }\n    return (_f = [\"<bass>\\n\", \"\\n</bass>\"], _f.raw = [\"<bass>\\\\n\", \"\\\\n</bass>\"], dangerous(_f, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f;\n}\nvar chordTypeToXML = (_b = {},\n    _b[ChordType.Augmented] = \"augmented\",\n    _b[ChordType.Diminished] = \"diminished\",\n    _b[ChordType.Major] = \"major\",\n    _b[ChordType.Minor] = \"minor\",\n    _b[ChordType.HalfDiminished] = \"half-diminished\",\n    _b\n);\nfunction degreeToXML(degree) {\n    // <!ELEMENT degree (degree-value, degree-alter, degree-type)>\n    // <!ATTLIST degree\n    //     %print-object;\n    // >\n    var children = [];\n    if (defined(degree.degreeValue)) {\n        // <!ELEMENT degree-value (#PCDATA)>\n        // <!ATTLIST degree-value\n        //     symbol (major | minor | augmented |\n        //         diminished | half-diminished) #IMPLIED\n        //     text CDATA #IMPLIED\n        //     %print-style;\n        // >\n        var lattribs = \"\";\n        if (defined(degree.degreeValue.symbol)) {\n            lattribs += (_a = [\" symbol=\\\"\", \"\\\"\"], _a.raw = [\" symbol=\\\"\", \"\\\"\"], xml(_a, chordTypeToXML[degree.degreeValue.symbol]));\n        }\n        if (defined(degree.degreeValue.text)) {\n            lattribs += (_b = [\" text=\\\"\", \"\\\"\"], _b.raw = [\" text=\\\"\", \"\\\"\"], xml(_b, degree.degreeValue.text));\n        }\n        lattribs += printStyleToXML(degree.degreeValue);\n        var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, degree.degreeValue.data));\n        children.push((_d = [\"<degree-value\", \">\", \"</degree-value>\"], _d.raw = [\"<degree-value\", \">\", \"</degree-value>\"], dangerous(_d, lattribs, pcdata)));\n    }\n    if (defined(degree.degreeAlter)) {\n        // <!ELEMENT degree-alter (#PCDATA)>\n        // <!ATTLIST degree-alter\n        //     %print-style;\n        //     plus-minus %yes-no; #IMPLIED\n        // >\n        var lattribs = printStyleToXML(degree.degreeAlter);\n        if (defined(degree.degreeAlter.plusMinus)) {\n            lattribs += (_e = [\" plus-minus=\\\"\", \"\\\"\"], _e.raw = [\" plus-minus=\\\"\", \"\\\"\"], yesNo(_e, degree.degreeAlter.plusMinus));\n        }\n        var pcdata = (_f = [\"\", \"\"], _f.raw = [\"\", \"\"], xml(_f, degree.degreeAlter.data));\n        children.push((_g = [\"<degree-alter\", \">\", \"</degree-alter>\"], _g.raw = [\"<degree-alter\", \">\", \"</degree-alter>\"], dangerous(_g, lattribs, pcdata)));\n    }\n    if (defined(degree.degreeType)) {\n        // <!ELEMENT degree-type (#PCDATA)>\n        // <!ATTLIST degree-type\n        //     text CDATA #IMPLIED\n        //     %print-style;\n        // >\n        var lattribs = printStyleToXML(degree.degreeType);\n        if (defined(degree.degreeType.text)) {\n            lattribs += (_h = [\" text=\\\"\", \"\\\"\"], _h.raw = [\" text=\\\"\", \"\\\"\"], xml(_h, degree.degreeType.text));\n        }\n        var pcdata = (_j = [\"\", \"\"], _j.raw = [\"\", \"\"], xml(_j, degree.degreeType.data));\n        children.push((_k = [\"<degree-type\", \">\", \"</degree-type>\"], _k.raw = [\"<degree-type\", \">\", \"</degree-type>\"], dangerous(_k, lattribs, pcdata)));\n    }\n    var attribs = printObjectToXML(degree);\n    return (_l = [\"<degree\", \">\\n\", \"\\n</degree>\"], _l.raw = [\"<degree\", \">\\\\n\", \"\\\\n</degree>\"], dangerous(_l, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n}\nfunction frameToXML(frame) {\n    // <!ELEMENT frame\n    //     (frame-strings, frame-frets, first-fret?, frame-note+)>\n    // <!ATTLIST frame\n    //     %position;\n    //     %color;\n    //     %halign;\n    //     %valign-image;\n    //     height  %tenths;  #IMPLIED\n    //     width   %tenths;  #IMPLIED\n    //     unplayed CDATA    #IMPLIED\n    // >\n    var attribs = positionToXML(frame) +\n        colorToXML(frame) +\n        halignToXML(frame) +\n        valignImageToXML(frame);\n    if (defined(frame.height)) {\n        attribs += (_a = [\" height=\\\"\", \"\\\"\"], _a.raw = [\" height=\\\"\", \"\\\"\"], xml(_a, frame.height));\n    }\n    if (defined(frame.width)) {\n        attribs += (_b = [\" width=\\\"\", \"\\\"\"], _b.raw = [\" width=\\\"\", \"\\\"\"], xml(_b, frame.width));\n    }\n    if (defined(frame.unplayed)) {\n        attribs += (_c = [\" unplayed=\\\"\", \"\\\"\"], _c.raw = [\" unplayed=\\\"\", \"\\\"\"], xml(_c, frame.unplayed));\n    }\n    var children = [];\n    if (defined(frame.frameStrings)) {\n        // <!ELEMENT frame-strings (#PCDATA)>\n        children.push((_d = [\"<frame-strings>\", \"</frame-strings>\"], _d.raw = [\"<frame-strings>\", \"</frame-strings>\"], xml(_d, frame.frameStrings)));\n    }\n    if (defined(frame.frameFrets)) {\n        // <!ELEMENT frame-frets (#PCDATA)>\n        children.push((_e = [\"<frame-frets>\", \"</frame-frets>\"], _e.raw = [\"<frame-frets>\", \"</frame-frets>\"], xml(_e, frame.frameFrets)));\n    }\n    if (defined(frame.firstFret)) {\n        // <!ELEMENT first-fret (#PCDATA)>\n        // <!ATTLIST first-fret\n        //     text CDATA #IMPLIED\n        //     location %left-right; #IMPLIED\n        // >\n        var pcdata = (_f = [\"\", \"\"], _f.raw = [\"\", \"\"], xml(_f, frame.firstFret.data));\n        var attribs_1 = \"\";\n        if (defined(frame.firstFret.text)) {\n            attribs_1 += (_g = [\" text=\\\"\", \"\\\"\"], _g.raw = [\" text=\\\"\", \"\\\"\"], xml(_g, frame.firstFret.text));\n        }\n        if (defined(frame.firstFret.location)) {\n            attribs_1 += (_h = [\" location=\\\"\", \"\\\"\"], _h.raw = [\" location=\\\"\", \"\\\"\"], xml(_h, frame.firstFret.location === LeftRight.Left ?\n                \"left\" : \"right\"));\n        }\n    }\n    (frame.frameNotes || []).forEach(function (frameNote) {\n        // <!ELEMENT frame-note (string, fret, fingering?, barre?)>\n        var fChildren = [];\n        // <!ELEMENT string (#PCDATA)>\n        // <!ATTLIST string\n        //     %print-style;\n        //     %placement;\n        // >\n        if (defined(frameNote.string)) {\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, frameNote.string.stringNum));\n            fChildren.push((_b = [\"<string\", \">\", \"</string>\"], _b.raw = [\"<string\", \">\", \"</string>\"], dangerous(_b, printStyleToXML(frameNote.string) +\n                placementToXML(frameNote.string), pcdata)));\n        }\n        // <!ELEMENT fret (#PCDATA)>\n        // <!ATTLIST fret\n        //     %font;\n        //     %color;\n        // >\n        if (defined(frameNote.fret)) {\n            var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, frameNote.fret.fret));\n            fChildren.push((_d = [\"<fret\", \">\", \"</fret>\"], _d.raw = [\"<fret\", \">\", \"</fret>\"], dangerous(_d, fontToXML(frameNote.fret) +\n                colorToXML(frameNote.fret), pcdata)));\n        }\n        // <!ELEMENT fingering (#PCDATA)>\n        // <!ATTLIST fingering\n        //     substitution %yes-no; #IMPLIED\n        //     alternate %yes-no; #IMPLIED\n        //     %print-style;\n        //     %placement;\n        // >\n        if (defined(frameNote.fingering)) {\n            var pcdata = (_e = [\"\", \"\"], _e.raw = [\"\", \"\"], xml(_e, frameNote.fingering.finger));\n            var coreAttribs = \"\";\n            if (defined(frameNote.fingering.substitution)) {\n                coreAttribs += (_f = [\" substitution=\\\"\", \"\\\"\"], _f.raw = [\" substitution=\\\"\", \"\\\"\"], yesNo(_f, frameNote.fingering.substitution));\n            }\n            if (defined(frameNote.fingering.alternate)) {\n                coreAttribs += (_g = [\" alternate=\\\"\", \"\\\"\"], _g.raw = [\" alternate=\\\"\", \"\\\"\"], yesNo(_g, frameNote.fingering.alternate));\n            }\n            fChildren.push((_h = [\"<fingering\", \">\", \"</fingering>\"], _h.raw = [\"<fingering\", \">\", \"</fingering>\"], dangerous(_h, coreAttribs +\n                printStyleToXML(frameNote.fingering) +\n                placementToXML(frameNote.fingering), pcdata)));\n        }\n        // <!ELEMENT barre EMPTY>\n        // <!ATTLIST barre\n        //     type %start-stop; #REQUIRED\n        //     %color;\n        // >\n        if (defined(frameNote.barre)) {\n            fChildren.push((_j = [\"<barre\", \" />\"], _j.raw = [\"<barre\", \" />\"], dangerous(_j, startStopToXML(frameNote.barre) +\n                colorToXML(frameNote.barre))));\n        }\n        children.push((_k = [\"<frame-note>\\n\", \"\\n</frame-note>\"], _k.raw = [\"<frame-note>\\\\n\", \"\\\\n</frame-note>\"], dangerous(_k, fChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    });\n    return (_j = [\"<frame\", \">\\n\", \"\\n</frame>\"], _j.raw = [\"<frame\", \">\\\\n\", \"\\\\n</frame>\"], dangerous(_j, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n}\nfunction printToXML(print) {\n    // <!ELEMENT print (page-layout?, system-layout?, staff-layout*,\n    //     measure-layout?, measure-numbering?, part-name-display?,\n    //     part-abbreviation-display?)>\n    // <!ATTLIST print\n    //     staff-spacing %tenths; #IMPLIED\n    //     new-system %yes-no; #IMPLIED\n    //     new-page %yes-no; #IMPLIED\n    //     blank-page NMTOKEN #IMPLIED\n    //     page-number CDATA #IMPLIED    \n    // >\n    var attribs = \"\";\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(print));\n    if (defined(print.staffSpacing)) {\n        attribs += (_a = [\" staff-spacing=\\\"\", \"\\\"\"], _a.raw = [\" staff-spacing=\\\"\", \"\\\"\"], xml(_a, print.staffSpacing));\n    }\n    if (defined(print.newSystem)) {\n        attribs += (_b = [\" new-system=\\\"\", \"\\\"\"], _b.raw = [\" new-system=\\\"\", \"\\\"\"], yesNo(_b, print.newSystem));\n    }\n    if (defined(print.newPage)) {\n        attribs += (_c = [\" new-page=\\\"\", \"\\\"\"], _c.raw = [\" new-page=\\\"\", \"\\\"\"], yesNo(_c, print.newPage));\n    }\n    if (defined(print.blankPage)) {\n        attribs += (_d = [\" blank-page=\\\"\", \"\\\"\"], _d.raw = [\" blank-page=\\\"\", \"\\\"\"], xml(_d, print.blankPage));\n    }\n    if (defined(print.pageNumber)) {\n        attribs += (_e = [\" page-number=\\\"\", \"\\\"\"], _e.raw = [\" page-number=\\\"\", \"\\\"\"], xml(_e, print.pageNumber));\n    }\n    if (defined(print.pageLayout)) {\n        children.push(pageLayoutToXML(print.pageLayout));\n    }\n    if (defined(print.systemLayout)) {\n        children.push(systemLayoutToXML(print.systemLayout));\n    }\n    (print.staffLayouts || []).forEach(function (staffLayout) {\n        children.push(staffLayoutToXML(staffLayout));\n    });\n    if (defined(print.measureLayout)) {\n        children.push(measureLayoutToXML(print.measureLayout));\n    }\n    if (defined(print.measureNumbering)) {\n        children.push(measureNumberingToXML(print.measureNumbering));\n    }\n    if (defined(print.partNameDisplay)) {\n        children.push(partNameDisplayToXML(print.partNameDisplay));\n    }\n    if (defined(print.partAbbreviationDisplay)) {\n        children.push(partAbbreviationDisplayToXML(print.partAbbreviationDisplay));\n    }\n    return (_f = [\"<print\", \">\\n\", \"\\n</print>\"], _f.raw = [\"<print\", \">\\\\n\", \"\\\\n</print>\"], dangerous(_f, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f;\n}\nfunction soundToXML(sound) {\n    // <!ELEMENT sound ((midi-device?, midi-instrument?, play?)*,\n    //     offset?)>\n    // <!ATTLIST sound\n    //     tempo CDATA #IMPLIED\n    //     dynamics CDATA #IMPLIED\n    //     dacapo %yes-no; #IMPLIED\n    //     segno CDATA #IMPLIED\n    //     dalsegno CDATA #IMPLIED\n    //     coda CDATA #IMPLIED\n    //     tocoda CDATA #IMPLIED\n    //     divisions CDATA #IMPLIED\n    //     forward-repeat %yes-no; #IMPLIED\n    //     fine CDATA #IMPLIED\n    //     %time-only;\n    //     pizzicato %yes-no; #IMPLIED\n    //     pan CDATA #IMPLIED\n    //     elevation CDATA #IMPLIED\n    //     damper-pedal %yes-no-number; #IMPLIED\n    //     soft-pedal %yes-no-number; #IMPLIED\n    //     sostenuto-pedal %yes-no-number; #IMPLIED\n    // >\n    var children = [];\n    var attribs = \"\";\n    children = children.concat(staffDebugInfoToXMLComment(sound));\n    // TODO musicxml-interfaces: can have many midi-devices, instruments, etc.\n    (sound.midiDevices || []).forEach(function (midiDevice) {\n        children.push(midiDeviceToXML(midiDevice));\n    });\n    (sound.midiInstruments || []).forEach(function (midiInstrument) {\n        children.push(midiInstrumentToXML(midiInstrument));\n    });\n    (sound.plays || []).forEach(function (play) {\n        children.push(playToXML(play));\n    });\n    if (defined(sound.tempo)) {\n        attribs += (_a = [\" tempo=\\\"\", \"\\\"\"], _a.raw = [\" tempo=\\\"\", \"\\\"\"], xml(_a, sound.tempo));\n    }\n    if (defined(sound.dynamics)) {\n        attribs += (_b = [\" dynamics=\\\"\", \"\\\"\"], _b.raw = [\" dynamics=\\\"\", \"\\\"\"], xml(_b, sound.dynamics));\n    }\n    if (defined(sound.decapo)) {\n        attribs += (_c = [\" decapo=\\\"\", \"\\\"\"], _c.raw = [\" decapo=\\\"\", \"\\\"\"], yesNo(_c, sound.decapo));\n    }\n    if (defined(sound.segno)) {\n        attribs += (_d = [\" segno=\\\"\", \"\\\"\"], _d.raw = [\" segno=\\\"\", \"\\\"\"], xml(_d, sound.segno));\n    }\n    if (defined(sound.dalsegno)) {\n        attribs += (_e = [\" dalsegno=\\\"\", \"\\\"\"], _e.raw = [\" dalsegno=\\\"\", \"\\\"\"], xml(_e, sound.dalsegno));\n    }\n    if (defined(sound.coda)) {\n        attribs += (_f = [\" coda=\\\"\", \"\\\"\"], _f.raw = [\" coda=\\\"\", \"\\\"\"], xml(_f, sound.coda));\n    }\n    if (defined(sound.tocoda)) {\n        attribs += (_g = [\" tocoda=\\\"\", \"\\\"\"], _g.raw = [\" tocoda=\\\"\", \"\\\"\"], xml(_g, sound.tocoda));\n    }\n    if (defined(sound.divisions)) {\n        attribs += (_h = [\" divisions=\\\"\", \"\\\"\"], _h.raw = [\" divisions=\\\"\", \"\\\"\"], xml(_h, sound.divisions));\n    }\n    if (defined(sound.forwardRepeat)) {\n        attribs += (_j = [\" forward-repeat=\\\"\", \"\\\"\"], _j.raw = [\" forward-repeat=\\\"\", \"\\\"\"], yesNo(_j, sound.forwardRepeat));\n    }\n    if (defined(sound.fine)) {\n        attribs += (_k = [\" fine=\\\"\", \"\\\"\"], _k.raw = [\" fine=\\\"\", \"\\\"\"], xml(_k, sound.fine));\n    }\n    attribs += timeOnlyToXML(sound);\n    if (defined(sound.pizzicato)) {\n        attribs += (_l = [\" pizzicato=\\\"\", \"\\\"\"], _l.raw = [\" pizzicato=\\\"\", \"\\\"\"], yesNo(_l, sound.pizzicato));\n    }\n    if (defined(sound.pan)) {\n        attribs += (_m = [\" pan=\\\"\", \"\\\"\"], _m.raw = [\" pan=\\\"\", \"\\\"\"], xml(_m, sound.pan));\n    }\n    if (defined(sound.elevation)) {\n        attribs += (_o = [\" elevation=\\\"\", \"\\\"\"], _o.raw = [\" elevation=\\\"\", \"\\\"\"], xml(_o, sound.elevation));\n    }\n    if (defined(sound.damperPedal)) {\n        attribs += (_p = [\" damper-pedal=\\\"\", \"\\\"\"], _p.raw = [\" damper-pedal=\\\"\", \"\\\"\"], xml(_p, sound.damperPedal));\n    }\n    if (defined(sound.softPedal)) {\n        attribs += (_q = [\" soft-pedal=\\\"\", \"\\\"\"], _q.raw = [\" soft-pedal=\\\"\", \"\\\"\"], xml(_q, sound.softPedal));\n    }\n    if (defined(sound.sostenutoPedal)) {\n        attribs += (_r = [\" sostenuto-pedal=\\\"\", \"\\\"\"], _r.raw = [\" sostenuto-pedal=\\\"\", \"\\\"\"], xml(_r, sound.sostenutoPedal));\n    }\n    return (_s = [\"<sound\", \">\\n\", \"\\n</sound>\"], _s.raw = [\"<sound\", \">\\\\n\", \"\\\\n</sound>\"], dangerous(_s, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n}\nfunction staffDebugInfoToXMLComment(module) {\n    var comments = [];\n    if (defined(module.divCount)) {\n        comments.push((_a = [\"<!--musicxml-interfaces:debug>\\n\", \"  <div-count>\", \"</div-count>\\n\", \"</musicxml-interfaces:debug-->\"], _a.raw = [\"<!--musicxml-interfaces:debug>\\\\n\", \"  <div-count>\", \"</div-count>\\\\n\", \"</musicxml-interfaces:debug-->\"], xml(_a, \"\", module.divCount, \"\")));\n    }\n    return comments;\n    var _a;\n}\n/*\n\n      <direction placement=\"above\">\n        <direction-type>\n          <words default-y=\"15\" font-family=\"satie-meta\" relative-x=\"-13653\" xml:space=\"preserve\">\n                {\n                    \"uuid\": \"482912\"\n                }\n            </words>\n        </direction-type>\n      </direction>\n*/\nfunction directionToXML(direction) {\n    // <!ELEMENT direction (direction-type+, offset?,\n    //     %editorial-voice;, staff?, sound?)>\n    // <!ATTLIST direction\n    //     %placement;\n    //     %directive;\n    // >\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(direction));\n    (direction.directionTypes || []).forEach(function (directionType) {\n        children.push(directionTypeToXML(directionType));\n    });\n    if (defined(direction.offset)) {\n        children.push(offsetToXML(direction.offset));\n    }\n    children = children.concat(editorialVoiceToXML(direction));\n    if (defined(direction.staff)) {\n        children.push((_a = [\"<staff>\", \"</staff>\"], _a.raw = [\"<staff>\", \"</staff>\"], xml(_a, direction.staff)));\n    }\n    if (defined(direction.sound)) {\n        children.push(soundToXML(direction.sound));\n    }\n    var attribs = \"\" +\n        placementToXML(direction);\n    if (defined(direction.directive)) {\n        attribs += (_b = [\" directive=\\\"\", \"\\\"\"], _b.raw = [\" directive=\\\"\", \"\\\"\"], yesNo(_b, direction.directive));\n    }\n    return (_c = [\"<direction\", \">\\n\", \"\\n</direction>\"], _c.raw = [\"<direction\", \">\\\\n\", \"\\\\n</direction>\"], dangerous(_c, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nfunction attributesToXML(attributes) {\n    // <!ELEMENT attributes (%editorial;, divisions?, key*, time*,\n    //     staves?, part-symbol?, instruments?, clef*, staff-details*,\n    //     transpose*, directive*, measure-style*)>\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(attributes));\n    children = children.concat(editorialToXML(attributes));\n    if (defined(attributes.divisions)) {\n        // <!ELEMENT divisions (#PCDATA)>\n        children.push((_a = [\"<divisions>\", \"</divisions>\"], _a.raw = [\"<divisions>\", \"</divisions>\"], xml(_a, attributes.divisions)));\n    }\n    (attributes.keySignatures || []).forEach(function (keySignature) {\n        children.push(keyToXML(keySignature));\n    });\n    (attributes.times || []).forEach(function (time) {\n        children.push(timeToXML(time));\n    });\n    if (defined(attributes.staves)) {\n        // <!ELEMENT staves (#PCDATA)>\n        children.push((_b = [\"<staves>\", \"</staves>\"], _b.raw = [\"<staves>\", \"</staves>\"], xml(_b, attributes.staves)));\n    }\n    if (defined(attributes.partSymbol)) {\n        children.push(partSymbolToXML(attributes.partSymbol));\n    }\n    if (defined(attributes.instruments)) {\n        // <!ELEMENT instruments (#PCDATA)>\n        children.push((_c = [\"<instruments>\", \"</instruments>\"], _c.raw = [\"<instruments>\", \"</instruments>\"], xml(_c, attributes.instruments)));\n    }\n    (attributes.clefs || []).forEach(function (clef) {\n        children.push(clefToXML(clef));\n    });\n    (attributes.staffDetails || []).forEach(function (staffDetails) {\n        children.push(staffDetailsToXML(staffDetails));\n    });\n    (attributes.transposes || []).forEach(function (transpose) {\n        children.push(transposeToXML(transpose));\n    });\n    (attributes.directives || []).forEach(function (directive) {\n        children.push(directiveToXML(directive));\n    });\n    (attributes.measureStyles || []).forEach(function (measureStyle) {\n        children.push(measureStyleToXML(measureStyle));\n    });\n    return (_d = [\"<attributes>\\n\", \"\\n</attributes>\"], _d.raw = [\"<attributes>\\\\n\", \"\\\\n</attributes>\"], dangerous(_d, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d;\n}\nvar countToXML = {\n    4: \"quarter\",\n    9990: \"breve\",\n    9991: \"long\",\n    1024: \"1024th\",\n    32: \"32nd\",\n    16: \"16th\",\n    8: \"eighth\",\n    9992: \"maxima\",\n    512: \"512th\",\n    64: \"64th\",\n    256: \"256th\",\n    128: \"128th\",\n    2: \"half\",\n    1: \"whole\"\n};\nvar accidentalToXML = {\n    7: \"natural-flat\",\n    13: \"sharp-up\",\n    10: \"three-quarters-flat\",\n    11: \"three-quarters-sharp\",\n    8: \"quarter-flat\",\n    2: \"flat\",\n    18: \"triple-sharp\",\n    27: \"flat-1\",\n    28: \"flat-2\",\n    29: \"flat-3\",\n    291: \"flat-4\",\n    191: \"triple-flat\",\n    30: \"flat-5\",\n    0: \"sharp\",\n    9: \"quarter-sharp\",\n    21: \"slash-flat\",\n    16: \"flat-down\",\n    14: \"natural-down\",\n    19: \"slash-quarter-sharp\",\n    4: \"sharp-sharp\",\n    23: \"sharp-1\",\n    17: \"flat-up\",\n    24: \"sharp-2\",\n    25: \"sharp-3\",\n    3: \"double-sharp\",\n    251: \"sharp-4\",\n    26: \"sharp-5\",\n    31: \"sori\",\n    22: \"double-slash-flat\",\n    12: \"sharp-down\",\n    32: \"koron\",\n    15: \"natural-up\",\n    20: \"slash-sharp\",\n    6: \"natural-sharp\",\n    5: \"flat-flat\",\n    1: \"natural\",\n    33: \"double-flat\"\n};\nvar syllabicTypeToXML = {\n    0: \"single\",\n    1: \"begin\",\n    3: \"middle\",\n    2: \"end\"\n};\nvar breathMarkTypeToXML = {\n    0: \"comma\",\n    1: \"tick\",\n    2: \"empty\"\n};\nvar holeClosedTypeToXML = {\n    1: \"no\",\n    0: \"yes\",\n    2: \"half\"\n};\nvar holeLocationToXML = {\n    0: \"right\",\n    3: \"top\",\n    1: \"bottom\",\n    2: \"left\"\n};\nvar actualBothNoneToXML = (_c = {},\n    _c[ActualBothNone.None] = \"none\",\n    _c[ActualBothNone.Both] = \"both\",\n    _c[ActualBothNone.Actual] = \"actual\",\n    _c\n);\nvar beamTypeToXML = {\n    4: \"backward hook\",\n    0: \"begin\",\n    3: \"forward hook\",\n    1: \"continue\",\n    2: \"end\"\n};\nvar accelRitNoneToXML = {\n    0: \"accel\",\n    2: \"none\",\n    1: \"rit\"\n};\nvar noteheadTypeToXML = {\n    7: \"inverted triangle\",\n    14: \"circle dot\",\n    9: \"arrow up\",\n    18: \"do\",\n    20: \"mi\",\n    4: \"cross\",\n    0: \"slash\",\n    21: \"fa\",\n    1: \"triangle\",\n    22: \"fa up\",\n    23: \"so\",\n    15: \"left triangle\",\n    11: \"back slashed\",\n    17: \"none\",\n    24: \"la\",\n    10: \"slashed\",\n    12: \"normal\",\n    13: \"cluster\",\n    25: \"ti\",\n    19: \"re\",\n    16: \"rectangle\",\n    3: \"square\",\n    8: \"arrow down\",\n    5: \"x\",\n    2: \"diamond\",\n    6: \"circle x\"\n};\nvar stemToXML = {\n    2: \"none\",\n    3: \"double\",\n    0: \"down\",\n    1: \"up\"\n};\nfunction measureToXML(measure) {\n    // <!ATTLIST measure\n    //     number CDATA #REQUIRED\n    //     implicit %yes-no; #IMPLIED\n    //     non-controlling %yes-no; #IMPLIED\n    //     width %tenths; #IMPLIED\n    // >\n    // <!ELEMENT measure (part+)>\n    var attribs = \"\";\n    if (defined(measure.number)) {\n        attribs += (_a = [\" number=\\\"\", \"\\\"\"], _a.raw = [\" number=\\\"\", \"\\\"\"], xml(_a, measure.number));\n    }\n    if (defined(measure.implicit)) {\n        attribs += (_b = [\" implicit=\\\"\", \"\\\"\"], _b.raw = [\" implicit=\\\"\", \"\\\"\"], yesNo(_b, measure.implicit));\n    }\n    if (defined(measure.nonControlling)) {\n        attribs += (_c = [\" non-controlling=\\\"\", \"\\\"\"], _c.raw = [\" non-controlling=\\\"\", \"\\\"\"], yesNo(_c, measure.nonControlling));\n    }\n    if (defined(measure.width)) {\n        attribs += (_d = [\" width=\\\"\", \"\\\"\"], _d.raw = [\" width=\\\"\", \"\\\"\"], xml(_d, measure.width));\n    }\n    var elements = [];\n    for (var key in measure.parts) {\n        elements.push(partToXML(measure.parts[key], key));\n    }\n    return (_e = [\"<measure\", \">\\n\", \"\\n</measure>\"], _e.raw = [\"<measure\", \">\\\\n\", \"\\\\n</measure>\"], dangerous(_e, attribs, elements.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e;\n}\nfunction partToXML(part, id) {\n    // <!ELEMENT part (%music-data;)>\n    // <!ATTLIST part\n    //     id IDREF #REQUIRED\n    // >\n    var attribs = (_a = [\" id=\\\"\", \"\\\"\"], _a.raw = [\" id=\\\"\", \"\\\"\"], xml(_a, id));\n    // <!ENTITY % music-data\n    //     \"(note | backup | forward | direction | attributes |\n    //       harmony | figured-bass | print | sound | barline |\n    //       grouping | link | bookmark)*\">\n    var elements = part.map(function (element) {\n        switch (element._class) {\n            case \"Note\":\n                return noteToXML(element);\n            case \"Backup\":\n                return backupToXML(element);\n            case \"Forward\":\n                return forwardToXML(element);\n            case \"Direction\":\n                return directionToXML(element);\n            case \"Attributes\":\n                return attributesToXML(element);\n            case \"Harmony\":\n                return harmonyToXML(element);\n            case \"FiguredBass\":\n                return figuredBassToXML(element);\n            case \"Print\":\n                return printToXML(element);\n            case \"Sound\":\n                return soundToXML(element);\n            case \"Barline\":\n                return barlineToXML(element);\n            case \"Grouping\":\n                return groupingToXML(element);\n            case \"Link\":\n                return \"<!-- link not implemented -->\";\n            case \"Bookmark\":\n                return \"<!-- bookmark not implemented -->\";\n            default:\n                return (_a = [\"<!-- unknown type (class \", \") -->\"], _a.raw = [\"<!-- unknown type (class \", \") -->\"], xml(_a, element._class));\n        }\n        var _a;\n    });\n    return (_b = [\"<part\", \">\\n\", \"\\n</part>\"], _b.raw = [\"<part\", \">\\\\n\", \"\\\\n</part>\"], dangerous(_b, attribs, elements.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction noteToXML(note) {\n    // <!ATTLIST note\n    //     %print-style;\n    //     %printout;\n    //     dynamics CDATA #IMPLIED\n    //     end-dynamics CDATA #IMPLIED\n    //     attack CDATA #IMPLIED\n    //     release CDATA #IMPLIED\n    //     %time-only;\n    //     pizzicato %yes-no; #IMPLIED\n    // >\n    var attribs = \"\";\n    attribs += printStyleToXML(note);\n    attribs += printoutToXML(note);\n    if (defined(note.dynamics)) {\n        attribs += (_a = [\" dynamics=\\\"\", \"\\\"\"], _a.raw = [\" dynamics=\\\"\", \"\\\"\"], xml(_a, note.dynamics));\n    }\n    if (defined(note.endDynamics)) {\n        attribs += (_b = [\" end-dynamics=\\\"\", \"\\\"\"], _b.raw = [\" end-dynamics=\\\"\", \"\\\"\"], xml(_b, note.endDynamics));\n    }\n    if (defined(note.attack)) {\n        attribs += (_c = [\" attack=\\\"\", \"\\\"\"], _c.raw = [\" attack=\\\"\", \"\\\"\"], xml(_c, note.attack));\n    }\n    if (defined(note.release)) {\n        attribs += (_d = [\" release=\\\"\", \"\\\"\"], _d.raw = [\" release=\\\"\", \"\\\"\"], xml(_d, note.release));\n    }\n    attribs += timeOnlyToXML(note);\n    if (defined(note.pizzicato)) {\n        attribs += (_e = [\" pizzicato=\\\"\", \"\\\"\"], _e.raw = [\" pizzicato=\\\"\", \"\\\"\"], yesNo(_e, note.pizzicato));\n    }\n    // <!ELEMENT note\n    //     (((grace, %full-note;, (tie, tie?)?) |\n    //     (cue, %full-note;, duration) |\n    //     (%full-note;, duration, (tie, tie?)?)),\n    //     ...\n    var elements = [];\n    if (note.grace) {\n        var graceAttribs = \"\";\n        /*\n            <!ELEMENT grace EMPTY>\n            <!ATTLIST grace\n                steal-time-previous CDATA #IMPLIED\n                steal-time-following CDATA #IMPLIED\n                make-time CDATA #IMPLIED\n                slash %yes-no; #IMPLIED\n            >\n        */\n        if (note.grace.stealTimePrevious) {\n            graceAttribs += (_f = [\" steal-time-previous=\\\"\", \"\\\"\"], _f.raw = [\" steal-time-previous=\\\"\", \"\\\"\"], xml(_f, note.grace.stealTimePrevious));\n        }\n        if (note.grace.stealTimeFollowing) {\n            graceAttribs += (_g = [\" steal-time-following=\\\"\", \"\\\"\"], _g.raw = [\" steal-time-following=\\\"\", \"\\\"\"], xml(_g, note.grace.stealTimeFollowing));\n        }\n        if (note.grace.makeTime) {\n            graceAttribs += (_h = [\" make-time=\\\"\", \"\\\"\"], _h.raw = [\" make-time=\\\"\", \"\\\"\"], xml(_h, note.grace.makeTime));\n        }\n        if (note.grace.slash !== undefined && note.grace.slash !== null) {\n            graceAttribs += (_j = [\" slash=\\\"\", \"\\\"\"], _j.raw = [\" slash=\\\"\", \"\\\"\"], yesNo(_j, note.grace.slash));\n        }\n        elements.push((_k = [\"<grace\", \" />\"], _k.raw = [\"<grace\", \" />\"], dangerous(_k, graceAttribs)));\n    }\n    else if (note.cue) {\n        elements.push((_l = [\"<cue />\"], _l.raw = [\"<cue />\"], xml(_l)));\n    }\n    /*\n        <!ENTITY % full-note \"(chord?, (pitch | unpitched | rest))\">\n    */\n    if (note.chord) {\n        elements.push((_m = [\"<chord />\"], _m.raw = [\"<chord />\"], xml(_m)));\n    }\n    if (note.pitch) {\n        /*\n            <!ELEMENT pitch (step, alter?, octave)>\n            <!ELEMENT step (#PCDATA)>\n            <!ELEMENT alter (#PCDATA)>\n            <!ELEMENT octave (#PCDATA)>\n        */\n        var pitchElements = [];\n        if (note.pitch.step) {\n            pitchElements.push((_o = [\"<step>\", \"</step>\"], _o.raw = [\"<step>\", \"</step>\"], xml(_o, note.pitch.step.toUpperCase())));\n        }\n        if (note.pitch.alter) {\n            pitchElements.push((_p = [\"<alter>\", \"</alter>\"], _p.raw = [\"<alter>\", \"</alter>\"], xml(_p, note.pitch.alter)));\n        }\n        if (note.pitch.octave) {\n            pitchElements.push((_q = [\"<octave>\", \"</octave>\"], _q.raw = [\"<octave>\", \"</octave>\"], xml(_q, note.pitch.octave)));\n        }\n        elements.push((_r = [\"<pitch>\\n\", \"\\n</pitch>\"], _r.raw = [\"<pitch>\\\\n\", \"\\\\n</pitch>\"], dangerous(_r, pitchElements.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    else if (note.unpitched) {\n        // <!ELEMENT unpitched ((display-step, display-octave)?)>\n        var upChildren = [];\n        if (note.unpitched.displayStep) {\n            upChildren.push((_s = [\"<display-step>\", \"</display-step>\"], _s.raw = [\"<display-step>\", \"</display-step>\"], xml(_s, note.unpitched.displayStep)));\n        }\n        if (note.unpitched.displayOctave) {\n            upChildren.push((_t = [\"<display-octave>\", \"</display-octave>\"], _t.raw = [\"<display-octave>\", \"</display-octave>\"], xml(_t, note.unpitched.displayOctave)));\n        }\n        elements.push((_u = [\"<unpitched>\\n\", \"\\n</unpitched>\"], _u.raw = [\"<unpitched>\\\\n\", \"\\\\n</unpitched>\"], dangerous(_u, upChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    else if (note.rest) {\n        var restAttribs = \"\";\n        var restChildren = [];\n        if (note.rest.displayStep) {\n            restChildren.push(\"<display-step>\" + note.rest.displayStep + \"</display-step>\");\n        }\n        if (note.rest.displayOctave) {\n            restChildren.push(\"<display-octave>\" + note.rest.displayOctave + \"</display-octave>\");\n        }\n        if (note.rest.measure !== undefined && note.rest.measure !== null) {\n            restAttribs += (_v = [\" measure=\\\"\", \"\\\"\"], _v.raw = [\" measure=\\\"\", \"\\\"\"], yesNo(_v, note.rest.measure));\n        }\n        elements.push((_w = [\"<rest\", \">\\n\", \"\\n</rest>\"], _w.raw = [\"<rest\", \">\\\\n\", \"\\\\n</rest>\"], dangerous(_w, restAttribs, restChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    if (!note.grace && note.duration) {\n        elements.push((_x = [\"<duration>\", \"</duration>\"], _x.raw = [\"<duration>\", \"</duration>\"], xml(_x, note.duration)));\n    }\n    if (note.ties && note.ties.length) {\n        var tieAttribs = (_y = [\" type=\\\"\", \"\\\"\"], _y.raw = [\" type=\\\"\", \"\\\"\"], xml(_y, note.ties[0].type === StartStop.Stop ? \"stop\" : \"start\"));\n        elements.push((_z = [\"<tie\", \" />\"], _z.raw = [\"<tie\", \" />\"], dangerous(_z, tieAttribs)));\n    }\n    // ...\n    // instrument?, %editorial-voice;, type?, dot*,\n    // ...\n    if (note.instrument) {\n        elements.push((_0 = [\"<instrument id=\\\"\", \"\\\" />\"], _0.raw = [\"<instrument id=\\\"\", \"\\\" />\"], xml(_0, note.instrument.id)));\n    }\n    elements = elements.concat(editorialVoiceToXML(note));\n    if (note.noteType && defined(note.noteType.duration)) {\n        elements.push((_1 = [\"<type>\", \"</type>\"], _1.raw = [\"<type>\", \"</type>\"], xml(_1, countToXML[note.noteType.duration])));\n    }\n    (note.dots || []).forEach(function () {\n        elements.push((_a = [\"<dot />\"], _a.raw = [\"<dot />\"], xml(_a)));\n        var _a;\n    });\n    // ...\n    // accidental?, time-modification?, stem?, notehead?,\n    // ...\n    if (note.accidental) {\n        var accidentalAttribs = \"\";\n        if (note.accidental.editorial !== undefined && note.accidental.editorial !== null) {\n            accidentalAttribs += (_2 = [\" editorial=\\\"\", \"\\\"\"], _2.raw = [\" editorial=\\\"\", \"\\\"\"], yesNo(_2, note.accidental.editorial));\n        }\n        if (note.accidental.cautionary !== undefined && note.accidental.cautionary !== null) {\n            accidentalAttribs += (_3 = [\" cautionary=\\\"\", \"\\\"\"], _3.raw = [\" cautionary=\\\"\", \"\\\"\"], yesNo(_3, note.accidental.cautionary));\n        }\n        elements.push((_4 = [\"<accidental\", \">\", \"</accidental>\"], _4.raw = [\"<accidental\", \">\", \"</accidental>\"], dangerous(_4, accidentalAttribs, accidentalToXML[note.accidental.accidental]))); // (safe)\n    }\n    if (note.timeModification) {\n        var timeModificationChildren_1 = [];\n        // <!ELEMENT time-modification\n        // \t(actual-notes, normal-notes,\n        // \t(normal-type, normal-dot*)?)>\n        // <!ELEMENT actual-notes (#PCDATA)>\n        // <!ELEMENT normal-notes (#PCDATA)>\n        // <!ELEMENT normal-type (#PCDATA)>\n        // <!ELEMENT normal-dot EMPTY>\n        if (note.timeModification.actualNotes) {\n            timeModificationChildren_1.push((_5 = [\"<actual-notes>\", \"</actual-notes>\"], _5.raw = [\"<actual-notes>\", \"</actual-notes>\"], xml(_5, note.timeModification.actualNotes)));\n        }\n        if (note.timeModification.normalNotes) {\n            timeModificationChildren_1.push((_6 = [\"<normal-notes>\", \"</normal-notes>\"], _6.raw = [\"<normal-notes>\", \"</normal-notes>\"], xml(_6, note.timeModification.normalNotes)));\n        }\n        if (note.timeModification.normalType) {\n            timeModificationChildren_1.push((_7 = [\"<normal-type>\", \"</normal-type>\"], _7.raw = [\"<normal-type>\", \"</normal-type>\"], xml(_7, note.timeModification.normalType)));\n        }\n        (note.timeModification.normalDots || []).forEach(function () {\n            timeModificationChildren_1.push((_a = [\"<normal-dot />\"], _a.raw = [\"<normal-dot />\"], xml(_a)));\n            var _a;\n        });\n        elements.push((_8 = [\"<time-modification>\\n\", \"\\n</time-modification>\"], _8.raw = [\"<time-modification>\\\\n\", \"\\\\n</time-modification>\"], dangerous(_8, timeModificationChildren_1\n            .join(\"\\n\").split(\"\\n\").map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    if (note.stem) {\n        var stemAttribs = \"\" +\n            positionToXML(note.stem) +\n            colorToXML(note.color);\n        elements.push((_9 = [\"<stem\", \">\", \"</stem>\"], _9.raw = [\"<stem\", \">\", \"</stem>\"], dangerous(_9, stemAttribs, stemToXML[note.stem.type]))); // (safe)\n    }\n    if (note.notehead) {\n        var hattribs = \"\" +\n            fontToXML(note.notehead) +\n            colorToXML(note.color);\n        if (defined(note.notehead.filled)) {\n            hattribs += (_10 = [\" filled=\\\"\", \"\\\"\"], _10.raw = [\" filled=\\\"\", \"\\\"\"], yesNo(_10, note.notehead.filled));\n        }\n        if (defined(note.notehead.parentheses)) {\n            hattribs += (_11 = [\" parentheses=\\\"\", \"\\\"\"], _11.raw = [\" parentheses=\\\"\", \"\\\"\"], yesNo(_11, note.notehead.parentheses));\n        }\n        elements.push((_12 = [\"<notehead\", \">\", \"</notehead>\"], _12.raw = [\"<notehead\", \">\", \"</notehead>\"], dangerous(_12, hattribs, noteheadTypeToXML[note.notehead.type])));\n    }\n    // ...\n    // notehead-text?, staff?, beam*, notations*, lyric*, play?)>\n    // ...\n    if (defined(note.noteheadText)) {\n        // <!ELEMENT notehead-text\n        //     ((display-text | accidental-text)+)>\n        elements = elements.concat(textArrayToXML(note.noteheadText.text));\n    }\n    if (!isNaN(note.staff)) {\n        elements.push((_13 = [\"<staff>\", \"</staff>\"], _13.raw = [\"<staff>\", \"</staff>\"], xml(_13, note.staff)));\n    }\n    (note.beams || []).forEach(function (beam) {\n        var beamAttribs = (_a = [\" number=\\\"\", \"\\\"\"], _a.raw = [\" number=\\\"\", \"\\\"\"], xml(_a, beam.number));\n        if (defined(beam.repeater)) {\n            beamAttribs += (_b = [\" repeater=\\\"\", \"\\\"\"], _b.raw = [\" repeater=\\\"\", \"\\\"\"], yesNo(_b, beam.repeater));\n        }\n        if (defined(beam.fan)) {\n            beamAttribs += (_c = [\" fan=\\\"\", \"\\\"\"], _c.raw = [\" fan=\\\"\", \"\\\"\"], xml(_c, accelRitNoneToXML[beam.fan]));\n        }\n        elements.push((_d = [\"<beam\", \">\", \"</beam>\"], _d.raw = [\"<beam\", \">\", \"</beam>\"], dangerous(_d, beamAttribs, beamTypeToXML[beam.type]))); // safe\n        var _a, _b, _c, _d;\n    });\n    (note.notations || []).forEach(function (notation) {\n        /**\n            * <!ELEMENT notations\n            *      (%editorial;,\n            *       (tied | slur | tuplet | glissando | slide |\n            *        ornaments | technical | articulations | dynamics |\n            *        fermata | arpeggiate | non-arpeggiate |\n            *        accidental-mark | other-notation)*)>\n            *  <!ATTLIST notations\n            *      %print-object;\n            *  >\n            *\n            *  <!ENTITY % print-object\n            *      \"print-object  %yes-no;  #IMPLIED\">\n            *  <!ENTITY % editorial \"(footnote?, level?)\">\n            */\n        var notationsAttribs = \"\";\n        var nChildren = [];\n        if (defined(notation.printObject)) {\n            notationsAttribs += (_a = [\" print-object=\\\"\", \"\\\"\"], _a.raw = [\" print-object=\\\"\", \"\\\"\"], yesNo(_a, notation.printObject));\n        }\n        nChildren = nChildren.concat(editorialToXML(notation));\n        (notation.tieds || []).forEach(function (tied) {\n            // <!ATTLIST tied\n            //     type %start-stop-continue; #REQUIRED\n            //     number %number-level; #IMPLIED\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %position;\n            //     %placement;\n            //     %orientation;\n            //     %bezier;\n            //     %color;\n            // >\n            nChildren.push((_a = [\"<tied\", \" />\"], _a.raw = [\"<tied\", \" />\"], dangerous(_a, startStopContinueToXML(tied) +\n                numberLevelToXML(tied) +\n                lineTypeToXML(tied) +\n                dashedFormattingToXML(tied) +\n                positionToXML(tied) +\n                placementToXML(tied) +\n                orientationToXML(tied) +\n                bezierToXML(tied) +\n                colorToXML(tied))));\n            var _a;\n        });\n        (notation.slurs || []).forEach(function (slur) {\n            // <!ATTLIST slur\n            //     type %start-stop-continue; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %position;\n            //     %placement;\n            //     %orientation;\n            //     %bezier;\n            //     %color;\n            // >\n            nChildren.push((_a = [\"<slur\", \" />\"], _a.raw = [\"<slur\", \" />\"], dangerous(_a, startStopContinueToXML(slur) +\n                numberLevelToXML(slur) +\n                lineTypeToXML(slur) +\n                dashedFormattingToXML(slur) +\n                positionToXML(slur) +\n                placementToXML(slur) +\n                orientationToXML(slur) +\n                bezierToXML(slur) +\n                colorToXML(slur))));\n            var _a;\n        });\n        (notation.tuplets || []).forEach(function (tuplet) {\n            // <!ELEMENT tuplet (tuplet-actual?, tuplet-normal?)>\n            // <!ATTLIST tuplet\n            //     type %start-stop; #REQUIRED\n            //     number %number-level; #IMPLIED\n            //     bracket %yes-no; #IMPLIED\n            //     show-number (actual | both | none) #IMPLIED\n            //     show-type (actual | both | none) #IMPLIED\n            //     %line-shape;\n            //     %position;\n            //     %placement;\n            // >\n            // <!ELEMENT tuplet-actual (tuplet-number?,\n            //     tuplet-type?, tuplet-dot*)>\n            // <!ELEMENT tuplet-normal (tuplet-number?,\n            //     tuplet-type?, tuplet-dot*)>\n            // <!ELEMENT tuplet-number (#PCDATA)>\n            // <!ATTLIST tuplet-number\n            //     %font;\n            //     %color;\n            // >\n            // <!ELEMENT tuplet-type (#PCDATA)>\n            // <!ATTLIST tuplet-type\n            //     %font;\n            //     %color;\n            // >\n            // <!ELEMENT tuplet-dot EMPTY>\n            // <!ATTLIST tuplet-dot\n            //     %font;\n            //     %color;\n            // >\n            var tattribs = \"\" +\n                startStopToXML(tuplet) +\n                numberLevelToXML(tuplet);\n            if (defined(tuplet.bracket)) {\n                tattribs += (_a = [\" bracket=\\\"\", \"\\\"\"], _a.raw = [\" bracket=\\\"\", \"\\\"\"], yesNo(_a, tuplet.bracket));\n            }\n            if (defined(tuplet.showNumber)) {\n                tattribs += (_b = [\" show-number=\\\"\", \"\\\"\"], _b.raw = [\" show-number=\\\"\", \"\\\"\"], xml(_b, actualBothNoneToXML[tuplet.showNumber]));\n            }\n            if (defined(tuplet.showType)) {\n                tattribs += (_c = [\" show-type=\\\"\", \"\\\"\"], _c.raw = [\" show-type=\\\"\", \"\\\"\"], xml(_c, actualBothNoneToXML[tuplet.showType]));\n            }\n            tattribs += lineShapeToXML(tuplet);\n            tattribs += positionToXML(tuplet);\n            tattribs += placementToXML(tuplet);\n            var tChildren = [];\n            [[\"tuplet-actual\", \"tupletActual\"], [\"tuplet-normal\", \"tupletNormal\"]].forEach(function (tup) {\n                var data = tuplet[tup[1]];\n                if (!data) {\n                    return;\n                }\n                var dataChildren = [];\n                if (data.tupletNumber) {\n                    var num = data.tupletNumber;\n                    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, num.text));\n                    dataChildren.push((_b = [\"<tuplet-number\", \">\", \"</tuplet-number>\"], _b.raw = [\"<tuplet-number\", \">\", \"</tuplet-number>\"], dangerous(_b, fontToXML(num) + colorToXML(num), pcdata)));\n                }\n                if (data.tupletType) {\n                    var type = data.tupletType;\n                    var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, type.text));\n                    dataChildren.push((_d = [\"<tuplet-type\", \">\", \"</tuplet-type>\"], _d.raw = [\"<tuplet-type\", \">\", \"</tuplet-type>\"], dangerous(_d, fontToXML(type) + colorToXML(type), pcdata)));\n                }\n                (data.tupletDots || []).forEach(function (dot) {\n                    dataChildren.push((_a = [\"<tuplet-dot\", \" />\"], _a.raw = [\"<tuplet-dot\", \" />\"], dangerous(_a, fontToXML(dot) + colorToXML(dot))));\n                    var _a;\n                });\n                tChildren.push((_e = [\"<\", \">\\n\", \"\\n</\", \">\"], _e.raw = [\"<\", \">\\\\n\", \"\\\\n</\", \">\"], dangerous(_e, tup[0], dataChildren.join(\"\\n\").split(\"\\n\")\n                    .map(function (n) { return \"  \" + n; }).join(\"\\n\"), tup[0])));\n                var _a, _b, _c, _d, _e;\n            });\n            nChildren.push((_d = [\"<tuplet\", \">\\n\", \"\\n</tuplet>\"], _d.raw = [\"<tuplet\", \">\\\\n\", \"\\\\n</tuplet>\"], dangerous(_d, tattribs, tChildren.join(\"\\n\").split(\"\\n\")\n                .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            var _a, _b, _c, _d;\n        });\n        (notation.glissandos || []).forEach(function (glissando) {\n            // <!ELEMENT glissando (#PCDATA)>\n            // <!ATTLIST glissando\n            //     type %start-stop; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            // >\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, glissando.text));\n            nChildren.push((_b = [\"<glissando\", \">\", \"</glissando>\"], _b.raw = [\"<glissando\", \">\", \"</glissando>\"], dangerous(_b, startStopToXML(glissando) +\n                numberLevelToXML(glissando) +\n                lineTypeToXML(glissando) +\n                dashedFormattingToXML(glissando) +\n                printStyleToXML(glissando), pcdata)));\n            var _a, _b;\n        });\n        (notation.slides || []).forEach(function (slide) {\n            // <!ELEMENT slide (#PCDATA)>\n            // <!ATTLIST slide\n            //     type %start-stop; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            //     %bend-sound;\n            // >\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, slide.text));\n            nChildren.push((_b = [\"<slide\", \">\", \"</slide>\"], _b.raw = [\"<slide\", \">\", \"</slide>\"], dangerous(_b, startStopToXML(slide) +\n                numberLevelToXML(slide) +\n                lineTypeToXML(slide) +\n                dashedFormattingToXML(slide) +\n                printStyleToXML(slide) +\n                bendSoundToXML(slide), pcdata)));\n            var _a, _b;\n        });\n        (notation.ornaments || []).forEach(function (ornaments) {\n            // <!ELEMENT ornaments\n            //     (((trill-mark | turn | delayed-turn | inverted-turn |\n            //        delayed-inverted-turn | vertical-turn | shake |\n            //        wavy-line | mordent | inverted-mordent | schleifer |\n            //        tremolo | other-ornament), accidental-mark*)*)>\n            var oChildren = [];\n            // <!ELEMENT trill-mark EMPTY>\n            // <!ATTLIST trill-mark\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            // >\n            if (ornaments.trillMark) {\n                oChildren.push((_a = [\"<trill-mark\", \" />\"], _a.raw = [\"<trill-mark\", \" />\"], dangerous(_a, printStyleToXML(ornaments.trillMark) +\n                    placementToXML(ornaments.trillMark) +\n                    trillSoundToXML(ornaments.trillMark))));\n            }\n            // <!ATTLIST turn\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            //     slash %yes-no; #IMPLIED\n            // >\n            if (ornaments.turn) {\n                oChildren.push((_b = [\"<turn\", \" />\"], _b.raw = [\"<turn\", \" />\"], dangerous(_b, printStyleToXML(ornaments.turn) +\n                    placementToXML(ornaments.turn) +\n                    trillSoundToXML(ornaments.turn) +\n                    slashToXML(ornaments.turn))));\n            }\n            // <!ATTLIST delayed-turn\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            //     slash %yes-no; #IMPLIED\n            // >\n            if (ornaments.delayedTurn) {\n                oChildren.push((_c = [\"<delayed-turn\", \" />\"], _c.raw = [\"<delayed-turn\", \" />\"], dangerous(_c, printStyleToXML(ornaments.delayedTurn) +\n                    placementToXML(ornaments.delayedTurn) +\n                    trillSoundToXML(ornaments.delayedTurn) +\n                    slashToXML(ornaments.delayedTurn))));\n            }\n            // <!ATTLIST inverted-turn\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            //     slash %yes-no; #IMPLIED\n            // >\n            if (ornaments.invertedTurn) {\n                oChildren.push((_d = [\"<inverted-turn\", \" />\"], _d.raw = [\"<inverted-turn\", \" />\"], dangerous(_d, printStyleToXML(ornaments.invertedTurn) +\n                    placementToXML(ornaments.invertedTurn) +\n                    trillSoundToXML(ornaments.invertedTurn) +\n                    slashToXML(ornaments.invertedTurn))));\n            }\n            // <!ATTLIST delayed-inverted-turn\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            //     slash %yes-no; #IMPLIED\n            // >\n            if (ornaments.delayedInvertedTurn) {\n                oChildren.push((_e = [\"<delayed-inverted-turn\", \" />\"], _e.raw = [\"<delayed-inverted-turn\", \" />\"], dangerous(_e, printStyleToXML(ornaments.delayedInvertedTurn) +\n                    placementToXML(ornaments.delayedInvertedTurn) +\n                    trillSoundToXML(ornaments.delayedInvertedTurn) +\n                    slashToXML(ornaments.delayedInvertedTurn))));\n            }\n            // <!ATTLIST vertical-turn\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            // >\n            if (ornaments.verticalTurn) {\n                oChildren.push((_f = [\"<vertical-turn\", \" />\"], _f.raw = [\"<vertical-turn\", \" />\"], dangerous(_f, printStyleToXML(ornaments.verticalTurn) +\n                    placementToXML(ornaments.verticalTurn) +\n                    trillSoundToXML(ornaments.verticalTurn))));\n            }\n            // \n            // <!ATTLIST shake\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            // >\n            if (ornaments.shake) {\n                oChildren.push((_g = [\"<shake\", \" />\"], _g.raw = [\"<shake\", \" />\"], dangerous(_g, printStyleToXML(ornaments.shake) +\n                    placementToXML(ornaments.shake) +\n                    trillSoundToXML(ornaments.shake))));\n            }\n            // \n            // <!ATTLIST mordent\n            //     long %yes-no; #IMPLIED\n            //     approach %above-below; #IMPLIED\n            //     departure %above-below; #IMPLIED\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            // >\n            if (ornaments.mordent) {\n                oChildren.push((_h = [\"<mordent\", \" />\"], _h.raw = [\"<mordent\", \" />\"], dangerous(_h, mordentSubsetToXML(ornaments.mordent) +\n                    printStyleToXML(ornaments.mordent) +\n                    placementToXML(ornaments.mordent) +\n                    trillSoundToXML(ornaments.mordent))));\n            }\n            // <!ATTLIST inverted-mordent\n            //     long %yes-no; #IMPLIED\n            //     approach %above-below; #IMPLIED\n            //     departure %above-below; #IMPLIED\n            //     %print-style;\n            //     %placement;\n            //     %trill-sound;\n            // >\n            if (ornaments.invertedMordent) {\n                oChildren.push((_j = [\"<inverted-mordent\", \" />\"], _j.raw = [\"<inverted-mordent\", \" />\"], dangerous(_j, mordentSubsetToXML(ornaments.invertedMordent) +\n                    printStyleToXML(ornaments.invertedMordent) +\n                    placementToXML(ornaments.invertedMordent) +\n                    trillSoundToXML(ornaments.invertedMordent))));\n            }\n            // \n            // <!ATTLIST schleifer\n            //     %print-style;\n            //     %placement;\n            // >\n            if (ornaments.schleifer) {\n                oChildren.push((_k = [\"<schleifer\", \" />\"], _k.raw = [\"<schleifer\", \" />\"], dangerous(_k, printStyleToXML(ornaments.schleifer) +\n                    placementToXML(ornaments.schleifer))));\n            }\n            // \n            // <!ELEMENT tremolo (#PCDATA)>\n            // <!ATTLIST tremolo\n            //     type %start-stop-single; \"single\"\n            //     %print-style;\n            //     %placement;\n            // >\n            if (ornaments.tremolo) {\n                var pcdata = (_l = [\"\", \"\"], _l.raw = [\"\", \"\"], xml(_l, ornaments.tremolo.data || \"\"));\n                oChildren.push((_m = [\"<tremolo\", \">\", \"</tremolo>\"], _m.raw = [\"<tremolo\", \">\", \"</tremolo>\"], dangerous(_m, startStopSingleToXML(ornaments.tremolo) +\n                    printStyleToXML(ornaments.tremolo) +\n                    placementToXML(ornaments.tremolo), pcdata)));\n            }\n            // \n            // <!ELEMENT other-ornament (#PCDATA)>\n            // <!ATTLIST other-ornament\n            //     %print-style;\n            //     %placement;\n            // >\n            if (ornaments.otherOrnament) {\n                var pcdata = (_o = [\"\", \"\"], _o.raw = [\"\", \"\"], xml(_o, ornaments.otherOrnament.data || \"\"));\n                oChildren.push((_p = [\"<other-ornament\", \">\", \"</other-ornament>\"], _p.raw = [\"<other-ornament\", \">\", \"</other-ornament>\"], dangerous(_p, printStyleToXML(ornaments.otherOrnament) +\n                    placementToXML(ornaments.otherOrnament), pcdata)));\n            }\n            // \n            // <!ELEMENT accidental-mark (#PCDATA)>\n            // <!ATTLIST accidental-mark\n            //     %print-style;\n            //     %placement;\n            // >\n            (ornaments.accidentalMarks || []).forEach(function (accidentalMark) {\n                var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, accidentalMark.mark || \"\"));\n                oChildren.push((_b = [\"<accidental-mark\", \">\", \"</accidental-mark>\"], _b.raw = [\"<accidental-mark\", \">\", \"</accidental-mark>\"], dangerous(_b, printStyleToXML(accidentalMark) +\n                    placementToXML(accidentalMark), pcdata)));\n                var _a, _b;\n            });\n            nChildren.push((_q = [\"<ornaments>\\n\", \"\\n</ornaments>\"], _q.raw = [\"<ornaments>\\\\n\", \"\\\\n</ornaments>\"], dangerous(_q, oChildren.join(\"\\n\").split(\"\\n\")\n                .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        });\n        (notation.technicals || []).forEach(function (technical) {\n            var oChildren = [];\n            // <!ELEMENT technical\n            //     ((up-bow | down-bow | harmonic | open-string |\n            //       thumb-position | fingering | pluck | double-tongue |\n            //       triple-tongue | stopped | snap-pizzicato | fret |\n            //       string | hammer-on | pull-off | bend | tap | heel |\n            //       toe | fingernails | hole | arrow | handbell |\n            //       other-technical)*)>\n            // \n            // <!ATTLIST up-bow\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.upBow) {\n                oChildren.push((_a = [\"<up-bow\", \" />\"], _a.raw = [\"<up-bow\", \" />\"], dangerous(_a, printStyleToXML(technical.upBow) +\n                    placementToXML(technical.upBow))));\n            }\n            // <!ATTLIST down-bow\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.downBow) {\n                oChildren.push((_b = [\"<down-bow\", \" />\"], _b.raw = [\"<down-bow\", \" />\"], dangerous(_b, printStyleToXML(technical.downBow) +\n                    placementToXML(technical.downBow))));\n            }\n            // <!ELEMENT harmonic\n            //     ((natural | artificial)?,\n            //      (base-pitch | touching-pitch | sounding-pitch)?)>\n            // <!ATTLIST harmonic\n            //     %print-object;\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.harmonic) {\n                var hChildren = [];\n                // <!ELEMENT natural EMPTY>\n                // <!ELEMENT artificial EMPTY>\n                // <!ELEMENT base-pitch EMPTY>\n                // <!ELEMENT touching-pitch EMPTY>\n                // <!ELEMENT sounding-pitch EMPTY>\n                if (technical.harmonic.natural) {\n                    hChildren.push((_c = [\"<natural />\"], _c.raw = [\"<natural />\"], xml(_c)));\n                }\n                if (technical.harmonic.artificial) {\n                    hChildren.push((_d = [\"<artificial />\"], _d.raw = [\"<artificial />\"], xml(_d)));\n                }\n                if (technical.harmonic.basePitch) {\n                    hChildren.push((_e = [\"<base-pitch />\"], _e.raw = [\"<base-pitch />\"], xml(_e)));\n                }\n                if (technical.harmonic.touchingPitch) {\n                    hChildren.push((_f = [\"<touching-pitch />\"], _f.raw = [\"<touching-pitch />\"], xml(_f)));\n                }\n                if (technical.harmonic.soundingPitch) {\n                    hChildren.push((_g = [\"<sounding-pitch />\"], _g.raw = [\"<sounding-pitch />\"], xml(_g)));\n                }\n                oChildren.push((_h = [\"<harmonic\", \">\", \"\\n</harmonic>\"], _h.raw = [\"<harmonic\", \">\", \"\\\\n</harmonic>\"], dangerous(_h, printObjectToXML(technical.harmonic) +\n                    printStyleToXML(technical.harmonic) +\n                    placementToXML(technical.harmonic), hChildren.join(\"\\n\").split(\"\\n\")\n                    .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            }\n            // <!ATTLIST open-string\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.openString) {\n                oChildren.push((_j = [\"<open-string\", \" />\"], _j.raw = [\"<open-string\", \" />\"], dangerous(_j, printStyleToXML(technical.openString) +\n                    placementToXML(technical.openString))));\n            }\n            // \n            // <!ATTLIST thumb-position\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.thumbPosition) {\n                oChildren.push((_k = [\"<thumb-position\", \" />\"], _k.raw = [\"<thumb-position\", \" />\"], dangerous(_k, printStyleToXML(technical.thumbPosition) +\n                    placementToXML(technical.thumbPosition))));\n            }\n            //\n            // <!ELEMENT fingering (#PCDATA)>\n            // <!ATTLIST fingering\n            //     substitution %yes-no; #IMPLIED\n            //     alternate %yes-no; #IMPLIED\n            //     %print-style; \n            //     %placement;\n            // >\n            // \n            if (technical.fingering) {\n                var substitution = \"\";\n                if (defined(technical.fingering.substitution)) {\n                    substitution += (_l = [\" substitution=\\\"\", \"\\\"\"], _l.raw = [\" substitution=\\\"\", \"\\\"\"], yesNo(_l, technical.fingering.substitution));\n                }\n                var alternate = \"\";\n                if (defined(technical.fingering.alternate)) {\n                    alternate += (_m = [\" alternate=\\\"\", \"\\\"\"], _m.raw = [\" alternate=\\\"\", \"\\\"\"], yesNo(_m, technical.fingering.alternate));\n                }\n                oChildren.push((_o = [\"<fingering\", \">\", \"</fingering>\"], _o.raw = [\"<fingering\", \">\", \"</fingering>\"], dangerous(_o, substitution +\n                    alternate +\n                    printStyleToXML(technical.fingering) +\n                    placementToXML(technical.fingering), String(parseInt(String(technical.fingering.finger), 10)))));\n            }\n            //\n            // <!ELEMENT pluck (#PCDATA)>\n            // <!ATTLIST pluck\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.pluck) {\n                oChildren.push((_p = [\"<pluck\", \" />\"], _p.raw = [\"<pluck\", \" />\"], dangerous(_p, printStyleToXML(technical.pluck) +\n                    placementToXML(technical.pluck))));\n            }\n            // \n            // <!ATTLIST double-tongue\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.doubleTongue) {\n                oChildren.push((_q = [\"<double-tongue\", \" />\"], _q.raw = [\"<double-tongue\", \" />\"], dangerous(_q, printStyleToXML(technical.doubleTongue) +\n                    placementToXML(technical.doubleTongue))));\n            }\n            // \n            // <!ATTLIST triple-tongue\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.tripleTongue) {\n                oChildren.push((_r = [\"<triple-tongue\", \" />\"], _r.raw = [\"<triple-tongue\", \" />\"], dangerous(_r, printStyleToXML(technical.tripleTongue) +\n                    placementToXML(technical.tripleTongue))));\n            }\n            // \n            // <!ATTLIST stopped\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.stopped) {\n                oChildren.push((_s = [\"<stopped\", \" />\"], _s.raw = [\"<stopped\", \" />\"], dangerous(_s, printStyleToXML(technical.stopped) +\n                    placementToXML(technical.stopped))));\n            }\n            // \n            // <!ATTLIST snap-pizzicato\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.snapPizzicato) {\n                oChildren.push((_t = [\"<snap-pizzicato\", \" />\"], _t.raw = [\"<snap-pizzicato\", \" />\"], dangerous(_t, printStyleToXML(technical.snapPizzicato) +\n                    placementToXML(technical.snapPizzicato))));\n            }\n            // \n            // <!ELEMENT hammer-on (#PCDATA)>\n            // <!ATTLIST hammer-on\n            //     type %start-stop; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.hammerOn) {\n                var pcdata = (_u = [\"\", \"\"], _u.raw = [\"\", \"\"], xml(_u, technical.hammerOn.data));\n                oChildren.push((_v = [\"<hammer-on\", \">\", \"</hammer-on>\"], _v.raw = [\"<hammer-on\", \">\", \"</hammer-on>\"], dangerous(_v, startStopToXML(technical.hammerOn) +\n                    numberLevelToXML(technical.hammerOn) +\n                    printStyleToXML(technical.hammerOn) +\n                    placementToXML(technical.hammerOn), pcdata)));\n            }\n            // <!ELEMENT pull-off (#PCDATA)>\n            // <!ATTLIST pull-off\n            //     type %start-stop; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.pullOff) {\n                var pcdata = (_w = [\"\", \"\"], _w.raw = [\"\", \"\"], xml(_w, technical.pullOff.data));\n                oChildren.push((_x = [\"<pull-off\", \">\", \"</pull-off>\"], _x.raw = [\"<pull-off\", \">\", \"</pull-off>\"], dangerous(_x, startStopToXML(technical.pullOff) +\n                    numberLevelToXML(technical.pullOff) +\n                    printStyleToXML(technical.pullOff) +\n                    placementToXML(technical.pullOff), pcdata)));\n            }\n            // \n            // <!ELEMENT bend\n            //     (bend-alter, (pre-bend | release)?, with-bar?)>\n            // <!ATTLIST bend\n            //     %print-style;\n            //     %bend-sound;\n            // >\n            // <!ELEMENT bend-alter (#PCDATA)>\n            // <!ELEMENT pre-bend EMPTY>\n            // <!ELEMENT release EMPTY>\n            // <!ELEMENT with-bar (#PCDATA)>\n            // <!ATTLIST with-bar\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.bend) {\n                var bendChildren = [];\n                if (defined(technical.bend.bendAlter)) {\n                    bendChildren.push((_y = [\"<bend-alter>\", \"</bend-alter>\"], _y.raw = [\"<bend-alter>\", \"</bend-alter>\"], xml(_y, technical.bend.bendAlter)));\n                }\n                if (defined(technical.bend.preBend)) {\n                    bendChildren.push((_z = [\"<pre-bend />\"], _z.raw = [\"<pre-bend />\"], xml(_z)));\n                }\n                else if (defined(technical.bend.release)) {\n                    bendChildren.push((_0 = [\"<release />\"], _0.raw = [\"<release />\"], xml(_0)));\n                }\n                if (defined(technical.bend.withBar)) {\n                    var pcdata = (_1 = [\"\", \"\"], _1.raw = [\"\", \"\"], xml(_1, technical.bend.withBar.data));\n                    bendChildren.push((_2 = [\"<with-bar\", \">\", \"</with-bar>\"], _2.raw = [\"<with-bar\", \">\", \"</with-bar>\"], dangerous(_2, printStyleToXML(technical.bend.withBar) +\n                        placementToXML(technical.bend.withBar), pcdata)));\n                }\n                oChildren.push((_3 = [\"<bend\", \">\\n\", \"\\n</bend>\"], _3.raw = [\"<bend\", \">\\\\n\", \"\\\\n</bend>\"], dangerous(_3, printStyleToXML(technical.bend) +\n                    bendSoundToXML(technical.bend), bendChildren.join(\"\\n\").split(\"\\n\")\n                    .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            }\n            // \n            // <!ELEMENT tap (#PCDATA)>\n            // <!ATTLIST tap\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.tap) {\n                var pcdata = (_4 = [\"\", \"\"], _4.raw = [\"\", \"\"], xml(_4, technical.tap.data));\n                oChildren.push((_5 = [\"<tap\", \">\", \"</tap>\"], _5.raw = [\"<tap\", \">\", \"</tap>\"], dangerous(_5, printStyleToXML(technical.tap) +\n                    placementToXML(technical.tap), pcdata)));\n            }\n            // \n            // <!ATTLIST heel\n            //     substitution %yes-no; #IMPLIED\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.heel) {\n                var substitution = \"\";\n                if (defined(technical.heel.substitution)) {\n                    substitution += (_6 = [\" substitution=\\\"\", \"\\\"\"], _6.raw = [\" substitution=\\\"\", \"\\\"\"], yesNo(_6, technical.heel.substitution));\n                }\n                oChildren.push((_7 = [\"<heel\", \" />\"], _7.raw = [\"<heel\", \" />\"], dangerous(_7, substitution +\n                    printStyleToXML(technical.heel) +\n                    placementToXML(technical.heel))));\n            }\n            // <!ATTLIST toe\n            //     substitution %yes-no; #IMPLIED\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.toe) {\n                var substitution = \"\";\n                if (defined(technical.toe.substitution)) {\n                    substitution += (_8 = [\" substitution=\\\"\", \"\\\"\"], _8.raw = [\" substitution=\\\"\", \"\\\"\"], yesNo(_8, technical.toe.substitution));\n                }\n                oChildren.push((_9 = [\"<toe\", \" />\"], _9.raw = [\"<toe\", \" />\"], dangerous(_9, substitution +\n                    printStyleToXML(technical.toe) +\n                    placementToXML(technical.toe))));\n            }\n            // \n            // <!ATTLIST fingernails\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.fingernails) {\n                oChildren.push((_10 = [\"<fingernails\", \" />\"], _10.raw = [\"<fingernails\", \" />\"], dangerous(_10, printStyleToXML(technical.fingernails) +\n                    placementToXML(technical.fingernails))));\n            }\n            // \n            // <!ELEMENT hole (hole-type?, hole-closed, hole-shape?)>\n            // <!ATTLIST hole\n            //     %print-style;\n            //     %placement;\n            // >\n            // <!ELEMENT hole-type (#PCDATA)>\n            // <!ELEMENT hole-closed (#PCDATA)>\n            // <!ATTLIST hole-closed\n            //     location (right | bottom | left | top) #IMPLIED\n            // >\n            // <!ELEMENT hole-shape (#PCDATA)>\n            if (technical.hole) {\n                var holeChildren = [];\n                if (defined(technical.hole.holeType)) {\n                    holeChildren.push((_11 = [\"<hole-type>\", \"</hole-type>\"], _11.raw = [\"<hole-type>\", \"</hole-type>\"], xml(_11, technical.hole.holeType)));\n                }\n                if (defined(technical.hole.holeClosed)) {\n                    var holeClosedAttribs = \"\";\n                    if (defined(technical.hole.holeClosed.location)) {\n                        holeClosedAttribs = (_12 = [\" location=\\\"\", \"\\\"\"], _12.raw = [\" location=\\\"\", \"\\\"\"], xml(_12, holeLocationToXML[technical.hole.holeClosed.location]));\n                    }\n                    holeChildren.push((_13 = [\"<hole-closed\", \">\", \"</hole-closed>\"], _13.raw = [\"<hole-closed\", \">\", \"</hole-closed>\"], dangerous(_13, holeClosedAttribs, holeClosedTypeToXML[technical.hole.holeClosed.data])));\n                }\n                if (defined(technical.hole.holeShape)) {\n                    holeChildren.push((_14 = [\"<hole-shape>\", \"</hole-shape>\"], _14.raw = [\"<hole-shape>\", \"</hole-shape>\"], xml(_14, technical.hole.holeShape)));\n                }\n                oChildren.push((_15 = [\"<hole\", \">\", \"\\n</hole>\"], _15.raw = [\"<hole\", \">\", \"\\\\n</hole>\"], dangerous(_15, printStyleToXML(technical.hole) +\n                    placementToXML(technical.hole), holeChildren.join(\"\\n\").split(\"\\n\")\n                    .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            }\n            // \n            // <!ELEMENT arrow\n            //     ((arrow-direction, arrow-style?) | circular-arrow)>\n            // <!ATTLIST arrow\n            //     %print-style;\n            //     %placement;\n            // >\n            // <!ELEMENT arrow-direction (#PCDATA)>\n            // <!ELEMENT arrow-style (#PCDATA)>\n            // <!ELEMENT circular-arrow (#PCDATA)>\n            if (technical.arrow) {\n                var arrowChildren = [];\n                if (defined(technical.arrow.arrowDirection)) {\n                    arrowChildren.push((_16 = [\"<arrow-direction>\\n                        \", \"</arrow-direction>\"], _16.raw = [\"<arrow-direction>\\n                        \", \"</arrow-direction>\"], xml(_16, technical.arrow.arrowDirection)));\n                }\n                if (defined(technical.arrow.arrowStyle)) {\n                    arrowChildren.push((_17 = [\"<arrow-style>\\n                        \", \"</arrow-style>\"], _17.raw = [\"<arrow-style>\\n                        \", \"</arrow-style>\"], xml(_17, technical.arrow.arrowStyle)));\n                }\n                if (defined(technical.arrow.circularArrow)) {\n                    arrowChildren.push((_18 = [\"<circular-arrow>\\n                        \", \"</circular-arrow>\"], _18.raw = [\"<circular-arrow>\\n                        \", \"</circular-arrow>\"], xml(_18, technical.arrow.circularArrow)));\n                }\n                oChildren.push((_19 = [\"<arrow\", \">\", \"\\n</arrow>\"], _19.raw = [\"<arrow\", \">\", \"\\\\n</arrow>\"], dangerous(_19, printStyleToXML(technical.arrow) +\n                    placementToXML(technical.arrow), arrowChildren.join(\"\\n\").split(\"\\n\")\n                    .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            }\n            // \n            // <!ELEMENT handbell (#PCDATA)>\n            // <!ATTLIST handbell\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.handbell) {\n                var pcdata = (_20 = [\"\", \"\"], _20.raw = [\"\", \"\"], xml(_20, technical.handbell.data));\n                oChildren.push((_21 = [\"<handbell\", \">\", \"</handbell>\"], _21.raw = [\"<handbell\", \">\", \"</handbell>\"], dangerous(_21, printStyleToXML(technical.handbell) +\n                    placementToXML(technical.handbell), pcdata)));\n            }\n            // \n            // <!ELEMENT other-technical (#PCDATA)>\n            // <!ATTLIST other-technical\n            //     %print-style;\n            //     %placement;\n            // >\n            if (technical.otherTechnical) {\n                var pcdata = (_22 = [\"\", \"\"], _22.raw = [\"\", \"\"], xml(_22, technical.otherTechnical.data));\n                oChildren.push((_23 = [\"<other-technical\", \">\", \"</other-technical>\"], _23.raw = [\"<other-technical\", \">\", \"</other-technical>\"], dangerous(_23, printStyleToXML(technical.otherTechnical) +\n                    placementToXML(technical.otherTechnical), pcdata)));\n            }\n            nChildren.push((_24 = [\"<technical>\\n\", \"\\n</technical>\"], _24.raw = [\"<technical>\\\\n\", \"\\\\n</technical>\"], dangerous(_24, oChildren.join(\"\\n\").split(\"\\n\")\n                .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24;\n        });\n        (notation.articulations || []).forEach(function (articulation) {\n            var oChildren = [];\n            // <!ELEMENT articulations\n            //     ((accent | strong-accent | staccato | tenuto |\n            //       detached-legato | staccatissimo | spiccato |\n            //       scoop | plop | doit | falloff | breath-mark |\n            //       caesura | stress | unstress | other-articulation)*)>\n            // \n            // <!ATTLIST accent\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.accent) {\n                oChildren.push((_a = [\"<accent\", \" />\"], _a.raw = [\"<accent\", \" />\"], dangerous(_a, printStyleToXML(articulation.accent) +\n                    placementToXML(articulation.accent))));\n            }\n            // <!ATTLIST strong-accent\n            //     %print-style;\n            //     %placement;\n            //     type %up-down; \"up\"\n            // >\n            if (articulation.strongAccent) {\n                oChildren.push((_b = [\"<strong-accent\", \" />\"], _b.raw = [\"<strong-accent\", \" />\"], dangerous(_b, printStyleToXML(articulation.strongAccent) +\n                    placementToXML(articulation.strongAccent) +\n                    upDownToXML(articulation.strongAccent))));\n            }\n            // \n            // <!ATTLIST staccato\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.staccato) {\n                oChildren.push((_c = [\"<staccato\", \" />\"], _c.raw = [\"<staccato\", \" />\"], dangerous(_c, printStyleToXML(articulation.staccato) +\n                    placementToXML(articulation.staccato))));\n            }\n            // <!ATTLIST tenuto\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.tenuto) {\n                oChildren.push((_d = [\"<tenuto\", \" />\"], _d.raw = [\"<tenuto\", \" />\"], dangerous(_d, printStyleToXML(articulation.tenuto) +\n                    placementToXML(articulation.tenuto))));\n            }\n            // <!ATTLIST detached-legato\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.detachedLegato) {\n                oChildren.push((_e = [\"<detached-legato\", \" />\"], _e.raw = [\"<detached-legato\", \" />\"], dangerous(_e, printStyleToXML(articulation.detachedLegato) +\n                    placementToXML(articulation.detachedLegato))));\n            }\n            // \n            // <!ATTLIST staccatissimo\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.staccatissimo) {\n                oChildren.push((_f = [\"<staccatissimo\", \" />\"], _f.raw = [\"<staccatissimo\", \" />\"], dangerous(_f, printStyleToXML(articulation.staccatissimo) +\n                    placementToXML(articulation.staccatissimo))));\n            }\n            // \n            // <!ATTLIST spiccato\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.spiccato) {\n                oChildren.push((_g = [\"<spiccato\", \" />\"], _g.raw = [\"<spiccato\", \" />\"], dangerous(_g, printStyleToXML(articulation.spiccato) +\n                    placementToXML(articulation.spiccato))));\n            }\n            // \n            // <!ATTLIST scoop\n            //     %line-shape;\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.scoop) {\n                oChildren.push((_h = [\"<scoop\", \" />\"], _h.raw = [\"<scoop\", \" />\"], dangerous(_h, lineShapeToXML(articulation.scoop) +\n                    lineTypeToXML(articulation.scoop) +\n                    dashedFormattingToXML(articulation.scoop) +\n                    printStyleToXML(articulation.scoop) +\n                    placementToXML(articulation.scoop))));\n            }\n            // <!ATTLIST plop\n            //     %line-shape;\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.plop) {\n                oChildren.push((_j = [\"<plop\", \" />\"], _j.raw = [\"<plop\", \" />\"], dangerous(_j, lineShapeToXML(articulation.plop) +\n                    lineTypeToXML(articulation.plop) +\n                    dashedFormattingToXML(articulation.plop) +\n                    printStyleToXML(articulation.plop) +\n                    placementToXML(articulation.plop))));\n            }\n            // <!ATTLIST doit\n            //     %line-shape;\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.doit) {\n                oChildren.push((_k = [\"<doit\", \" />\"], _k.raw = [\"<doit\", \" />\"], dangerous(_k, lineShapeToXML(articulation.doit) +\n                    lineTypeToXML(articulation.doit) +\n                    dashedFormattingToXML(articulation.doit) +\n                    printStyleToXML(articulation.doit) +\n                    placementToXML(articulation.doit))));\n            }\n            // <!ATTLIST falloff\n            //     %line-shape;\n            //     %line-type;\n            //     %dashed-formatting;\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.falloff) {\n                oChildren.push((_l = [\"<falloff\", \" />\"], _l.raw = [\"<falloff\", \" />\"], dangerous(_l, lineShapeToXML(articulation.falloff) +\n                    lineTypeToXML(articulation.falloff) +\n                    dashedFormattingToXML(articulation.falloff) +\n                    printStyleToXML(articulation.falloff) +\n                    placementToXML(articulation.falloff))));\n            }\n            // \n            // <!ELEMENT breath-mark (#PCDATA)>\n            // <!ATTLIST breath-mark\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.breathMark) {\n                var pcdata = (_m = [\"\", \"\"], _m.raw = [\"\", \"\"], xml(_m, breathMarkTypeToXML[articulation.breathMark.type]));\n                oChildren.push((_o = [\"<breath-mark\", \">\", \"</breath-mark>\"], _o.raw = [\"<breath-mark\", \">\", \"</breath-mark>\"], dangerous(_o, printStyleToXML(articulation.breathMark) +\n                    placementToXML(articulation.breathMark), pcdata)));\n            }\n            // \n            // <!ATTLIST caesura\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.caesura) {\n                oChildren.push((_p = [\"<caesura\", \" />\"], _p.raw = [\"<caesura\", \" />\"], dangerous(_p, printStyleToXML(articulation.caesura) +\n                    placementToXML(articulation.caesura))));\n            }\n            // <!ATTLIST stress\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.stress) {\n                oChildren.push((_q = [\"<stress\", \" />\"], _q.raw = [\"<stress\", \" />\"], dangerous(_q, printStyleToXML(articulation.stress) +\n                    placementToXML(articulation.stress))));\n            }\n            // <!ATTLIST unstress\n            //     %print-style;\n            //     %placement;\n            // >\n            if (articulation.unstress) {\n                oChildren.push((_r = [\"<unstress\", \" />\"], _r.raw = [\"<unstress\", \" />\"], dangerous(_r, printStyleToXML(articulation.unstress) +\n                    placementToXML(articulation.unstress))));\n            }\n            // <!ELEMENT other-articulation (#PCDATA)>\n            // <!ATTLIST other-articulation\n            //     %print-style;\n            //     %placement;\n            // >\n            (articulation.otherArticulations || []).forEach(function (articulation) {\n                var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, articulation.data));\n                oChildren.push((_b = [\"<other-articulation\", \">\", \"</other-articulation>\"], _b.raw = [\"<other-articulation\", \">\", \"</other-articulation>\"], dangerous(_b, printStyleToXML(articulation) +\n                    placementToXML(articulation), pcdata)));\n                var _a, _b;\n            });\n            nChildren.push((_s = [\"<articulations>\\n\", \"\\n</articulations>\"], _s.raw = [\"<articulations>\\\\n\", \"\\\\n</articulations>\"], dangerous(_s, oChildren.join(\"\\n\").split(\"\\n\")\n                .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        });\n        (notation.dynamics || []).forEach(function (dynamics) {\n            nChildren.push(dynamicsToXML(dynamics));\n        });\n        (notation.fermatas || []).forEach(function (fermata) {\n            nChildren.push(fermataToXML(fermata));\n        });\n        (notation.arpeggiates || []).forEach(function (arpeggiate) {\n            // <!ATTLIST arpeggiate\n            //     number %number-level; #IMPLIED\n            //     direction %up-down; #IMPLIED\n            //     %position;\n            //     %placement;\n            //     %color;\n            // >\n            nChildren.push((_a = [\"<arpeggiate\", \" />\"], _a.raw = [\"<arpeggiate\", \" />\"], dangerous(_a, numberLevelToXML(arpeggiate) +\n                upDownToXML(arpeggiate) +\n                positionToXML(arpeggiate) +\n                placementToXML(arpeggiate) +\n                colorToXML(arpeggiate))));\n            var _a;\n        });\n        (notation.nonArpeggiates || []).forEach(function (nonArpeggiate) {\n            // <!ATTLIST non-arpeggiate\n            //     type %top-bottom; #REQUIRED\n            //     number %number-level; #IMPLIED\n            //     %position;\n            //     %placement;\n            //     %color;\n            // >\n            nChildren.push((_a = [\"<non-arpeggiate\", \" />\"], _a.raw = [\"<non-arpeggiate\", \" />\"], dangerous(_a, topBottomToXML(nonArpeggiate) +\n                numberLevelToXML(nonArpeggiate) +\n                positionToXML(nonArpeggiate) +\n                placementToXML(nonArpeggiate) +\n                colorToXML(nonArpeggiate))));\n            var _a;\n        });\n        (notation.accidentalMarks || []).forEach(function (accidentalMark) {\n            // <!ELEMENT accidental-mark (#PCDATA)>\n            // <!ATTLIST accidental-mark\n            //     %print-style;\n            //     %placement;\n            // >\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, accidentalMark.mark));\n            nChildren.push((_b = [\"<accidental-mark\", \">\", \"</accidental-mark>\"], _b.raw = [\"<accidental-mark\", \">\", \"</accidental-mark>\"], dangerous(_b, printStyleToXML(accidentalMark) +\n                placementToXML(accidentalMark), pcdata)));\n            var _a, _b;\n        });\n        (notation.otherNotations || []).forEach(function (otherNotation) {\n            // <!ELEMENT other-notation (#PCDATA)>\n            // <!ATTLIST other-notation\n            //     type %start-stop-single; #REQUIRED\n            //     number %number-level; \"1\"\n            //     %print-object;\n            //     %print-style;\n            //     %placement;\n            // >\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, otherNotation.data));\n            nChildren.push((_b = [\"<other-notation\", \">\", \"</other-notation>\"], _b.raw = [\"<other-notation\", \">\", \"</other-notation>\"], dangerous(_b, startStopSingleToXML(otherNotation) +\n                numberLevelToXML(otherNotation) +\n                printObjectToXML(otherNotation) +\n                printStyleToXML(otherNotation) +\n                placementToXML(otherNotation), pcdata)));\n            var _a, _b;\n        });\n        elements.push((_b = [\"<notations\", \">\\n\", \"\\n</notations>\"], _b.raw = [\"<notations\", \">\\\\n\", \"\\\\n</notations>\"], dangerous(_b, notationsAttribs, nChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b;\n    });\n    (note.lyrics || []).forEach(function (lyric) {\n        // <!ELEMENT lyric\n        //     ((((syllabic?, text),\n        //        (elision?, syllabic?, text)*, extend?) |\n        //        extend | laughing | humming),\n        //       end-line?, end-paragraph?, %editorial;)>\n        // <!ATTLIST lyric\n        //     number NMTOKEN #IMPLIED\n        //     name CDATA #IMPLIED\n        //     %justify;\n        //     %position;\n        //     %placement;\n        //     %color;\n        //     %print-object;\n        // >\n        // TODO: should validate other (e.g., no end-paragraph after syllabic)\n        var lyricAttribs = \"\" +\n            numberLevelToXML(lyric) +\n            nameToXML(lyric) +\n            justifyToXML(lyric) +\n            positionToXML(lyric) +\n            placementToXML(lyric) +\n            colorToXML(lyric) +\n            printObjectToXML(lyric);\n        var lyricChildren = [];\n        (lyric.lyricParts || []).forEach(function (part) {\n            // relies on part._class as set in musicxml-interfaces\n            switch (part._class) {\n                case \"Syllabic\":\n                    // <!ELEMENT syllabic (#PCDATA)>\n                    lyricChildren.push((_a = [\"<syllabic>\", \"</syllabic>\"], _a.raw = [\"<syllabic>\", \"</syllabic>\"], dangerous(_a, syllabicTypeToXML[part.data])));\n                    break;\n                case \"Text\":\n                    // <!ELEMENT text (#PCDATA)>\n                    // <!ATTLIST text\n                    //     %font;\n                    //     %color;\n                    //     %text-decoration;\n                    //     %text-rotation;\n                    //     %letter-spacing;\n                    //     xml:lang NMTOKEN #IMPLIED TODO musicxml-interfaces\n                    //     %text-direction;\n                    var textpcdata = (_b = [\"\", \"\"], _b.raw = [\"\", \"\"], xml(_b, part.data));\n                    lyricChildren.push((_c = [\"<text\", \">\", \"</text>\"], _c.raw = [\"<text\", \">\", \"</text>\"], dangerous(_c, fontToXML(part) +\n                        colorToXML(part) +\n                        textDecorationToXML(part) +\n                        textRotationToXML(part) +\n                        letterSpacingToXML(part) +\n                        textDirectionToXML(part), textpcdata)));\n                    break;\n                case \"Elision\":\n                    // <!ELEMENT elision (#PCDATA)>\n                    // <!ATTLIST elision\n                    //     %font;\n                    //     %color;\n                    // >\n                    var pcdata = (_d = [\"\", \"\"], _d.raw = [\"\", \"\"], xml(_d, part.data));\n                    lyricChildren.push((_e = [\"<elision\", \">\", \"</elision>\"], _e.raw = [\"<elision\", \">\", \"</elision>\"], dangerous(_e, startStopContinueToXML(part) +\n                        printStyleToXML(part), pcdata)));\n                    break;\n                case \"Extend\":\n                    // <!ELEMENT extend EMPTY>\n                    // <!ATTLIST extend\n                    //     type %start-stop-continue; #IMPLIED\n                    //     %print-style;\n                    // >\n                    lyricChildren.push((_f = [\"<extend\", \" />\"], _f.raw = [\"<extend\", \" />\"], dangerous(_f, startStopContinueToXML(part) +\n                        printStyleToXML(part))));\n                    break;\n                case \"Laughing\":\n                    // <!ELEMENT laughing EMPTY>\n                    lyricChildren.push((_g = [\"<laughing />\"], _g.raw = [\"<laughing />\"], xml(_g)));\n                    break;\n                case \"Humming\":\n                    // <!ELEMENT humming EMPTY>\n                    lyricChildren.push((_h = [\"<humming />\"], _h.raw = [\"<humming />\"], xml(_h)));\n                    break;\n                case \"EndLine\":\n                    // <!ELEMENT end-line EMPTY>\n                    lyricChildren.push((_j = [\"<end-line />\"], _j.raw = [\"<end-line />\"], xml(_j)));\n                    break;\n                case \"EndParagraph\":\n                    // <!ELEMENT end-paragraph EMPTY>\n                    lyricChildren.push((_k = [\"<end-paragraph />\"], _k.raw = [\"<end-paragraph />\"], xml(_k)));\n                    break;\n                case \"Footnote\":\n                case \"Level\":\n                case \"Editorial\":\n                    lyricChildren = lyricChildren.concat(editorialToXML(part));\n                    break;\n            }\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        });\n        elements.push((_a = [\"<lyric\", \">\\n\", \"\\n</lyric>\"], _a.raw = [\"<lyric\", \">\\\\n\", \"\\\\n</lyric>\"], dangerous(_a, lyricAttribs, lyricChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a;\n    });\n    if (defined(note.play)) {\n        // <!ELEMENT play ((ipa | mute | semi-pitched | other-play)*)>\n        // <!ATTLIST play\n        //     id IDREF #IMPLIED\n        // >\n        var playAttribs = \"\";\n        var playChildren = [];\n        // TODO: musicxml-interfaces is missing play.id!!\n        // if (defined(note.play.id)) {\n        //     playAttribs += xml ` id=\"${note.play.id}\"`;\n        // }\n        // <!ELEMENT ipa (#PCDATA)>\n        if (defined(note.play.ipa)) {\n            playChildren.push((_14 = [\"<ipa>\", \"</ipa>\"], _14.raw = [\"<ipa>\", \"</ipa>\"], xml(_14, note.play.ipa)));\n        }\n        // <!ELEMENT mute (#PCDATA)>\n        if (defined(note.play.mute)) {\n            playChildren.push((_15 = [\"<mute>\", \"</mute>\"], _15.raw = [\"<mute>\", \"</mute>\"], xml(_15, note.play.mute)));\n        }\n        // <!ELEMENT semi-pitched (#PCDATA)>\n        if (defined(note.play.semiPitched)) {\n            playChildren.push((_16 = [\"<semi-pitched>\", \"</semi-pitched>\"], _16.raw = [\"<semi-pitched>\", \"</semi-pitched>\"], xml(_16, note.play.semiPitched)));\n        }\n        // <!ELEMENT other-play (#PCDATA)>\n        // <!ATTLIST other-play\n        //     type CDATA #REQUIRED\n        // >\n        if (defined(note.play.otherPlay)) {\n            var oPcdata = (_17 = [\"\", \"\"], _17.raw = [\"\", \"\"], xml(_17, note.play.otherPlay.data));\n            var oAttribs = \"\";\n            if (defined(note.play.otherPlay.type)) {\n                oAttribs += (_18 = [\" type=\\\"\", \"\\\"\"], _18.raw = [\" type=\\\"\", \"\\\"\"], xml(_18, note.play.otherPlay.type));\n            }\n            playChildren.push((_19 = [\"<other-play\", \">\", \"</other-play>\"], _19.raw = [\"<other-play\", \">\", \"</other-play>\"], dangerous(_19, oAttribs, oPcdata)));\n        }\n        elements.push((_20 = [\"<play\", \">\\n\", \"\\n</play>\"], _20.raw = [\"<play\", \">\\\\n\", \"\\\\n</play>\"], dangerous(_20, playAttribs, playChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n    }\n    return (_21 = [\"<note\", \">\\n\", \"\\n</note>\"], _21.raw = [\"<note\", \">\\\\n\", \"\\\\n</note>\"], dangerous(_21, attribs, elements.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21;\n}\nfunction figuredBassToXML(figuredBass) {\n    // <!ELEMENT figured-bass (figure+, duration?, %editorial;)>\n    // <!ATTLIST figured-bass\n    //     %print-style;\n    //     %printout;\n    //     parentheses %yes-no; #IMPLIED\n    // >\n    var attribs = \"\" +\n        printStyleToXML(figuredBass) +\n        printoutToXML(figuredBass);\n    if (defined(figuredBass.parentheses)) {\n        attribs += (_a = [\" parentheses=\\\"\", \"\\\"\"], _a.raw = [\" parentheses=\\\"\", \"\\\"\"], yesNo(_a, figuredBass.parentheses));\n    }\n    var children = [];\n    children = children.concat(staffDebugInfoToXMLComment(figuredBass));\n    (figuredBass.figures || []).forEach(function (figure) {\n        // <!ELEMENT figure (prefix?, figure-number?, suffix?, extend?)>\n        var fChildren = [];\n        // <!ELEMENT prefix (#PCDATA)>\n        // <!ATTLIST prefix\n        //     %print-style;\n        // >\n        if (defined(figure.prefix)) {\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, figure.prefix.data));\n            fChildren.push((_b = [\"<prefix\", \">\", \"</prefix>\"], _b.raw = [\"<prefix\", \">\", \"</prefix>\"], dangerous(_b, printStyleToXML(figure.prefix), pcdata)));\n        }\n        // <!ELEMENT figure-number (#PCDATA)>\n        // <!ATTLIST figure-number\n        //     %print-style;\n        // >\n        if (defined(figure.figureNumber)) {\n            var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, figure.figureNumber.data));\n            fChildren.push((_d = [\"<figure-number\", \">\", \"</figure-number>\"], _d.raw = [\"<figure-number\", \">\", \"</figure-number>\"], dangerous(_d, printStyleToXML(figure.figureNumber), pcdata)));\n        }\n        // <!ELEMENT suffix (#PCDATA)>\n        // <!ATTLIST suffix\n        //     %print-style;\n        // >\n        if (defined(figure.suffix)) {\n            var pcdata = (_e = [\"\", \"\"], _e.raw = [\"\", \"\"], xml(_e, figure.suffix.data));\n            fChildren.push((_f = [\"<suffix\", \">\", \"</suffix>\"], _f.raw = [\"<suffix\", \">\", \"</suffix>\"], dangerous(_f, printStyleToXML(figure.suffix), pcdata)));\n        }\n        children.push((_g = [\"<figure>\\n\", \"\\n</figure>\"], _g.raw = [\"<figure>\\\\n\", \"\\\\n</figure>\"], dangerous(_g, fChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b, _c, _d, _e, _f, _g;\n    });\n    if (defined(figuredBass.duration)) {\n        children.push((_b = [\"<duration>\", \"</duration>\"], _b.raw = [\"<duration>\", \"</duration>\"], xml(_b, figuredBass.duration)));\n    }\n    children = children.concat(editorialToXML(figuredBass));\n    return (_c = [\"<figured-bass\", \">\\n\", \"\\n</figured-bass>\"], _c.raw = [\"<figured-bass\", \">\\\\n\", \"\\\\n</figured-bass>\"], dangerous(_c, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nvar barlineLocationToXML = {\n    1: \"right\",\n    2: \"middle\",\n    0: \"left\"\n};\nfunction barlineToXML(barline) {\n    // <!ELEMENT barline (bar-style?, %editorial;, wavy-line?,\n    //     segno?, coda?, (fermata, fermata?)?, ending?, repeat?)>\n    // <!ATTLIST barline\n    //     location (right | left | middle) \"right\"\n    //     segno CDATA #IMPLIED\n    //     coda CDATA #IMPLIED\n    //     divisions CDATA #IMPLIED\n    // >\n    var children = [];\n    var attribs = \"\";\n    children = children.concat(staffDebugInfoToXMLComment(barline));\n    if (defined(barline.barStyle)) {\n        children.push(barStyleToXML(barline.barStyle));\n    }\n    children = children.concat(editorialToXML(barline));\n    if (defined(barline.wavyLine)) {\n        children.push(wavyLineToXML(barline.wavyLine));\n    }\n    if (defined(barline.segno)) {\n        children.push(segnoToXML(barline.segno));\n    }\n    if (defined(barline.coda)) {\n        children.push(codaToXML(barline.coda));\n    }\n    (barline.fermatas || []).forEach(function (fermata) {\n        children.push(fermataToXML(fermata));\n    });\n    if (defined(barline.ending)) {\n        children.push(endingToXML(barline.ending));\n    }\n    if (defined(barline.repeat)) {\n        children.push(repeatToXML(barline.repeat));\n    }\n    if (defined(barline.location)) {\n        attribs += (_a = [\" location=\\\"\", \"\\\"\"], _a.raw = [\" location=\\\"\", \"\\\"\"], xml(_a, barlineLocationToXML[barline.location]));\n    }\n    if (defined(barline.segnoAttrib)) {\n        attribs += (_b = [\" segno=\\\"\", \"\\\"\"], _b.raw = [\" segno=\\\"\", \"\\\"\"], xml(_b, barline.segnoAttrib));\n    }\n    if (defined(barline.codaAttrib)) {\n        attribs += (_c = [\" coda=\\\"\", \"\\\"\"], _c.raw = [\" coda=\\\"\", \"\\\"\"], xml(_c, barline.codaAttrib));\n    }\n    if (defined(barline.divisions)) {\n        attribs += (_d = [\" divisions=\\\"\", \"\\\"\"], _d.raw = [\" divisions=\\\"\", \"\\\"\"], xml(_d, barline.divisions));\n    }\n    return (_e = [\"<barline\", \">\\n\", \"\\n</barline>\"], _e.raw = [\"<barline\", \">\\\\n\", \"\\\\n</barline>\"], dangerous(_e, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e;\n}\nfunction directionTypeToXML(d) {\n    // <!ELEMENT direction-type (rehearsal+ | segno+ | words+ |\n    var children = [];\n    (d.rehearsals || []).forEach(function (rehearsal) {\n        children.push(rehearsalToXML(rehearsal));\n    });\n    (d.segnos || []).forEach(function (segno) {\n        children.push(segnoToXML(segno));\n    });\n    (d.words || []).forEach(function (words) {\n        children.push(wordsToXML(words));\n    });\n    //     coda+ | wedge | dynamics+ | dashes | bracket | pedal |\n    (d.codas || []).forEach(function (coda) {\n        children.push(codaToXML(coda));\n    });\n    if (defined(d.wedge)) {\n        children.push(wedgeToXML(d.wedge));\n    }\n    if (defined(d.dynamics)) {\n        children.push(dynamicsToXML(d.dynamics));\n    }\n    if (defined(d.dashes)) {\n        children.push(dashesToXML(d.dashes));\n    }\n    if (defined(d.bracket)) {\n        children.push(bracketToXML(d.bracket));\n    }\n    if (defined(d.pedal)) {\n        children.push(pedalToXML(d.pedal));\n    }\n    //     metronome | octave-shift | harp-pedals | damp | damp-all |\n    if (defined(d.metronome)) {\n        children.push(metronomeToXML(d.metronome));\n    }\n    if (defined(d.octaveShift)) {\n        children.push(octaveShiftToXML(d.octaveShift));\n    }\n    if (defined(d.harpPedals)) {\n        children.push(harpPedalsToXML(d.harpPedals));\n    }\n    if (defined(d.damp)) {\n        children.push(dampToXML(d.damp));\n    }\n    if (defined(d.dampAll)) {\n        children.push(dampAllToXML(d.dampAll));\n    }\n    //     eyeglasses | string-mute | scordatura | image |\n    if (defined(d.eyeglasses)) {\n        children.push(eyeglassesToXML(d.eyeglasses));\n    }\n    if (defined(d.stringMute)) {\n        children.push(stringMuteToXML(d.stringMute));\n    }\n    if (defined(d.scordatura)) {\n        children.push(scordaturaToXML(d.scordatura));\n    }\n    if (defined(d.image)) {\n        children.push(imageToXML(d.image));\n    }\n    //     principal-voice | accordion-registration | percussion+ |\n    if (defined(d.principalVoice)) {\n        children.push(principalVoiceToXML(d.principalVoice));\n    }\n    if (defined(d.accordionRegistration)) {\n        children.push(accordionRegistrationToXML(d.accordionRegistration));\n    }\n    (d.percussions || []).forEach(function (p) {\n        children.push(percussionToXML(p));\n    });\n    //     other-direction)>\n    if (defined(d.otherDirection)) {\n        children.push(otherDirectionToXML(d.otherDirection));\n    }\n    return (_a = [\"<direction-type>\\n\", \"\\n</direction-type>\"], _a.raw = [\"<direction-type>\\\\n\", \"\\\\n</direction-type>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction offsetToXML(offset) {\n    // <!ELEMENT offset (#PCDATA)>\n    // <!ATTLIST offset\n    //     sound %yes-no; #IMPLIED\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, offset.data || \"\"));\n    var attribs = (_b = [\" sound=\\\"\", \"\\\"\"], _b.raw = [\" sound=\\\"\", \"\\\"\"], yesNo(_b, offset.sound));\n    return (_c = [\"<offset\", \">\", \"</offset>\"], _c.raw = [\"<offset\", \">\", \"</offset>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction rehearsalToXML(rehearsal) {\n    // <!ELEMENT rehearsal (#PCDATA)>\n    // <!ATTLIST rehearsal\n    //     %text-formatting;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, rehearsal.data));\n    return (_b = [\"<rehearsal\", \">\", \"</rehearsal>\"], _b.raw = [\"<rehearsal\", \">\", \"</rehearsal>\"], dangerous(_b, textFormattingToXML(rehearsal), pcdata));\n    var _a, _b;\n}\nfunction wordsToXML(words) {\n    // <!ELEMENT words (#PCDATA)>\n    // <!ATTLIST words\n    //     %text-formatting;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, words.data));\n    return (_b = [\"<words\", \">\", \"</words>\"], _b.raw = [\"<words\", \">\", \"</words>\"], dangerous(_b, textFormattingToXML(words), pcdata));\n    var _a, _b;\n}\nvar wedgeTypeToXML = (_d = {},\n    _d[WedgeType.Diminuendo] = \"diminuendo\",\n    _d[WedgeType.Crescendo] = \"crescendo\",\n    _d[WedgeType.Stop] = \"stop\",\n    _d[WedgeType.Continue] = \"continue\",\n    _d\n);\nfunction wedgeToXML(wedge) {\n    // <!ELEMENT wedge EMPTY>\n    // <!ATTLIST wedge\n    //     type (crescendo | diminuendo | stop | continue) #REQUIRED\n    //     number %number-level; #IMPLIED\n    //     spread %tenths; #IMPLIED\n    //     niente %yes-no; #IMPLIED\n    //     %line-type;\n    //     %dashed-formatting;\n    //     %position;\n    //     %color;\n    // >\n    var attribs = \"\" +\n        (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, wedgeTypeToXML[wedge.type])) +\n        numberLevelToXML(wedge);\n    if (defined(wedge.spread)) {\n        attribs += (_b = [\" spread=\\\"\", \"\\\"\"], _b.raw = [\" spread=\\\"\", \"\\\"\"], xml(_b, wedge.spread));\n    }\n    if (defined(wedge.niente)) {\n        attribs += (_c = [\" niente=\\\"\", \"\\\"\"], _c.raw = [\" niente=\\\"\", \"\\\"\"], yesNo(_c, wedge.niente));\n    }\n    attribs +=\n        lineTypeToXML(wedge) +\n            dashedFormattingToXML(wedge) +\n            positionToXML(wedge) +\n            colorToXML(wedge);\n    return (_d = [\"<wedge\", \" />\"], _d.raw = [\"<wedge\", \" />\"], dangerous(_d, attribs));\n    var _a, _b, _c, _d;\n}\nfunction dynamicsToXML(dynamics) {\n    // <!ELEMENT dynamics ((p | pp | ppp | pppp | ppppp | pppppp |\n    //     f | ff | fff | ffff | fffff | ffffff | mp | mf | sf |\n    //     sfp | sfpp | fp | rf | rfz | sfz | sffz | fz |\n    //     other-dynamics)*)>\n    // <!ATTLIST dynamics\n    //     %print-style-align;\n    //     %placement;\n    //     %text-decoration;\n    //     %enclosure;\n    // >\n    // <!ELEMENT p EMPTY>\n    // ...\n    // <!ELEMENT other-dynamics (#PCDATA)>\n    var oChildren = [];\n    Object.keys(dynamics || {}).forEach(function (key) {\n        var subDynamic = dynamics[key];\n        if (!!subDynamic && [\"p\", \"pp\", \"ppp\", \"pppp\", \"ppppp\", \"pppppp\",\n            \"f\", \"ff\", \"fff\", \"ffff\", \"fffff\", \"ffffff\", \"mp\", \"mf\", \"sf\",\n            \"sfp\", \"sfpp\", \"fp\", \"rf\", \"rfz\", \"sfz\", \"sffz\", \"fz\"].indexOf(key) !== -1) {\n            oChildren.push((_a = [\"<\", \" />\"], _a.raw = [\"<\", \" />\"], dangerous(_a, key)));\n        }\n        var _a;\n    });\n    if (dynamics.otherDynamics) {\n        oChildren.push((_a = [\"<other-dynamics>\", \"</other-dynamics>\"], _a.raw = [\"<other-dynamics>\", \"</other-dynamics>\"], xml(_a, dynamics.otherDynamics)));\n    }\n    return (_b = [\"<dynamics\", \">\\n\", \"\\n</dynamics>\"], _b.raw = [\"<dynamics\", \">\\\\n\", \"\\\\n</dynamics>\"], dangerous(_b, printStyleAlignToXML(dynamics) +\n        placementToXML(dynamics) +\n        textDecorationToXML(dynamics) +\n        enclosureToXML(dynamics), oChildren.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction dashesToXML(dashes) {\n    // <!ELEMENT dashes EMPTY>\n    // <!ATTLIST dashes\n    //     type %start-stop-continue; #REQUIRED\n    //     number %number-level; #IMPLIED\n    //     %dashed-formatting;\n    //     %position;\n    //     %color;\n    // >\n    var attribs = \"\" +\n        startStopContinueToXML(dashes) +\n        numberLevelToXML(dashes) +\n        dashedFormattingToXML(dashes) +\n        positionToXML(dashes) +\n        colorToXML(dashes);\n    return (_a = [\"<dashes\", \" />\"], _a.raw = [\"<dashes\", \" />\"], dangerous(_a, attribs));\n    var _a;\n}\nvar lineEndTypeToXML = (_e = {},\n    _e[LineEndType.None] = \"none\",\n    _e[LineEndType.Both] = \"both\",\n    _e[LineEndType.Arrow] = \"arrow\",\n    _e[LineEndType.Down] = \"down\",\n    _e[LineEndType.Up] = \"up\",\n    _e\n);\nfunction bracketToXML(bracket) {\n    // <!ELEMENT bracket EMPTY>\n    // <!ATTLIST bracket\n    //     type %start-stop-continue; #REQUIRED\n    //     number %number-level; #IMPLIED\n    //     line-end (up | down | both | arrow | none) #REQUIRED\n    //     end-length %tenths; #IMPLIED\n    //     %line-type;\n    //     %dashed-formatting;\n    //     %position;\n    //     %color;\n    // >\n    var attribs = \"\" +\n        startStopContinueToXML(bracket) +\n        numberLevelToXML(bracket);\n    attribs += (_a = [\" line-end=\\\"\", \"\\\"\"], _a.raw = [\" line-end=\\\"\", \"\\\"\"], xml(_a, lineEndTypeToXML[bracket.lineEnd]));\n    if (defined(bracket.endLength)) {\n        attribs += (_b = [\" end-length=\\\"\", \"\\\"\"], _b.raw = [\" end-length=\\\"\", \"\\\"\"], xml(_b, bracket.endLength));\n    }\n    attribs +=\n        lineTypeToXML(bracket) +\n            dashedFormattingToXML(bracket) +\n            positionToXML(bracket) +\n            colorToXML(bracket);\n    return (_c = [\"<bracket\", \" />\"], _c.raw = [\"<bracket\", \" />\"], dangerous(_c, attribs));\n    var _a, _b, _c;\n}\nvar pedalTypeToXML = (_f = {},\n    _f[PedalType.Change] = \"change\",\n    _f[PedalType.Start] = \"start\",\n    _f[PedalType.Stop] = \"stop\",\n    _f[PedalType.Continue] = \"continue\",\n    _f\n);\nfunction pedalToXML(pedal) {\n    // <!ELEMENT pedal EMPTY>\n    // <!ATTLIST pedal\n    //     type (start | stop | continue | change) #REQUIRED\n    //     line %yes-no; #IMPLIED\n    //     sign %yes-no; #IMPLIED\n    //     %print-style-align;\n    // >\n    var attribs = \"\" +\n        (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, pedalTypeToXML[pedal.type]));\n    if (defined(pedal.line)) {\n        attribs += (_b = [\" line=\\\"\", \"\\\"\"], _b.raw = [\" line=\\\"\", \"\\\"\"], yesNo(_b, pedal.line));\n    }\n    if (defined(pedal.sign)) {\n        attribs += (_c = [\" sign=\\\"\", \"\\\"\"], _c.raw = [\" sign=\\\"\", \"\\\"\"], yesNo(_c, pedal.sign));\n    }\n    attribs += printStyleAlignToXML(pedal);\n    return (_d = [\"<pedal\", \" />\"], _d.raw = [\"<pedal\", \" />\"], dangerous(_d, attribs));\n    var _a, _b, _c, _d;\n}\nfunction metronomeToXML(metronome) {\n    // <!ELEMENT metronome\n    //     ((beat-unit, beat-unit-dot*,\n    //      (per-minute | (beat-unit, beat-unit-dot*))) |\n    //     (metronome-note+, (metronome-relation, metronome-note+)?))>\n    // <!ATTLIST metronome\n    //     %print-style-align;\n    //     %justify;\n    //     parentheses %yes-no; #IMPLIED\n    // >\n    var children = [];\n    var attribs = \"\" +\n        printStyleAlignToXML(metronome) +\n        justifyToXML(metronome);\n    if (defined(metronome.parentheses)) {\n        attribs += (_a = [\" parentheses=\\\"\", \"\\\"\"], _a.raw = [\" parentheses=\\\"\", \"\\\"\"], yesNo(_a, metronome.parentheses));\n    }\n    if (defined(metronome.beatUnit)) {\n        // <!ELEMENT beat-unit (#PCDATA)>\n        children.push((_b = [\"<beat-unit>\", \"</beat-unit>\"], _b.raw = [\"<beat-unit>\", \"</beat-unit>\"], xml(_b, metronome.beatUnit)));\n    }\n    (metronome.beatUnitDots || []).forEach(function () {\n        // <!ELEMENT beat-unit-dot EMPTY>\n        children.push((_a = [\"<beat-unit-dot />\"], _a.raw = [\"<beat-unit-dot />\"], xml(_a)));\n        var _a;\n    });\n    if (defined(metronome.perMinute)) {\n        // <!ELEMENT per-minute (#PCDATA)>\n        // <!ATTLIST per-minute\n        //     %font;\n        // >\n        var pcdata = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, metronome.perMinute.data));\n        children.push((_d = [\"<per-minute\", \">\", \"</per-minute>\"], _d.raw = [\"<per-minute\", \">\", \"</per-minute>\"], dangerous(_d, fontToXML(metronome.perMinute), pcdata)));\n    }\n    else {\n        if (defined(metronome.beatUnitChange)) {\n            // <!ELEMENT beat-unit (#PCDATA)>\n            children.push((_e = [\"<beat-unit>\", \"</beat-unit>\"], _e.raw = [\"<beat-unit>\", \"</beat-unit>\"], xml(_e, metronome.beatUnitChange)));\n        }\n        (metronome.beatUnitDotsChange || []).forEach(function () {\n            // <!ELEMENT beat-unit-dot EMPTY>\n            children.push((_a = [\"<beat-unit-dot />\"], _a.raw = [\"<beat-unit-dot />\"], xml(_a)));\n            var _a;\n        });\n    }\n    // TODO musicxml-interfaces second beat-unit!!\n    (metronome.metronomeNotes || []).forEach(function (note) {\n        // <!ELEMENT metronome-note\n        //     (metronome-type, metronome-dot*,\n        //      metronome-beam*, metronome-tuplet?)>\n        var oChildren = [];\n        if (defined(note.metronomeType)) {\n            // <!ELEMENT metronome-type (#PCDATA)>\n            oChildren.push((_a = [\"<metronome-type>\", \"</metronome-type>\"], _a.raw = [\"<metronome-type>\", \"</metronome-type>\"], xml(_a, note.metronomeType)));\n        }\n        (note.metronomeDots || []).forEach(function () {\n            // <!ELEMENT metronome-dot EMPTY>\n            oChildren.push((_a = [\"<metronome-dot />\"], _a.raw = [\"<metronome-dot />\"], xml(_a)));\n            var _a;\n        });\n        (note.metronomeBeams || []).forEach(function (beam) {\n            // <!ELEMENT metronome-beam (#PCDATA)>\n            // <!ATTLIST metronome-beam\n            //     number %beam-level; \"1\"\n            // >\n            var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, beam.data));\n            oChildren.push((_b = [\"<metronome-beam\", \">\", \"</metronome-beam>\"], _b.raw = [\"<metronome-beam\", \">\", \"</metronome-beam>\"], dangerous(_b, numberLevelToXML(beam), pcdata)));\n            var _a, _b;\n        });\n        if (defined(note.metronomeTuplet)) {\n            oChildren.push(metronomeTupletToXML(note.metronomeTuplet));\n        }\n        children.push((_b = [\"<metronome-note>\\n\", \"\\n</metronome-note>\"], _b.raw = [\"<metronome-note>\\\\n\", \"\\\\n</metronome-note>\"], dangerous(_b, oChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b;\n    });\n    if (defined(metronome.metronomeRelation)) {\n        // <!ELEMENT metronome-relation (#PCDATA)>\n        children.push((_f = [\"<metronome-relation>\", \"</metronome-relation>\"], _f.raw = [\"<metronome-relation>\", \"</metronome-relation>\"], xml(_f, metronome.metronomeRelation)));\n    }\n    return (_g = [\"<metronome\", \">\\n\", \"\\n</metronome>\"], _g.raw = [\"<metronome\", \">\\\\n\", \"\\\\n</metronome>\"], dangerous(_g, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g;\n}\nfunction metronomeTupletToXML(metronomeTuplet) {\n    // <!ELEMENT metronome-tuplet\n    //     (actual-notes, normal-notes,\n    //      (normal-type, normal-dot*)?)>\n    // <!ATTLIST metronome-tuplet\n    //     type %start-stop; #REQUIRED\n    //     bracket %yes-no; #IMPLIED\n    //     show-number (actual | both | none) #IMPLIED\n    // >\n    var children = [];\n    var attribs = \"\" +\n        startStopToXML(metronomeTuplet);\n    if (defined(metronomeTuplet.bracket)) {\n        attribs += (_a = [\" bracket=\\\"\", \"\\\"\"], _a.raw = [\" bracket=\\\"\", \"\\\"\"], yesNo(_a, metronomeTuplet.bracket));\n    }\n    if (defined(metronomeTuplet.showNumber)) {\n        attribs += (_b = [\" show-number=\\\"\", \"\\\"\"], _b.raw = [\" show-number=\\\"\", \"\\\"\"], xml(_b, actualBothNoneToXML[metronomeTuplet.showNumber]));\n    }\n    if (metronomeTuplet.actualNotes) {\n        children.push((_c = [\"<actual-notes>\", \"</actual-notes>\"], _c.raw = [\"<actual-notes>\", \"</actual-notes>\"], xml(_c, metronomeTuplet.actualNotes)));\n    }\n    if (metronomeTuplet.normalNotes) {\n        children.push((_d = [\"<normal-notes>\", \"</normal-notes>\"], _d.raw = [\"<normal-notes>\", \"</normal-notes>\"], xml(_d, metronomeTuplet.normalNotes)));\n    }\n    if (metronomeTuplet.normalType) {\n        children.push((_e = [\"<normal-type>\", \"</normal-type>\"], _e.raw = [\"<normal-type>\", \"</normal-type>\"], xml(_e, metronomeTuplet.normalType)));\n    }\n    (metronomeTuplet.normalDots || []).forEach(function () {\n        children.push((_a = [\"<normal-dot />\"], _a.raw = [\"<normal-dot />\"], xml(_a)));\n        var _a;\n    });\n    return (_f = [\"<metronome-tuplet\", \">\\n\", \"\\n</metronome-tuplet>\"], _f.raw = [\"<metronome-tuplet\", \">\\\\n\", \"\\\\n</metronome-tuplet>\"], dangerous(_f, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f;\n}\nvar octaveShiftTypeToXML = (_g = {},\n    _g[OctaveShiftType.Down] = \"down\",\n    _g[OctaveShiftType.Stop] = \"stop\",\n    _g[OctaveShiftType.Up] = \"up\",\n    _g[OctaveShiftType.Continue] = \"continue\",\n    _g\n);\nfunction octaveShiftToXML(octaveShift) {\n    // <!ELEMENT octave-shift EMPTY>\n    // <!ATTLIST octave-shift\n    //     type (up | down | stop | continue) #REQUIRED\n    //     number %number-level; #IMPLIED\n    //     size CDATA \"8\"\n    //     %dashed-formatting;\n    //     %print-style;\n    // >\n    var attribs = \"\" +\n        (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, octaveShiftTypeToXML[octaveShift.type])) +\n        numberLevelToXML(octaveShift);\n    if (defined(octaveShift.size)) {\n        attribs += (_b = [\" size=\\\"\", \"\\\"\"], _b.raw = [\" size=\\\"\", \"\\\"\"], xml(_b, octaveShift.size));\n    }\n    attribs +=\n        dashedFormattingToXML(octaveShift) +\n            printStyleToXML(octaveShift);\n    return (_c = [\"<octave-shift\", \" />\"], _c.raw = [\"<octave-shift\", \" />\"], dangerous(_c, attribs));\n    var _a, _b, _c;\n}\nfunction harpPedalsToXML(harpPedals) {\n    // <!ELEMENT harp-pedals (pedal-tuning)+>\n    // <!ATTLIST harp-pedals\n    //     %print-style-align;\n    // >\n    // <!ELEMENT pedal-tuning (pedal-step, pedal-alter)>\n    // <!ELEMENT pedal-step (#PCDATA)>\n    // <!ELEMENT pedal-alter (#PCDATA)>\n    var children = [];\n    (harpPedals.pedalTunings || []).forEach(function (tuning) {\n        var nChildren = [];\n        if (tuning.pedalStep) {\n            nChildren.push((_a = [\"<pedal-step>\", \"</pedal-step>\"], _a.raw = [\"<pedal-step>\", \"</pedal-step>\"], xml(_a, tuning.pedalStep)));\n        }\n        if (tuning.pedalAlter) {\n            nChildren.push((_b = [\"<pedal-alter>\", \"</pedal-alter>\"], _b.raw = [\"<pedal-alter>\", \"</pedal-alter>\"], xml(_b, tuning.pedalAlter)));\n        }\n        children.push((_c = [\"<pedal-tuning>\\n\", \"\\n</pedal-tuning>\"], _c.raw = [\"<pedal-tuning>\\\\n\", \"\\\\n</pedal-tuning>\"], dangerous(_c, nChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b, _c;\n    });\n    var attribs = printStyleAlignToXML(harpPedals);\n    return (_a = [\"<harp-pedals\", \">\\n\", \"\\n</harp-pedals>\"], _a.raw = [\"<harp-pedals\", \">\\\\n\", \"\\\\n</harp-pedals>\"], dangerous(_a, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction dampToXML(damp) {\n    // <!ELEMENT damp EMPTY>\n    // <!ATTLIST damp\n    //     %print-style-align;\n    // >\n    return (_a = [\"<damp\", \" />\"], _a.raw = [\"<damp\", \" />\"], dangerous(_a, printStyleAlignToXML(damp)));\n    var _a;\n}\nfunction dampAllToXML(dampAll) {\n    // <!ELEMENT damp-all EMPTY>\n    // <!ATTLIST damp-all\n    //     %print-style-align;\n    // >\n    return (_a = [\"<damp-all\", \" />\"], _a.raw = [\"<damp-all\", \" />\"], dangerous(_a, printStyleAlignToXML(dampAll)));\n    var _a;\n}\nfunction eyeglassesToXML(eyeglasses) {\n    // <!ELEMENT eyeglasses EMPTY>\n    // <!ATTLIST eyeglasses\n    //     %print-style-align;\n    // >\n    return (_a = [\"<eyeglasses\", \" />\"], _a.raw = [\"<eyeglasses\", \" />\"], dangerous(_a, printStyleAlignToXML(eyeglasses)));\n    var _a;\n}\nfunction stringMuteToXML(stringMute) {\n    // <!ELEMENT string-mute EMPTY>\n    // <!ATTLIST string-mute\n    //     type (on | off) #REQUIRED\n    //     %print-style-align;\n    // >\n    var attribs = (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, stringMute.type)) + printStyleAlignToXML(stringMute);\n    return (_b = [\"<string-mute\", \" />\"], _b.raw = [\"<string-mute\", \" />\"], dangerous(_b, attribs));\n    var _a, _b;\n}\nfunction scordaturaToXML(scordatura) {\n    // <!ELEMENT scordatura (accord+)>\n    // <!ELEMENT accord\n    //     (tuning-step, tuning-alter?, tuning-octave)>\n    // <!ATTLIST accord\n    //     string CDATA #REQUIRED\n    // >\n    var children = [];\n    (scordatura.accords || []).forEach(function (accord) {\n        var oChildren = tuningStepAlterOctaveToXML(accord);\n        var oAttribs = (_a = [\" string=\\\"\", \"\\\"\"], _a.raw = [\" string=\\\"\", \"\\\"\"], xml(_a, accord.string));\n        children.push((_b = [\"<accord\", \">\\n\", \"\\n</accord>\"], _b.raw = [\"<accord\", \">\\\\n\", \"\\\\n</accord>\"], dangerous(_b, oAttribs, oChildren.join(\"\\n\").split(\"\\n\")\n            .map(function (n) { return \"  \" + n; }).join(\"\\n\"))));\n        var _a, _b;\n    });\n    return (_a = [\"<scordatura>\\n\", \"\\n</scordatura>\"], _a.raw = [\"<scordatura>\\\\n\", \"\\\\n</scordatura>\"], dangerous(_a, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction imageToXML(image) {\n    // <!ELEMENT image EMPTY>\n    // <!ATTLIST image\n    //     source CDATA #REQUIRED\n    //     type CDATA #REQUIRED\n    //     %position;\n    //     %halign;\n    //     %valign-image;\n    // >\n    var attribs = \"\" +\n        (_a = [\" source=\\\"\", \"\\\"\"], _a.raw = [\" source=\\\"\", \"\\\"\"], xml(_a, image.source)) +\n        (_b = [\" type=\\\"\", \"\\\"\"], _b.raw = [\" type=\\\"\", \"\\\"\"], xml(_b, image.type)) +\n        positionToXML(image) +\n        halignToXML(image) +\n        valignImageToXML(image);\n    return (_c = [\"<image\", \" />\"], _c.raw = [\"<image\", \" />\"], dangerous(_c, attribs));\n    var _a, _b, _c;\n}\nvar voiceSymbolToXML = (_h = {},\n    _h[VoiceSymbol.None] = \"none\",\n    _h[VoiceSymbol.Hauptstimme] = \"hauptstimme\",\n    _h[VoiceSymbol.Nebenstimme] = \"nebenstimme\",\n    _h[VoiceSymbol.Plain] = \"plain\",\n    _h\n);\nfunction principalVoiceToXML(principalVoice) {\n    // <!ELEMENT principal-voice (#PCDATA)>\n    // <!ATTLIST principal-voice\n    //     type %start-stop; #REQUIRED\n    //     symbol (Hauptstimme | Nebenstimme | plain | none) #REQUIRED\n    //     %print-style-align;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, principalVoice.data));\n    var attribs = startStopToXML(principalVoice) +\n        (_b = [\" symbol=\\\"\", \"\\\"\"], _b.raw = [\" symbol=\\\"\", \"\\\"\"], xml(_b, voiceSymbolToXML[principalVoice.symbol])) +\n        printStyleAlignToXML(principalVoice);\n    return (_c = [\"<principal-voice\", \"\", \"</principal-voice>\"], _c.raw = [\"<principal-voice\", \"\", \"</principal-voice>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction accordionRegistrationToXML(accordionRegistration) {\n    // <!ELEMENT accordion-registration\n    //     (accordion-high?, accordion-middle?, accordion-low?)>\n    // <!ATTLIST accordion-registration\n    //     %print-style-align;\n    // >\n    // <!ELEMENT accordion-high EMPTY>\n    // <!ELEMENT accordion-middle (#PCDATA)>\n    // <!ELEMENT accordion-low EMPTY>\n    var children = [];\n    var attribs = printStyleAlignToXML(accordionRegistration);\n    if (defined(accordionRegistration.accordionHigh)) {\n        children.push((_a = [\"<accordion-high />\"], _a.raw = [\"<accordion-high />\"], xml(_a)));\n    }\n    if (defined(accordionRegistration.accordionMiddle)) {\n        children.push((_b = [\"<accordion-middle>\", \"</accordion-middle>\"], _b.raw = [\"<accordion-middle>\", \"</accordion-middle>\"], xml(_b, accordionRegistration.accordionMiddle || \"\")));\n    }\n    if (defined(accordionRegistration.accordionLow)) {\n        children.push((_c = [\"<accordion-low />\"], _c.raw = [\"<accordion-low />\"], xml(_c)));\n    }\n    return (_d = [\"<accordion-registration\", \">\\n\", \"\\n</accordion-registration>\"], _d.raw = [\"<accordion-registration\", \">\\\\n\", \"\\\\n</accordion-registration>\"], dangerous(_d, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d;\n}\nvar tipDirectionToXML = (_j = {},\n    _j[TipDirection.Right] = \"right\",\n    _j[TipDirection.Northwest] = \"northwest\",\n    _j[TipDirection.Southwest] = \"southwest\",\n    _j[TipDirection.Down] = \"down\",\n    _j[TipDirection.Northeast] = \"northeast\",\n    _j[TipDirection.Southeast] = \"southeast\",\n    _j[TipDirection.Up] = \"up\",\n    _j[TipDirection.Left] = \"left\",\n    _j\n);\nfunction percussionToXML(percussion) {\n    // <!ELEMENT percussion\n    //     (glass | metal | wood | pitched | membrane | effect |\n    //      timpani | beater | stick | stick-location |\n    //      other-percussion)>\n    // <!ATTLIST percussion\n    //     %print-style-align;\n    //     %enclosure;\n    // >\n    var children = [];\n    if (defined(percussion.glass)) {\n        // <!ELEMENT glass (#PCDATA)>\n        children.push((_a = [\"<glass>\", \"</glass>\"], _a.raw = [\"<glass>\", \"</glass>\"], xml(_a, percussion.glass)));\n    }\n    if (defined(percussion.metal)) {\n        // <!ELEMENT metal (#PCDATA)>\n        children.push((_b = [\"<metal>\", \"</metal>\"], _b.raw = [\"<metal>\", \"</metal>\"], xml(_b, percussion.metal)));\n    }\n    if (defined(percussion.wood)) {\n        // <!ELEMENT wood (#PCDATA)>\n        children.push((_c = [\"<wood>\", \"</wood>\"], _c.raw = [\"<wood>\", \"</wood>\"], xml(_c, percussion.wood)));\n    }\n    if (defined(percussion.pitched)) {\n        // <!ELEMENT pitched (#PCDATA)>\n        children.push((_d = [\"<pitched>\", \"</pitched>\"], _d.raw = [\"<pitched>\", \"</pitched>\"], xml(_d, percussion.pitched)));\n    }\n    if (defined(percussion.membrane)) {\n        // <!ELEMENT membrane (#PCDATA)>\n        children.push((_e = [\"<membrane>\", \"</membrane>\"], _e.raw = [\"<membrane>\", \"</membrane>\"], xml(_e, percussion.membrane)));\n    }\n    if (defined(percussion.effect)) {\n        // <!ELEMENT effect (#PCDATA)>\n        children.push((_f = [\"<effect>\", \"</effect>\"], _f.raw = [\"<effect>\", \"</effect>\"], xml(_f, percussion.effect)));\n    }\n    if (defined(percussion.timpani)) {\n        // <!ELEMENT timpani EMPTY>\n        children.push((_g = [\"<timpani />\"], _g.raw = [\"<timpani />\"], xml(_g)));\n    }\n    if (defined(percussion.beater)) {\n        // <!ELEMENT beater (#PCDATA)>\n        // <!ATTLIST beater\n        //     tip %tip-direction; #IMPLIED\n        // >\n        var pcdata = (_h = [\"\", \"\"], _h.raw = [\"\", \"\"], xml(_h, percussion.beater.data || \"\"));\n        var oAttribs = \"\";\n        if (defined(percussion.beater.tip)) {\n            oAttribs += (_j = [\" tip=\\\"\", \"\\\"\"], _j.raw = [\" tip=\\\"\", \"\\\"\"], xml(_j, tipDirectionToXML[percussion.beater.tip]));\n        }\n        children.push((_k = [\"<beater\", \">\", \"</beater>\"], _k.raw = [\"<beater\", \">\", \"</beater>\"], dangerous(_k, oAttribs, pcdata)));\n    }\n    if (defined(percussion.stick)) {\n        // <!ELEMENT stick (stick-type, stick-material)>\n        // <!ATTLIST stick\n        //     tip %tip-direction; #IMPLIED\n        //     >\n        // <!ELEMENT stick-type (#PCDATA)>\n        // <!ELEMENT stick-material (#PCDATA)>\n        var pcdata = \"\";\n        var oAttribs = \"\";\n        if (defined(percussion.stick.tip)) {\n            oAttribs += (_l = [\" tip=\\\"\", \"\\\"\"], _l.raw = [\" tip=\\\"\", \"\\\"\"], xml(_l, tipDirectionToXML[percussion.stick.tip]));\n        }\n        if (defined(percussion.stick.stickType)) {\n            pcdata += (_m = [\"  <stick-type>\", \"</stick-type>\\n\"], _m.raw = [\"  <stick-type>\", \"</stick-type>\\\\n\"], xml(_m, percussion.stick.stickType));\n        }\n        if (defined(percussion.stick.stickMaterial)) {\n            pcdata += (_o = [\"  <stick-material>\", \"</stick-material>\\n\"], _o.raw = [\"  <stick-material>\", \"</stick-material>\\\\n\"], xml(_o, percussion.stick.stickMaterial));\n        }\n        children.push((_p = [\"<stick\", \">\", \"</stick>\"], _p.raw = [\"<stick\", \">\", \"</stick>\"], dangerous(_p, oAttribs, pcdata)));\n    }\n    if (defined(percussion.stickLocation)) {\n        // <!ELEMENT stick-location (#PCDATA)>\n        children.push((_q = [\"<stick-location>\", \"</stick-location>\"], _q.raw = [\"<stick-location>\", \"</stick-location>\"], xml(_q, percussion.stickLocation)));\n    }\n    if (defined(percussion.otherPercussion)) {\n        // <!ELEMENT other-percussion (#PCDATA)>\n        children.push((_r = [\"<other-percussion>\", \"</other-percussion>\"], _r.raw = [\"<other-percussion>\", \"</other-percussion>\"], xml(_r, percussion.otherPercussion)));\n    }\n    return (_s = [\"<percussion>\\n\", \"\\n</percussion>\"], _s.raw = [\"<percussion>\\\\n\", \"\\\\n</percussion>\"], dangerous(_s, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n}\nfunction otherDirectionToXML(otherDirection) {\n    // <!ELEMENT other-direction (#PCDATA)>\n    // <!ATTLIST other-direction\n    //     %print-object;\n    //     %print-style-align;\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, otherDirection.data));\n    return (_b = [\"<other-direction\", \">\", \"</other-direction>\"], _b.raw = [\"<other-direction\", \">\", \"</other-direction>\"], dangerous(_b, printObjectToXML(otherDirection) +\n        printStyleAlignToXML(otherDirection), pcdata));\n    var _a, _b;\n}\nfunction wavyLineToXML(wavyLine) {\n    // <!ELEMENT wavy-line EMPTY>\n    // <!ATTLIST wavy-line\n    //     type %start-stop-continue; #REQUIRED\n    //     number %number-level; #IMPLIED\n    //     %position;\n    //     %placement;\n    //     %color;\n    //     %trill-sound;\n    // >\n    var attribs = \"\" +\n        startStopContinueToXML(wavyLine) +\n        numberLevelToXML(wavyLine) +\n        positionToXML(wavyLine) +\n        placementToXML(wavyLine) +\n        colorToXML(wavyLine) +\n        trillSoundToXML(wavyLine);\n    return (_a = [\"<wavy-line\", \" />\"], _a.raw = [\"<wavy-line\", \" />\"], dangerous(_a, attribs));\n    var _a;\n}\nvar barStyleTypeToXML = {\n    0: \"regular\",\n    5: \"light-heavy\",\n    6: \"heavy-light\",\n    9: \"short\",\n    10: \"none\",\n    2: \"dashed\",\n    7: \"heavy-heavy\",\n    8: \"tick\",\n    1: \"dotted\",\n    3: \"heavy\",\n    4: \"light-light\"\n};\nfunction barStyleToXML(barStyle) {\n    // <!ELEMENT bar-style (#PCDATA)>\n    // <!ATTLIST bar-style\n    //     %color;\n    // >\n    var attribs = \"\" +\n        colorToXML(barStyle);\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, barStyleTypeToXML[barStyle.data] || \"\"));\n    return (_b = [\"<bar-style\", \">\", \"</bar-style>\"], _b.raw = [\"<bar-style\", \">\", \"</bar-style>\"], dangerous(_b, attribs, pcdata));\n    var _a, _b;\n}\nvar startStopDiscontinueTypeToXML = (_k = {},\n    _k[StartStopDiscontinue.Start] = \"start\",\n    _k[StartStopDiscontinue.Stop] = \"stop\",\n    _k[StartStopDiscontinue.Discontinue] = \"discontinue\",\n    _k\n);\nfunction endingToXML(ending) {\n    // <!ELEMENT ending (#PCDATA)>\n    // <!ATTLIST ending\n    //     number CDATA #REQUIRED\n    //     type (start | stop | discontinue) #REQUIRED\n    //     %print-object;\n    //     %print-style;\n    //     end-length %tenths; #IMPLIED\n    //     text-x %tenths; #IMPLIED\n    //     text-y %tenths; #IMPLIED\n    // >\n    var attribs = \"\" +\n        numberLevelToXML(ending) +\n        startStopDiscontinueToXML(ending) +\n        printObjectToXML(ending) +\n        printStyleToXML(ending);\n    if (defined(ending.endLength)) {\n        attribs += (_a = [\" end-length=\\\"\", \"\\\"\"], _a.raw = [\" end-length=\\\"\", \"\\\"\"], xml(_a, ending.endLength));\n    }\n    if (defined(ending.textX)) {\n        attribs += (_b = [\" text-x=\\\"\", \"\\\"\"], _b.raw = [\" text-x=\\\"\", \"\\\"\"], xml(_b, ending.textX));\n    }\n    if (defined(ending.textY)) {\n        attribs += (_c = [\" text-y=\\\"\", \"\\\"\"], _c.raw = [\" text-y=\\\"\", \"\\\"\"], xml(_c, ending.textY));\n    }\n    var pcdata = (_d = [\"\", \"\"], _d.raw = [\"\", \"\"], xml(_d, ending.ending));\n    return (_e = [\"<ending\", \">\", \"</ending>\"], _e.raw = [\"<ending\", \">\", \"</ending>\"], dangerous(_e, attribs, pcdata));\n    var _a, _b, _c, _d, _e;\n}\nvar directionTypeBgToXML = (_l = {},\n    _l[DirectionTypeBg.Forward] = \"forward\",\n    _l[DirectionTypeBg.Backward] = \"backward\",\n    _l\n);\nvar wingedTypeToXML = (_m = {},\n    _m[WingedType.None] = \"none\",\n    _m[WingedType.Curved] = \"curved\",\n    _m[WingedType.DoubleCurved] = \"double-curved\",\n    _m[WingedType.Straight] = \"straight\",\n    _m[WingedType.DoubleStraight] = \"double-straight\",\n    _m\n);\nfunction repeatToXML(repeat) {\n    // <!ELEMENT repeat EMPTY>\n    // <!ATTLIST repeat\n    //     direction (backward | forward) #REQUIRED\n    //     times CDATA #IMPLIED\n    //     winged (none | straight | curved |\n    //         double-straight | double-curved) #IMPLIED\n    // >\n    var attribs = \"\" +\n        (_a = [\" direction=\\\"\", \"\\\"\"], _a.raw = [\" direction=\\\"\", \"\\\"\"], xml(_a, directionTypeBgToXML[repeat.direction]));\n    if (defined(repeat.times)) {\n        attribs += (_b = [\" times=\\\"\", \"\\\"\"], _b.raw = [\" times=\\\"\", \"\\\"\"], xml(_b, repeat.times));\n    }\n    if (defined(repeat.winged)) {\n        attribs += (_c = [\" winged=\\\"\", \"\\\"\"], _c.raw = [\" winged=\\\"\", \"\\\"\"], xml(_c, wingedTypeToXML[repeat.winged]));\n    }\n    return (_d = [\"<repeat\", \" />\"], _d.raw = [\"<repeat\", \" />\"], dangerous(_d, attribs));\n    var _a, _b, _c, _d;\n}\nfunction segnoToXML(segno) {\n    // <!ELEMENT segno EMPTY>\n    // <!ATTLIST segno\n    //     %print-style-align;\n    // >\n    var attribs = \"\" +\n        printStyleAlignToXML(segno);\n    return (_a = [\"<segno\", \" />\"], _a.raw = [\"<segno\", \" />\"], dangerous(_a, attribs));\n    var _a;\n}\nfunction codaToXML(coda) {\n    // <!ELEMENT coda EMPTY>\n    // <!ATTLIST coda\n    //     %print-style-align;\n    // >\n    var attribs = \"\" +\n        printStyleAlignToXML(coda);\n    return (_a = [\"<coda\", \" />\"], _a.raw = [\"<coda\", \" />\"], dangerous(_a, attribs));\n    var _a;\n}\nvar uprightInvertedToXML = {\n    0: \"upright\",\n    1: \"inverted\"\n};\nvar normalAngledSquareToXML = {\n    1: \"angled\",\n    2: \"square\",\n    0: \"normal\"\n};\nfunction fermataToXML(fermata) {\n    // <!ELEMENT fermata  (#PCDATA)>\n    // <!ATTLIST fermata\n    //     type (upright | inverted) #IMPLIED\n    //     %print-style;\n    // >\n    var pcdata = defined(fermata.shape) ? normalAngledSquareToXML[fermata.shape] : \"\";\n    var attribs = defined(fermata.type) ? (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, uprightInvertedToXML[fermata.type])) : \"\";\n    attribs += printStyleToXML(fermata);\n    return (_b = [\"<fermata\", \">\", \"</fermata>\"], _b.raw = [\"<fermata\", \">\", \"</fermata>\"], dangerous(_b, attribs, pcdata));\n    var _a, _b;\n}\nfunction playToXML(play) {\n    // <!ELEMENT play ((ipa | mute | semi-pitched | other-play)*)>\n    // <!ATTLIST play\n    //     id IDREF #IMPLIED\n    // >\n    // TODO musicxml-interfaces: missing id\n    var children = [];\n    if (defined(play.ipa)) {\n        children.push((_a = [\"<ipa>\", \"</ipa>\"], _a.raw = [\"<ipa>\", \"</ipa>\"], xml(_a, play.ipa)));\n    }\n    if (defined(play.mute)) {\n        children.push((_b = [\"<mute>\", \"</mute>\"], _b.raw = [\"<mute>\", \"</mute>\"], xml(_b, play.mute)));\n    }\n    if (defined(play.semiPitched)) {\n        children.push((_c = [\"<semi-pitched>\", \"</semi-pitched>\"], _c.raw = [\"<semi-pitched>\", \"</semi-pitched>\"], xml(_c, play.semiPitched)));\n    }\n    if (defined(play.otherPlay)) {\n        var pcdata = (_d = [\"\", \"\"], _d.raw = [\"\", \"\"], xml(_d, play.otherPlay.data));\n        var oAttribs = \"\";\n        if (defined(play.otherPlay.type)) {\n            oAttribs += (_e = [\" type=\\\"\", \"\\\"\"], _e.raw = [\" type=\\\"\", \"\\\"\"], xml(_e, play.otherPlay.type));\n        }\n        children.push((_f = [\"<other-play\", \">\", \"</other-play>\"], _f.raw = [\"<other-play\", \">\", \"</other-play>\"], dangerous(_f, oAttribs, pcdata)));\n    }\n    return (_g = [\"<play>\\n\", \"\\n</play>\"], _g.raw = [\"<play>\\\\n\", \"\\\\n</play>\"], dangerous(_g, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g;\n}\nfunction staffLayoutToXML(staffLayout) {\n    // <!ELEMENT staff-layout (staff-distance?)>\n    // <!ELEMENT staff-distance %layout-tenths;>\n    // <!ATTLIST staff-layout\n    //     number CDATA #IMPLIED\n    // >\n    var children = [];\n    if (defined(staffLayout.staffDistance)) {\n        children.push((_a = [\"<staff-distance>\", \"</staff-distance>\"], _a.raw = [\"<staff-distance>\", \"</staff-distance>\"], xml(_a, staffLayout.staffDistance)));\n    }\n    var attribs = numberLevelToXML(staffLayout);\n    return (_b = [\"<staff-layout\", \">\\n\", \"\\n</staff-layout>\"], _b.raw = [\"<staff-layout\", \">\\\\n\", \"\\\\n</staff-layout>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction measureLayoutToXML(measureLayout) {\n    // <!ELEMENT measure-layout (measure-distance?)>\n    // <!ELEMENT measure-distance %layout-tenths;>\n    var children = [];\n    if (defined(measureLayout.measureDistance)) {\n        children.push((_a = [\"<measure-distance>\", \"</measure-distance>\"], _a.raw = [\"<measure-distance>\", \"</measure-distance>\"], xml(_a, measureLayout.measureDistance)));\n    }\n    return (_b = [\"<measure-layout>\\n\", \"\\n</measure-layout>\"], _b.raw = [\"<measure-layout>\\\\n\", \"\\\\n</measure-layout>\"], dangerous(_b, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction measureNumberingToXML(measureNumbering) {\n    // <!ELEMENT measure-numbering (#PCDATA)>\n    // <!ATTLIST measure-numbering\n    //     %print-style-align;\n    // >\n    var attribs = printStyleAlignToXML(measureNumbering);\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, measureNumbering.data));\n    return (_b = [\"<measure-numbering\", \">\", \"</measure-numbering>\"], _b.raw = [\"<measure-numbering\", \">\", \"</measure-numbering>\"], dangerous(_b, attribs, pcdata));\n    var _a, _b;\n}\nfunction keyToXML(key) {\n    // <!ELEMENT key (((cancel?, fifths, mode?) |\n    //     ((key-step, key-alter, key-accidental?)*)), key-octave*)>\n    // <!ATTLIST key\n    //     number CDATA #IMPLIED\n    //     %print-style;\n    //     %print-object;\n    // >\n    var children = [];\n    var attribs = \"\" +\n        numberLevelToXML(key) +\n        printStyleToXML(key) +\n        printObjectToXML(key);\n    if (defined(key.cancel)) {\n        children.push(cancelToXML(key.cancel));\n    }\n    if (defined(key.fifths)) {\n        // <!ELEMENT fifths (#PCDATA)>\n        children.push((_a = [\"<fifths>\", \"</fifths>\"], _a.raw = [\"<fifths>\", \"</fifths>\"], xml(_a, key.fifths)));\n    }\n    if (defined(key.mode)) {\n        // <!ELEMENT mode (#PCDATA)>\n        children.push((_b = [\"<mode>\", \"</mode>\"], _b.raw = [\"<mode>\", \"</mode>\"], xml(_b, key.mode)));\n    }\n    (key.keySteps || []).forEach(function (keyStep, idx) {\n        // <!ELEMENT key-step (#PCDATA)>\n        // <!ELEMENT key-alter (#PCDATA)>\n        // <!ELEMENT key-accidental (#PCDATA)>\n        children.push((_a = [\"<key-step>\", \"</key-step>\"], _a.raw = [\"<key-step>\", \"</key-step>\"], xml(_a, keyStep)));\n        children.push((_b = [\"<key-alter>\", \"</key-alter>\"], _b.raw = [\"<key-alter>\", \"</key-alter>\"], xml(_b, key.keyAlters[idx])));\n        if (key.keyAccidentals && key.keyAccidentals[idx]) {\n            children.push((_c = [\"<key-accidental>\", \"</key-accidental>\"], _c.raw = [\"<key-accidental>\", \"</key-accidental>\"], xml(_c, key.keyAccidentals[idx])));\n        }\n        var _a, _b, _c;\n    });\n    (key.keyOctaves || []).forEach(function (keyOctave) {\n        children.push(keyOctaveToXML(keyOctave));\n    });\n    return (_c = [\"<key\", \">\\n\", \"\\n</key>\"], _c.raw = [\"<key\", \">\\\\n\", \"\\\\n</key>\"], dangerous(_c, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nvar cancelLocationToXML = {\n    1: \"right\",\n    2: \"before-barline\",\n    0: \"left\"\n};\nfunction cancelToXML(cancel) {\n    // <!ELEMENT cancel (#PCDATA)>\n    // <!ATTLIST cancel\n    //     location (left | right | before-barline) #IMPLIED\n    // >\n    var attribs = \"\";\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, cancel.fifths));\n    if (defined(cancel.location)) {\n        attribs += (_b = [\" location=\\\"\", \"\\\"\"], _b.raw = [\" location=\\\"\", \"\\\"\"], xml(_b, cancelLocationToXML[cancel.location]));\n    }\n    return (_c = [\"<cancel\", \">\", \"</cancel>\"], _c.raw = [\"<cancel\", \">\", \"</cancel>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction keyOctaveToXML(keyOctave) {\n    // <!ELEMENT key-octave (#PCDATA)>\n    // <!ATTLIST key-octave\n    //     number NMTOKEN #REQUIRED\n    //     cancel %yes-no; #IMPLIED\n    // >\n    var attribs = numberLevelToXML(keyOctave);\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, keyOctave.octave));\n    if (defined(keyOctave.cancel)) {\n        attribs += (_b = [\" cancel=\\\"\", \"\\\"\"], _b.raw = [\" cancel=\\\"\", \"\\\"\"], yesNo(_b, keyOctave.cancel));\n    }\n    return (_c = [\"<key-octave\", \">\", \"</key-octave>\"], _c.raw = [\"<key-octave\", \">\", \"</key-octave>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction timeToXML(time) {\n    // <!ELEMENT time\n    //     (((beats, beat-type)+, interchangeable?) | senza-misura)>\n    // <!ATTLIST time\n    //     number CDATA #IMPLIED\n    //     %time-symbol;\n    //     %time-separator;\n    //     %print-style-align;\n    //     %print-object;\n    // >\n    var attribs = \"\" +\n        numberLevelToXML(time) +\n        timeSymbolToXML(time) +\n        timeSeparatorToXML(time) +\n        printStyleAlignToXML(time) +\n        printObjectToXML(time);\n    var children = [];\n    if (time.senzaMisura != null) {\n        // <!ELEMENT senza-misura (#PCDATA)>\n        // TODO musicxml-interfaces: PCDATA?\n        children.push((_a = [\"<senza-misura />\"], _a.raw = [\"<senza-misura />\"], xml(_a)));\n    }\n    else {\n        // TODO musicxml-interfaces: check this\n        (time.beats || []).forEach(function (beats, idx) {\n            // <!ELEMENT beats (#PCDATA)>\n            // <!ELEMENT beat-type (#PCDATA)>\n            children.push((_a = [\"<beats>\", \"</beats>\"], _a.raw = [\"<beats>\", \"</beats>\"], xml(_a, beats)));\n            children.push((_b = [\"<beat-type>\", \"</beat-type>\"], _b.raw = [\"<beat-type>\", \"</beat-type>\"], xml(_b, time.beatTypes[idx])));\n            var _a, _b;\n        });\n        if (defined(time.interchangeable)) {\n            children.push(interchangeableToXML(time.interchangeable));\n        }\n    }\n    return (_b = [\"<time\", \">\\n\", \"\\n</time>\"], _b.raw = [\"<time\", \">\\\\n\", \"\\\\n</time>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nvar timeSymbolTypeToXML = {\n    4: \"dotted-note\",\n    1: \"cut\",\n    2: \"single-number\",\n    3: \"note\",\n    0: \"common\",\n    5: \"normal\"\n};\nfunction timeSymbolToXML(timeSymbol) {\n    // <!ENTITY % time-symbol\n    //     \"symbol (common | cut | single-number |\n    //              note | dotted-note | normal) #IMPLIED\">\n    if (defined(timeSymbol.symbol)) {\n        return (_a = [\" symbol=\\\"\", \"\\\"\"], _a.raw = [\" symbol=\\\"\", \"\\\"\"], xml(_a, timeSymbolTypeToXML[timeSymbol.symbol]));\n    }\n    return \"\";\n    var _a;\n}\nvar separatorTypeToXML = {\n    0: \"none\",\n    1: \"horizontal\",\n    2: \"diagonal\",\n    3: \"vertical\",\n    4: \"adjacent\"\n};\nfunction timeSeparatorToXML(timeSeparator) {\n    // <!ENTITY % time-separator\n    //     \"separator (none | horizontal | diagonal |\n    //         vertical | adjacent) #IMPLIED\">\n    if (defined(timeSeparator.separator)) {\n        return (_a = [\" separator=\\\"\", \"\\\"\"], _a.raw = [\" separator=\\\"\", \"\\\"\"], xml(_a, separatorTypeToXML[timeSeparator.separator]));\n    }\n    return \"\";\n    var _a;\n}\nfunction interchangeableToXML(interchangeable) {\n    // <!ELEMENT interchangeable (time-relation?, (beats, beat-type)+)>\n    // <!ATTLIST interchangeable\n    //     %time-symbol;\n    //     %time-separator;\n    // >\n    var attribs = \"\" +\n        timeSymbolToXML(interchangeable) +\n        timeSeparatorToXML(interchangeable);\n    var children = [];\n    (interchangeable.beats || []).forEach(function (beats, idx) {\n        // <!ELEMENT beats (#PCDATA)>\n        // <!ELEMENT beat-type (#PCDATA)>\n        children.push((_a = [\"<beats>\", \"</beats>\"], _a.raw = [\"<beats>\", \"</beats>\"], xml(_a, beats)));\n        children.push((_b = [\"<beat-type>\", \"</beat-type>\"], _b.raw = [\"<beat-type>\", \"</beat-type>\"], xml(_b, interchangeable.beatTypes[idx])));\n        var _a, _b;\n    });\n    if (defined(interchangeable.timeRelation)) {\n        // <!ELEMENT time-relation (#PCDATA)>\n        children.push((_a = [\"<time-relation>\", \"</time-relation>\"], _a.raw = [\"<time-relation>\", \"</time-relation>\"], xml(_a, interchangeable.timeRelation)));\n    }\n    return (_b = [\"<interchangeable\", \">\\n\", \"\\n</interchangeable>\"], _b.raw = [\"<interchangeable\", \">\\\\n\", \"\\\\n</interchangeable>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nvar partSymbolTypeToXML = {\n    0: \"none\",\n    2: \"line\",\n    3: \"bracket\",\n    4: \"square\",\n    1: \"brace\"\n};\nfunction partSymbolToXML(partSymbol) {\n    // <!ELEMENT part-symbol (#PCDATA)>\n    // <!ATTLIST part-symbol\n    //     top-staff CDATA #IMPLIED\n    //     bottom-staff CDATA #IMPLIED\n    //     %position;\n    //     %color;\n    // >\n    var pcdata = \"\";\n    if (defined(partSymbol.type)) {\n        pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, partSymbolTypeToXML[partSymbol.type]));\n    }\n    var attribs = \"\";\n    if (defined(partSymbol.topStaff)) {\n        attribs += (_b = [\" top-staff=\\\"\", \"\\\"\"], _b.raw = [\" top-staff=\\\"\", \"\\\"\"], xml(_b, partSymbol.topStaff));\n    }\n    if (defined(partSymbol.bottomStaff)) {\n        attribs += (_c = [\" bottom-staff=\\\"\", \"\\\"\"], _c.raw = [\" bottom-staff=\\\"\", \"\\\"\"], xml(_c, partSymbol.bottomStaff));\n    }\n    attribs += positionToXML(partSymbol) +\n        colorToXML(partSymbol);\n    return (_d = [\"<part-symbol\", \">\", \"</part-symbol>\"], _d.raw = [\"<part-symbol\", \">\", \"</part-symbol>\"], dangerous(_d, attribs, pcdata));\n    var _a, _b, _c, _d;\n}\nvar symbolSizeToXML = {\n    1: \"full\",\n    2: \"cue\",\n    3: \"large\"\n};\nfunction clefToXML(clef) {\n    // <!ELEMENT clef (sign, line?, clef-octave-change?)>\n    // <!ATTLIST clef\n    //     number CDATA #IMPLIED\n    //     additional %yes-no; #IMPLIED\n    //     size %symbol-size; #IMPLIED\n    //     after-barline %yes-no; #IMPLIED\n    //     %print-style;\n    //     %print-object;\n    // >\n    var attribs = \"\" +\n        numberLevelToXML(clef);\n    var children = [];\n    if (defined(clef.additional)) {\n        attribs += (_a = [\" additional=\\\"\", \"\\\"\"], _a.raw = [\" additional=\\\"\", \"\\\"\"], yesNo(_a, clef.additional));\n    }\n    if (clef.size >= SymbolSize.Unspecified) {\n        attribs += (_b = [\" size=\\\"\", \"\\\"\"], _b.raw = [\" size=\\\"\", \"\\\"\"], xml(_b, symbolSizeToXML[clef.size]));\n    }\n    if (defined(clef.afterBarline)) {\n        attribs += (_c = [\" after-barline=\\\"\", \"\\\"\"], _c.raw = [\" after-barline=\\\"\", \"\\\"\"], yesNo(_c, clef.afterBarline));\n    }\n    attribs += printStyleToXML(clef) + printObjectToXML(clef);\n    if (defined(clef.sign)) {\n        // <!ELEMENT sign (#PCDATA)>\n        children.push((_d = [\"<sign>\", \"</sign>\"], _d.raw = [\"<sign>\", \"</sign>\"], xml(_d, clef.sign)));\n    }\n    if (defined(clef.line)) {\n        // <!ELEMENT line (#PCDATA)>\n        children.push((_e = [\"<line>\", \"</line>\"], _e.raw = [\"<line>\", \"</line>\"], xml(_e, clef.line)));\n    }\n    if (defined(clef.clefOctaveChange)) {\n        // <!ELEMENT clef-octave-change (#PCDATA)>\n        children.push((_f = [\"<clef-octave-change>\", \"</clef-octave-change>\"], _f.raw = [\"<clef-octave-change>\", \"</clef-octave-change>\"], xml(_f, clef.clefOctaveChange)));\n    }\n    return (_g = [\"<clef\", \">\\n\", \"\\n</clef>\"], _g.raw = [\"<clef\", \">\\\\n\", \"\\\\n</clef>\"], dangerous(_g, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e, _f, _g;\n}\nfunction staffDetailsToXML(staffDetails) {\n    // <!ELEMENT staff-details (staff-type?, staff-lines?,\n    //     staff-tuning*, capo?, staff-size?)>\n    // <!ATTLIST staff-details\n    //     number         CDATA                #IMPLIED\n    //     show-frets     (numbers | letters)  #IMPLIED\n    //     %print-object;\n    //     %print-spacing;\n    // >\n    var attribs = \"\";\n    var children = [];\n    attribs += numberLevelToXML(staffDetails);\n    // TODO: musicxml-interfaces show__FRETS__\n    attribs += printObjectToXML(staffDetails);\n    attribs += printSpacingToXML(staffDetails);\n    if (defined(staffDetails.staffType)) {\n        // <!ELEMENT staff-type (#PCDATA)>\n        children.push((_a = [\"<staff-type>\", \"</staff-type>\"], _a.raw = [\"<staff-type>\", \"</staff-type>\"], xml(_a, staffDetails.staffType)));\n    }\n    if (defined(staffDetails.staffLines)) {\n        // <!ELEMENT staff-lines (#PCDATA)>\n        children.push((_b = [\"<staff-lines>\", \"</staff-lines>\"], _b.raw = [\"<staff-lines>\", \"</staff-lines>\"], xml(_b, staffDetails.staffLines)));\n    }\n    (staffDetails.staffTunings || []).forEach(function (tuning) {\n        children.push(staffTuningToXML(tuning));\n    });\n    if (defined(staffDetails.capo)) {\n        // <!ELEMENT capo (#PCDATA)>\n        children.push((_c = [\"<capo>\", \"</capo>\"], _c.raw = [\"<capo>\", \"</capo>\"], xml(_c, staffDetails.capo)));\n    }\n    if (defined(staffDetails.staffSize)) {\n        // <!ELEMENT staff-size (#PCDATA)>\n        children.push((_d = [\"<staff-size>\", \"</staff-size>\"], _d.raw = [\"<staff-size>\", \"</staff-size>\"], xml(_d, staffDetails.staffSize)));\n    }\n    return (_e = [\"<staff-details\", \">\\n\", \"\\n</staff-details>\"], _e.raw = [\"<staff-details\", \">\\\\n\", \"\\\\n</staff-details>\"], dangerous(_e, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e;\n}\nfunction staffTuningToXML(staffTuning) {\n    // <!ELEMENT staff-tuning\n    //     (tuning-step, tuning-alter?, tuning-octave)>\n    // <!ATTLIST staff-tuning\n    //     line CDATA #REQUIRED\n    var children = [];\n    var attribs = \"\";\n    if (defined(staffTuning.line)) {\n        attribs += (_a = [\" line=\\\"\", \"\\\"\"], _a.raw = [\" line=\\\"\", \"\\\"\"], xml(_a, staffTuning.line));\n    }\n    children = children.concat(tuningStepAlterOctaveToXML(staffTuning));\n    return (_b = [\"<staff-tuning\", \">\\n\", \"\\n</staff-tuning>\"], _b.raw = [\"<staff-tuning\", \">\\\\n\", \"\\\\n</staff-tuning>\"], dangerous(_b, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b;\n}\nfunction tuningStepAlterOctaveToXML(tuning) {\n    var children = [];\n    if (defined(tuning.tuningStep)) {\n        // <!ELEMENT tuning-step (#PCDATA)>\n        children.push((_a = [\"<tuning-step>\", \"</tuning-step>\"], _a.raw = [\"<tuning-step>\", \"</tuning-step>\"], xml(_a, tuning.tuningStep)));\n    }\n    if (defined(tuning.tuningAlter)) {\n        // <!ELEMENT tuning-alter (#PCDATA)>\n        children.push((_b = [\"<tuning-alter>\", \"</tuning-alter>\"], _b.raw = [\"<tuning-alter>\", \"</tuning-alter>\"], xml(_b, tuning.tuningAlter)));\n    }\n    if (defined(tuning.tuningOctave)) {\n        // <!ELEMENT tuning-octave (#PCDATA)>\n        children.push((_c = [\"<tuning-octave>\", \"</tuning-octave>\"], _c.raw = [\"<tuning-octave>\", \"</tuning-octave>\"], xml(_c, tuning.tuningOctave)));\n    }\n    return children;\n    var _a, _b, _c;\n}\nfunction transposeToXML(transpose) {\n    // <!ELEMENT transpose\n    //     (diatonic?, chromatic, octave-change?, double?)>\n    // <!ATTLIST transpose\n    //     number CDATA #IMPLIED\n    // >\n    var children = [];\n    var attribs = numberLevelToXML(transpose);\n    if (defined(transpose.diatonic)) {\n        // <!ELEMENT diatonic (#PCDATA)>\n        children.push((_a = [\"<diatonic>\", \"</diatonic>\"], _a.raw = [\"<diatonic>\", \"</diatonic>\"], xml(_a, transpose.diatonic)));\n    }\n    if (defined(transpose.chromatic)) {\n        // <!ELEMENT chromatic (#PCDATA)>\n        children.push((_b = [\"<chromatic>\", \"</chromatic>\"], _b.raw = [\"<chromatic>\", \"</chromatic>\"], xml(_b, transpose.chromatic)));\n    }\n    if (defined(transpose.octaveChange)) {\n        // <!ELEMENT octave-change (#PCDATA)>\n        children.push((_c = [\"<octave-change>\", \"</octave-change>\"], _c.raw = [\"<octave-change>\", \"</octave-change>\"], xml(_c, transpose.octaveChange)));\n    }\n    if (defined(transpose.double)) {\n        // <!ELEMENT double EMPTY>\n        children.push((_d = [\"<double />\"], _d.raw = [\"<double />\"], xml(_d)));\n    }\n    return (_e = [\"<transpose\", \">\\n\", \"\\n</transpose>\"], _e.raw = [\"<transpose\", \">\\\\n\", \"\\\\n</transpose>\"], dangerous(_e, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d, _e;\n}\nfunction directiveToXML(directive) {\n    // <!ELEMENT directive (#PCDATA)>\n    // <!ATTLIST directive\n    //     %print-style;\n    //     xml:lang NMTOKEN #IMPLIED\n    // >\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, directive.data));\n    var attribs = printStyleToXML(directive); // TODO musicxml-interfaces xml:lang\n    return (_b = [\"<directive\", \">\", \"</directive>\"], _b.raw = [\"<directive\", \">\", \"</directive>\"], dangerous(_b, attribs, pcdata));\n    var _a, _b;\n}\nfunction measureStyleToXML(measureStyle) {\n    // <!ELEMENT measure-style (multiple-rest |\n    //     measure-repeat | beat-repeat | slash)>\n    // <!ATTLIST measure-style\n    //     number CDATA #IMPLIED\n    //     %font;\n    //     %color;\n    // >\n    var children = [];\n    var attribs = \"\" +\n        numberLevelToXML(measureStyle) +\n        fontToXML(measureStyle) +\n        colorToXML(measureStyle);\n    // TODO: Make one at a time!!\n    if (defined(measureStyle.multipleRest)) {\n        children.push(multipleRestToXML(measureStyle.multipleRest));\n    }\n    if (defined(measureStyle.measureRepeat)) {\n        children.push(measureRepeatToXML(measureStyle.measureRepeat));\n    }\n    if (defined(measureStyle.beatRepeat)) {\n        children.push(beatRepeatToXML(measureStyle.beatRepeat));\n    }\n    if (defined(measureStyle.slash)) {\n        children.push(slashElToXML(measureStyle.slash));\n    }\n    return (_a = [\"<measure-style\", \">\\n\", \"\\n</measure-style>\"], _a.raw = [\"<measure-style\", \">\\\\n\", \"\\\\n</measure-style>\"], dangerous(_a, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a;\n}\nfunction multipleRestToXML(multipleRest) {\n    // <!ELEMENT multiple-rest (#PCDATA)>\n    // <!ATTLIST multiple-rest\n    //     use-symbols %yes-no; #IMPLIED\n    // >\n    var attribs = \"\";\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, multipleRest.count));\n    if (defined(multipleRest.useSymbols)) {\n        attribs += (_b = [\" use-symbols=\\\"\", \"\\\"\"], _b.raw = [\" use-symbols=\\\"\", \"\\\"\"], yesNo(_b, multipleRest.useSymbols));\n    }\n    return (_c = [\"<multiple-rest\", \">\", \"</multiple-rest>\"], _c.raw = [\"<multiple-rest\", \">\", \"</multiple-rest>\"], dangerous(_c, attribs, pcdata));\n    var _a, _b, _c;\n}\nfunction measureRepeatToXML(measureRepeat) {\n    // <!ELEMENT measure-repeat (#PCDATA)>\n    // <!ATTLIST measure-repeat\n    //     type %start-stop; #REQUIRED\n    //     slashes NMTOKEN #IMPLIED\n    // >\n    var attribs = \"\";\n    var pcdata = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, measureRepeat.data || \"\"));\n    attribs += startStopToXML(measureRepeat);\n    // TODO: musicxml-interfaces: slashed -> slashes\n    return (_b = [\"<measure-repeat\", \">\", \"</measure-repeat>\"], _b.raw = [\"<measure-repeat\", \">\", \"</measure-repeat>\"], dangerous(_b, attribs, pcdata));\n    var _a, _b;\n}\nfunction beatRepeatToXML(beatRepeat) {\n    // <!ELEMENT beat-repeat ((slash-type, slash-dot*)?)>\n    // <!ATTLIST beat-repeat\n    //     type %start-stop; #REQUIRED\n    //     slashes NMTOKEN #IMPLIED\n    //     use-dots %yes-no; #IMPLIED\n    // >\n    // <!ELEMENT slash-type (#PCDATA)>\n    var children = [];\n    var attribs = \"\" +\n        startStopToXML(beatRepeat);\n    // TODO: musicxml-interfaces: slases -> slashes\n    if (defined(beatRepeat.useDots)) {\n        attribs += (_a = [\" use-dots=\\\"\", \"\\\"\"], _a.raw = [\" use-dots=\\\"\", \"\\\"\"], yesNo(_a, beatRepeat.useDots));\n    }\n    if (defined(beatRepeat.slashType)) {\n        children.push((_b = [\"<slash-type>\", \"</slash-type>\"], _b.raw = [\"<slash-type>\", \"</slash-type>\"], xml(_b, beatRepeat.slashType)));\n    }\n    (beatRepeat.slashDots || []).forEach(function (dot) {\n        // <!ELEMENT slash-dot EMPTY>\n        children.push((_a = [\"<slash-dot />\"], _a.raw = [\"<slash-dot />\"], xml(_a)));\n        var _a;\n    });\n    return (_c = [\"<beat-repeat\", \">\\n\", \"\\n</beat-repeat>\"], _c.raw = [\"<beat-repeat\", \">\\\\n\", \"\\\\n</beat-repeat>\"], dangerous(_c, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c;\n}\nfunction slashElToXML(slash) {\n    // <!ELEMENT slash ((slash-type, slash-dot*)?)>\n    // <!ATTLIST slash\n    //     type %start-stop; #REQUIRED\n    //     use-dots %yes-no; #IMPLIED\n    //     use-stems %yes-no; #IMPLIED\n    // >\n    var attribs = startStopToXML(slash);\n    if (defined(slash.useDots)) {\n        attribs += (_a = [\" use-dots=\\\"\", \"\\\"\"], _a.raw = [\" use-dots=\\\"\", \"\\\"\"], yesNo(_a, slash.useDots));\n    }\n    if (defined(slash.useStems)) {\n        attribs += (_b = [\" use-stems=\\\"\", \"\\\"\"], _b.raw = [\" use-stems=\\\"\", \"\\\"\"], yesNo(_b, slash.useStems));\n    }\n    var children = [];\n    if (defined(slash.slashType)) {\n        children.push((_c = [\"<slash-type>\", \"</slash-type>\"], _c.raw = [\"<slash-type>\", \"</slash-type>\"], xml(_c, slash.slashType)));\n    }\n    (slash.slashDots || []).forEach(function (dot) {\n        // <!ELEMENT slash-dot EMPTY>\n        children.push((_a = [\"<slash-dot />\"], _a.raw = [\"<slash-dot />\"], xml(_a)));\n        var _a;\n    });\n    return (_d = [\"<slash\", \">\\n\", \"\\n</slash>\"], _d.raw = [\"<slash\", \">\\\\n\", \"\\\\n</slash>\"], dangerous(_d, attribs, children.join(\"\\n\").split(\"\\n\")\n        .map(function (n) { return \"  \" + n; }).join(\"\\n\")));\n    var _a, _b, _c, _d;\n}\nfunction printStyleToXML(printStyle) {\n    // <!ENTITY % print-style\n    //     \"%position;\n    //      %font;\n    //      %color;\">\n    return positionToXML(printStyle) +\n        fontToXML(printStyle) +\n        colorToXML(printStyle);\n}\nfunction printoutToXML(printout) {\n    // <!ENTITY % printout\n    //     \"%print-object;\n    //      print-dot     %yes-no;  #IMPLIED\n    //      %print-spacing;\n    //      print-lyric   %yes-no;  #IMPLIED\">\n    var attribs = printObjectToXML(printout);\n    if (defined(printout.printDot)) {\n        attribs += (_a = [\" print-dot=\\\"\", \"\\\"\"], _a.raw = [\" print-dot=\\\"\", \"\\\"\"], yesNo(_a, printout.printDot));\n    }\n    attribs += printSpacingToXML(printout);\n    if (defined(printout.printLyric)) {\n        attribs += (_b = [\" print-lyric=\\\"\", \"\\\"\"], _b.raw = [\" print-lyric=\\\"\", \"\\\"\"], yesNo(_b, printout.printLyric));\n    }\n    return attribs;\n    var _a, _b;\n}\nfunction timeOnlyToXML(timeOnly) {\n    // <!ENTITY % time-only\n    //     \"time-only CDATA #IMPLIED\">\n    if (defined(timeOnly.timeOnly)) {\n        return (_a = [\" time-only=\\\"\", \"\\\"\"], _a.raw = [\" time-only=\\\"\", \"\\\"\"], xml(_a, timeOnly.timeOnly));\n    }\n    return \"\";\n    var _a;\n}\nfunction editorialToXML(editorial) {\n    // <!ENTITY % editorial \"(footnote?, level?)\">\n    // <!ELEMENT footnote (#PCDATA)>\n    // <!ATTLIST footnote\n    //     %text-formatting;\n    // >\n    // <!ELEMENT level (#PCDATA)>\n    // <!ATTLIST level\n    //    reference %yes-no; #IMPLIED\n    //    %level-display;\n    // >\n    // <!ELEMENT voice (#PCDATA)>\n    var elements = [];\n    if (defined(editorial.footnote) && !!editorial.footnote.text) {\n        var footnoteEscaped = (_a = [\"\", \"\"], _a.raw = [\"\", \"\"], xml(_a, editorial.footnote.text));\n        elements.push((_b = [\"<footnote\", \">\\n            \", \"</footnote>\"], _b.raw = [\"<footnote\", \">\\n            \", \"</footnote>\"], dangerous(_b, textFormattingToXML(editorial.footnote), footnoteEscaped)));\n    }\n    if (defined(editorial.level) && !!editorial.level.text) {\n        var levelEscaped = (_c = [\"\", \"\"], _c.raw = [\"\", \"\"], xml(_c, editorial.level.text));\n        var attribs = \"\";\n        if (defined(editorial.level.reference)) {\n            attribs += (_d = [\" reference=\\\"\", \"\\\"\"], _d.raw = [\" reference=\\\"\", \"\\\"\"], yesNo(_d, editorial.level.reference));\n        }\n        attribs += levelDisplayToXML(editorial.level);\n        elements.push((_e = [\"<level\", \">\", \"</level>\"], _e.raw = [\"<level\", \">\", \"</level>\"], dangerous(_e, attribs, levelEscaped)));\n    }\n    return elements;\n    var _a, _b, _c, _d, _e;\n}\nfunction editorialVoiceToXML(editorial) {\n    // <!ENTITY % editorial-voice \"(footnote?, level?, voice?)\">\n    // <!ELEMENT footnote (#PCDATA)>\n    // <!ATTLIST footnote\n    //     %text-formatting;\n    // >\n    // <!ELEMENT level (#PCDATA)>\n    // <!ATTLIST level\n    //    reference %yes-no; #IMPLIED\n    //    %level-display;\n    // >\n    var elements = editorialToXML(editorial);\n    // <!ELEMENT voice (#PCDATA)>\n    if (defined(editorial.voice)) {\n        elements.push((_a = [\"<voice>\", \"</voice>\"], _a.raw = [\"<voice>\", \"</voice>\"], xml(_a, editorial.voice)));\n    }\n    return elements;\n    var _a;\n}\nvar solidDashedDottedWavyToXML = {\n    1: \"dashed\",\n    2: \"dotted\",\n    3: \"wavy\",\n    0: \"solid\"\n};\nfunction lineTypeToXML(lineType) {\n    // <!ENTITY % line-type\n    //     \"line-type (solid | dashed | dotted | wavy) #IMPLIED\">\n    if (defined(lineType.lineType)) {\n        return (_a = [\" line-type=\\\"\", \"\\\"\"], _a.raw = [\" line-type=\\\"\", \"\\\"\"], xml(_a, solidDashedDottedWavyToXML[lineType.lineType]));\n    }\n    return \"\";\n    var _a;\n}\nfunction startStopToXML(startStop) {\n    // <!ENTITY % start-stop \"(start | stop)\">\n    if (defined(startStop.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, startStop.type === StartStop.Start ?\n            \"start\" : \"stop\"));\n    }\n    return \"\";\n    var _a;\n}\nfunction startStopDiscontinueToXML(startStop) {\n    // <!ENTITY % start-stop \"(start | stop)\">\n    if (defined(startStop.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, startStopDiscontinueTypeToXML[startStop.type]));\n    }\n    return \"\";\n    var _a;\n}\nfunction numberLevelToXML(numberLevel) {\n    if (defined(numberLevel.number)) {\n        return (_a = [\" number=\\\"\", \"\\\"\"], _a.raw = [\" number=\\\"\", \"\\\"\"], xml(_a, numberLevel.number));\n    }\n    return \"\";\n    var _a;\n}\nvar startStopContinueSingleToXML = {\n    0: \"start\",\n    1: \"stop\",\n    2: \"continue\",\n    3: \"single\"\n};\nfunction startStopContinueToXML(startStopContinue) {\n    // <!ENTITY % start-stop-continue \"(start | stop | continue)\">\n    if (defined(startStopContinue.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, startStopContinueSingleToXML[startStopContinue.type]));\n    }\n    return \"\";\n    var _a;\n}\nfunction nameToXML(name) {\n    if (defined(name.name)) {\n        return (_a = [\" name=\\\"\", \"\\\"\"], _a.raw = [\" name=\\\"\", \"\\\"\"], xml(_a, name.name));\n    }\n    return \"\";\n    var _a;\n}\nfunction startStopSingleToXML(startStopSingle) {\n    // <!ENTITY % start-stop-single \"(start | stop | single)\">\n    if (defined(startStopSingle.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, startStopContinueSingleToXML[startStopSingle.type]));\n    }\n    return \"\";\n    var _a;\n}\nfunction dashedFormattingToXML(dashedFormatting) {\n    // <!ENTITY % dashed-formatting\n    //     \"dash-length   %tenths;  #IMPLIED\n    //      space-length  %tenths;  #IMPLIED\">\n    var attribs = \"\";\n    if (defined(dashedFormatting.dashLength)) {\n        attribs += (_a = [\" dash-length=\\\"\", \"\\\"\"], _a.raw = [\" dash-length=\\\"\", \"\\\"\"], xml(_a, dashedFormatting.dashLength));\n    }\n    if (defined(dashedFormatting.spaceLength)) {\n        attribs += (_b = [\" space-length=\\\"\", \"\\\"\"], _b.raw = [\" space-length=\\\"\", \"\\\"\"], xml(_b, dashedFormatting.spaceLength));\n    }\n    return attribs;\n    var _a, _b;\n}\nvar straightCurvedToXML = {\n    1: \"curved\",\n    0: \"straight\"\n};\nfunction lineShapeToXML(lineShape) {\n    if (defined(lineShape.lineShape)) {\n        return (_a = [\" line-shape=\\\"\", \"\\\"\"], _a.raw = [\" line-shape=\\\"\", \"\\\"\"], xml(_a, straightCurvedToXML[lineShape.lineShape]));\n    }\n    return \"\";\n    var _a;\n}\nfunction positionToXML(pos) {\n    // <!ENTITY % position\n    //     \"default-x     %tenths;    #IMPLIED\n    //      default-y     %tenths;    #IMPLIED\n    //      relative-x    %tenths;    #IMPLIED\n    //      relative-y    %tenths;    #IMPLIED\">\n    var attribs = \"\";\n    if (defined(pos.defaultX)) {\n        attribs += (_a = [\" default-x=\\\"\", \"\\\"\"], _a.raw = [\" default-x=\\\"\", \"\\\"\"], xml(_a, pos.defaultX));\n    }\n    if (defined(pos.defaultY)) {\n        attribs += (_b = [\" default-y=\\\"\", \"\\\"\"], _b.raw = [\" default-y=\\\"\", \"\\\"\"], xml(_b, pos.defaultY));\n    }\n    if (defined(pos.relativeX)) {\n        attribs += (_c = [\" relative-x=\\\"\", \"\\\"\"], _c.raw = [\" relative-x=\\\"\", \"\\\"\"], xml(_c, pos.relativeX));\n    }\n    if (defined(pos.relativeY)) {\n        attribs += (_d = [\" relative-y=\\\"\", \"\\\"\"], _d.raw = [\" relative-y=\\\"\", \"\\\"\"], xml(_d, pos.relativeY));\n    }\n    return attribs;\n    var _a, _b, _c, _d;\n}\nfunction placementToXML(placement) {\n    // <!ENTITY % placement\n    //     \"placement %above-below; #IMPLIED\">\n    if (placement.placement > AboveBelow.Unspecified) {\n        return (_a = [\" placement=\\\"\", \"\\\"\"], _a.raw = [\" placement=\\\"\", \"\\\"\"], xml(_a, placement.placement === AboveBelow.Above ?\n            \"above\" : \"below\"));\n    }\n    return \"\";\n    var _a;\n}\nfunction orientationToXML(orientation) {\n    // <!ENTITY % orientation\n    //     \"orientation (over | under) #IMPLIED\">\n    if (orientation.orientation > OverUnder.Unspecified) {\n        return (_a = [\" orientation=\\\"\", \"\\\"\"], _a.raw = [\" orientation=\\\"\", \"\\\"\"], xml(_a, orientation.orientation === OverUnder.Over ?\n            \"over\" : \"under\"));\n    }\n    return \"\";\n    var _a;\n}\nfunction bezierToXML(bezier) {\n    // <!ENTITY % bezier\n    //     \"bezier-offset  CDATA     #IMPLIED\n    //      bezier-offset2 CDATA     #IMPLIED\n    //      bezier-x       %tenths;  #IMPLIED\n    //      bezier-y       %tenths;  #IMPLIED\n    //      bezier-x2      %tenths;  #IMPLIED\n    //      bezier-y2      %tenths;  #IMPLIED\">\n    var attribs = \"\";\n    if (defined(bezier.bezierOffset)) {\n        attribs += (_a = [\" bezier-offset=\\\"\", \"\\\"\"], _a.raw = [\" bezier-offset=\\\"\", \"\\\"\"], xml(_a, bezier.bezierOffset));\n    }\n    if (defined(bezier.bezierOffset2)) {\n        attribs += (_b = [\" bezier-offset2=\\\"\", \"\\\"\"], _b.raw = [\" bezier-offset2=\\\"\", \"\\\"\"], xml(_b, bezier.bezierOffset2));\n    }\n    if (defined(bezier.bezierX)) {\n        attribs += (_c = [\" bezier-x=\\\"\", \"\\\"\"], _c.raw = [\" bezier-x=\\\"\", \"\\\"\"], xml(_c, bezier.bezierX));\n    }\n    if (defined(bezier.bezierY)) {\n        attribs += (_d = [\" bezier-y=\\\"\", \"\\\"\"], _d.raw = [\" bezier-y=\\\"\", \"\\\"\"], xml(_d, bezier.bezierY));\n    }\n    if (defined(bezier.bezierX2)) {\n        attribs += (_e = [\" bezier-x2=\\\"\", \"\\\"\"], _e.raw = [\" bezier-x2=\\\"\", \"\\\"\"], xml(_e, bezier.bezierX2));\n    }\n    if (defined(bezier.bezierY2)) {\n        attribs += (_f = [\" bezier-y2=\\\"\", \"\\\"\"], _f.raw = [\" bezier-y2=\\\"\", \"\\\"\"], xml(_f, bezier.bezierY2));\n    }\n    return attribs;\n    var _a, _b, _c, _d, _e, _f;\n}\nfunction fontToXML(font) {\n    // <!ENTITY % font\n    //     \"font-family  CDATA  #IMPLIED\n    //      font-style   CDATA  #IMPLIED\n    //      font-size    CDATA  #IMPLIED\n    //      font-weight  CDATA  #IMPLIED\">\n    var attribs = \"\";\n    if (defined(font.fontFamily)) {\n        attribs += (_a = [\" font-family=\\\"\", \"\\\"\"], _a.raw = [\" font-family=\\\"\", \"\\\"\"], xml(_a, font.fontFamily));\n    }\n    if (defined(font.fontStyle)) {\n        attribs += (_b = [\" font-style=\\\"\", \"\\\"\"], _b.raw = [\" font-style=\\\"\", \"\\\"\"], xml(_b, font.fontStyle ===\n            NormalItalic.Italic ? \"italic\" : \"normal\"));\n    }\n    if (defined(font.fontSize)) {\n        attribs += (_c = [\" font-size=\\\"\", \"\\\"\"], _c.raw = [\" font-size=\\\"\", \"\\\"\"], xml(_c, font.fontSize));\n    }\n    if (defined(font.fontWeight)) {\n        attribs += (_d = [\" font-weight=\\\"\", \"\\\"\"], _d.raw = [\" font-weight=\\\"\", \"\\\"\"], xml(_d, font.fontWeight ===\n            NormalBold.Bold ? \"bold\" : \"normal\"));\n    }\n    return attribs;\n    var _a, _b, _c, _d;\n}\nfunction printObjectToXML(printObject) {\n    // <!ENTITY % print-object\n    //     \"print-object  %yes-no;  #IMPLIED\">\n    if (defined(printObject.printObject)) {\n        return (_a = [\" print-object=\\\"\", \"\\\"\"], _a.raw = [\" print-object=\\\"\", \"\\\"\"], yesNo(_a, printObject.printObject));\n    }\n    return \"\";\n    var _a;\n}\nfunction printSpacingToXML(printSpacing) {\n    // <!ENTITY % print-spacing\n    //     \"print-spacing %yes-no;  #IMPLIED\">\n    if (defined(printSpacing.printSpacing)) {\n        return (_a = [\" print-spacing=\\\"\", \"\\\"\"], _a.raw = [\" print-spacing=\\\"\", \"\\\"\"], yesNo(_a, printSpacing.printSpacing));\n    }\n    return \"\";\n    var _a;\n}\nfunction textFormattingToXML(textFormatting) {\n    // <!ENTITY % text-formatting\n    //     \"%justify;\n    //      %print-style-align;\n    //      %text-decoration;\n    //      %text-rotation;\n    //      %letter-spacing;\n    //      %line-height;\n    //      xml:lang NMTOKEN #IMPLIED TODO musicxml-interfaces\n    //      xml:space (default | preserve) #IMPLIED TODO musicxml-interfaces\n    //      %text-direction;\n    //      %enclosure;\">\n    return \"\" +\n        justifyToXML(textFormatting) +\n        printStyleAlignToXML(textFormatting) +\n        textDecorationToXML(textFormatting) +\n        textRotationToXML(textFormatting) +\n        letterSpacingToXML(textFormatting) +\n        lineHeightToXML(textFormatting) +\n        textDirectionToXML(textFormatting) +\n        enclosureToXML(textFormatting);\n}\nvar leftCenterRightToXML = {\n    1: \"right\",\n    2: \"center\",\n    0: \"left\"\n};\nfunction justifyToXML(justify) {\n    if (defined(justify.justify)) {\n        return (_a = [\" justify=\\\"\", \"\\\"\"], _a.raw = [\" justify=\\\"\", \"\\\"\"], xml(_a, leftCenterRightToXML[justify.justify]));\n    }\n    return \"\";\n    var _a;\n}\nfunction halignToXML(halign) {\n    if (defined(halign.halign)) {\n        return (_a = [\" halign=\\\"\", \"\\\"\"], _a.raw = [\" halign=\\\"\", \"\\\"\"], xml(_a, leftCenterRightToXML[halign.halign]));\n    }\n    return \"\";\n    var _a;\n}\nfunction valignToXML(valign) {\n    if (defined(valign.valign)) {\n        return (_a = [\" valign=\\\"\", \"\\\"\"], _a.raw = [\" valign=\\\"\", \"\\\"\"], xml(_a, topMiddleBottomBaselineToXML[valign.valign]));\n    }\n    return \"\";\n    var _a;\n}\nfunction printStyleAlignToXML(printStyleAlign) {\n    return \"\" +\n        printStyleToXML(printStyleAlign) +\n        halignToXML(printStyleAlign) +\n        valignToXML(printStyleAlign);\n}\nfunction textDecorationToXML(textDecoration) {\n    // <!ENTITY % text-decoration\n    //     \"underline  %number-of-lines;  #IMPLIED\n    //      overline  %number-of-lines;   #IMPLIED\n    //      line-through  %number-of-lines;   #IMPLIED\">\n    var attribs = \"\";\n    if (defined(textDecoration.underline)) {\n        attribs += (_a = [\" underline=\\\"\", \"\\\"\"], _a.raw = [\" underline=\\\"\", \"\\\"\"], xml(_a, textDecoration.underline));\n    }\n    if (defined(textDecoration.overline)) {\n        attribs += (_b = [\" overline=\\\"\", \"\\\"\"], _b.raw = [\" overline=\\\"\", \"\\\"\"], xml(_b, textDecoration.overline));\n    }\n    if (defined(textDecoration.lineThrough)) {\n        attribs += (_c = [\" line-through=\\\"\", \"\\\"\"], _c.raw = [\" line-through=\\\"\", \"\\\"\"], xml(_c, textDecoration.lineThrough));\n    }\n    return attribs;\n    var _a, _b, _c;\n}\nfunction textRotationToXML(textRotation) {\n    var attribs = \"\";\n    if (defined(textRotation.rotation)) {\n        attribs += (_a = [\" rotation=\\\"\", \"\\\"\"], _a.raw = [\" rotation=\\\"\", \"\\\"\"], xml(_a, textRotation.rotation));\n    }\n    return attribs;\n    var _a;\n}\nfunction letterSpacingToXML(letterSpacing) {\n    var attribs = \"\";\n    if (defined(letterSpacing.letterSpacing)) {\n        attribs += (_a = [\" letter-spacing=\\\"\", \"\\\"\"], _a.raw = [\" letter-spacing=\\\"\", \"\\\"\"], xml(_a, letterSpacing.letterSpacing));\n    }\n    return attribs;\n    var _a;\n}\nfunction lineHeightToXML(lineHeight) {\n    var attribs = \"\";\n    if (defined(lineHeight.lineHeight)) {\n        attribs += (_a = [\" line-height=\\\"\", \"\\\"\"], _a.raw = [\" line-height=\\\"\", \"\\\"\"], xml(_a, lineHeight.lineHeight));\n    }\n    return attribs;\n    var _a;\n}\nvar directionModeToXML = {\n    0: \"ltr\",\n    1: \"rtl\",\n    2: \"lro\",\n    3: \"rlo\"\n};\nfunction textDirectionToXML(textDirection) {\n    // <!ENTITY % text-direction\n    //     \"dir (ltr | rtl | lro | rlo) #IMPLIED\">\n    var attribs = \"\";\n    if (defined(textDirection.dir)) {\n        attribs += (_a = [\" dir=\\\"\", \"\\\"\"], _a.raw = [\" dir=\\\"\", \"\\\"\"], xml(_a, directionModeToXML[textDirection.dir]));\n    }\n    return attribs;\n    var _a;\n}\nvar enclosureShapeToXML = {\n    3: \"circle\",\n    4: \"bracket\",\n    5: \"triangle\",\n    6: \"diamond\",\n    7: \"none\",\n    1: \"square\",\n    2: \"oval\",\n    0: \"rectangle\"\n};\nfunction enclosureToXML(enclosure) {\n    var attribs = \"\";\n    if (defined(enclosure.enclosure)) {\n        attribs += (_a = [\" enclosure=\\\"\", \"\\\"\"], _a.raw = [\" enclosure=\\\"\", \"\\\"\"], xml(_a, enclosureShapeToXML[enclosure.enclosure]));\n    }\n    return attribs;\n    var _a;\n}\nfunction levelDisplayToXML(levelDisplay) {\n    var attribs = \"\";\n    if (defined(levelDisplay.bracket)) {\n        attribs += (_a = [\" bracket=\\\"\", \"\\\"\"], _a.raw = [\" bracket=\\\"\", \"\\\"\"], yesNo(_a, levelDisplay.bracket));\n    }\n    if (levelDisplay.size >= SymbolSize.Unspecified) {\n        attribs += (_b = [\" size=\\\"\", \"\\\"\"], _b.raw = [\" size=\\\"\", \"\\\"\"], xml(_b, symbolSizeToXML[levelDisplay.size]));\n    }\n    if (defined(levelDisplay.parentheses)) {\n        attribs += (_c = [\" parentheses=\\\"\", \"\\\"\"], _c.raw = [\" parentheses=\\\"\", \"\\\"\"], yesNo(_c, levelDisplay.bracket));\n    }\n    return attribs;\n    var _a, _b, _c;\n}\nfunction bendSoundToXML(bendSound) {\n    var attribs = \"\";\n    if (defined(bendSound.accelerate)) {\n        attribs += (_a = [\" accelerate=\\\"\", \"\\\"\"], _a.raw = [\" accelerate=\\\"\", \"\\\"\"], yesNo(_a, bendSound.accelerate));\n    }\n    if (defined(bendSound.beats)) {\n        attribs += (_b = [\" beats=\\\"\", \"\\\"\"], _b.raw = [\" beats=\\\"\", \"\\\"\"], xml(_b, bendSound.beats));\n    }\n    if (defined(bendSound.firstBeat)) {\n        attribs += (_c = [\" first-beat=\\\"\", \"\\\"\"], _c.raw = [\" first-beat=\\\"\", \"\\\"\"], xml(_c, bendSound.firstBeat));\n    }\n    if (defined(bendSound.lastBeat)) {\n        attribs += (_d = [\" last-beat=\\\"\", \"\\\"\"], _d.raw = [\" last-beat=\\\"\", \"\\\"\"], xml(_d, bendSound.lastBeat));\n    }\n    return attribs;\n    var _a, _b, _c, _d;\n}\nvar upperMainBelowToXML = {\n    1: \"main\",\n    2: \"below\",\n    0: \"upper\"\n};\nvar wholeHalfUnisonToXML = {\n    2: \"unison\",\n    0: \"whole\",\n    1: \"half\"\n};\nvar wholeHalfNoneToXML = {\n    3: \"none\",\n    0: \"whole\",\n    1: \"half\"\n};\nfunction trillSoundToXML(trillSound) {\n    // <!ENTITY % trill-sound\n    //     \"start-note    (upper | main | below)  #IMPLIED\n    //      trill-step    (whole | half | unison) #IMPLIED\n    //      two-note-turn (whole | half | none)   #IMPLIED\n    //      accelerate    %yes-no; #IMPLIED\n    //      beats         CDATA    #IMPLIED\n    //      second-beat   CDATA    #IMPLIED\n    //      last-beat     CDATA    #IMPLIED\">\n    var attribs = \"\";\n    if (defined(trillSound.startNote)) {\n        attribs += (_a = [\" start-note=\\\"\", \"\\\"\"], _a.raw = [\" start-note=\\\"\", \"\\\"\"], xml(_a, upperMainBelowToXML[trillSound.startNote]));\n    }\n    if (defined(trillSound.trillStep)) {\n        attribs += (_b = [\" trill-step=\\\"\", \"\\\"\"], _b.raw = [\" trill-step=\\\"\", \"\\\"\"], xml(_b, wholeHalfUnisonToXML[trillSound.trillStep]));\n    }\n    if (defined(trillSound.twoNoteTurn)) {\n        attribs += (_c = [\" two-note-turn=\\\"\", \"\\\"\"], _c.raw = [\" two-note-turn=\\\"\", \"\\\"\"], xml(_c, wholeHalfNoneToXML[trillSound.twoNoteTurn]));\n    }\n    if (defined(trillSound.accelerate)) {\n        attribs += (_d = [\" accelerate=\\\"\", \"\\\"\"], _d.raw = [\" accelerate=\\\"\", \"\\\"\"], yesNo(_d, trillSound.accelerate));\n    }\n    if (defined(trillSound.beats)) {\n        attribs += (_e = [\" beats=\\\"\", \"\\\"\"], _e.raw = [\" beats=\\\"\", \"\\\"\"], xml(_e, trillSound.beats));\n    }\n    if (defined(trillSound.secondBeat)) {\n        attribs += (_f = [\" second-beat=\\\"\", \"\\\"\"], _f.raw = [\" second-beat=\\\"\", \"\\\"\"], xml(_f, trillSound.secondBeat));\n    }\n    if (defined(trillSound.lastBeat)) {\n        attribs += (_g = [\" last-beat=\\\"\", \"\\\"\"], _g.raw = [\" last-beat=\\\"\", \"\\\"\"], xml(_g, trillSound.lastBeat));\n    }\n    return attribs;\n    var _a, _b, _c, _d, _e, _f, _g;\n}\nfunction slashToXML(slash) {\n    if (defined(slash.slash)) {\n        return (_a = [\" slash=\\\"\", \"\\\"\"], _a.raw = [\" slash=\\\"\", \"\\\"\"], yesNo(_a, slash.slash));\n    }\n    return \"\";\n    var _a;\n}\nfunction mordentSubsetToXML(mordent) {\n    //     long %yes-no; #IMPLIED\n    //     approach %above-below; #IMPLIED\n    //     departure %above-below; #IMPLIED\n    var attribs = \"\";\n    if (defined(mordent.long)) {\n        attribs += (_a = [\" long=\\\"\", \"\\\"\"], _a.raw = [\" long=\\\"\", \"\\\"\"], yesNo(_a, mordent.long));\n    }\n    if (defined(mordent.approach)) {\n        attribs += (_b = [\" approach=\\\"\", \"\\\"\"], _b.raw = [\" approach=\\\"\", \"\\\"\"], xml(_b, mordent.approach === AboveBelow.Above ?\n            \"above\" : \"below\"));\n    }\n    if (defined(mordent.departure)) {\n        attribs += (_c = [\" departure=\\\"\", \"\\\"\"], _c.raw = [\" departure=\\\"\", \"\\\"\"], xml(_c, mordent.departure === AboveBelow.Above ?\n            \"above\" : \"below\"));\n    }\n    return attribs;\n    var _a, _b, _c;\n}\nfunction upDownToXML(upDown) {\n    if (defined(upDown.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, upDown.type ? \"down\" : \"up\"));\n    }\n    return \"\";\n    var _a;\n}\nfunction topBottomToXML(topBottom) {\n    if (defined(topBottom.type)) {\n        return (_a = [\" type=\\\"\", \"\\\"\"], _a.raw = [\" type=\\\"\", \"\\\"\"], xml(_a, topBottom.type ? \"bottom\" : \"top\"));\n    }\n    return \"\";\n    var _a;\n}\nfunction colorToXML(color) {\n    // <!ENTITY % color\n    //     \"color CDATA #IMPLIED\">\n    if (defined(color.color)) {\n        return (_a = [\" color=\\\"\", \"\\\"\"], _a.raw = [\" color=\\\"\", \"\\\"\"], xml(_a, color.color));\n    }\n    return \"\";\n    var _a;\n}\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/musicxml-interfaces/lib/index.js\n// module id = 2\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/path-browserify/index.js\n// module id = 3\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/~/process/browser.js\n// module id = 4\n// module chunks = 0","\nexport {VextabItem} from \"./tabs/VextabItem\";\nexport {VexmxlTablature} from \"./tabs/VexmxlTablature\";\nexport {VexmxlMeasure} from \"./tabs/VexmxlMeasure\";\nexport {VexmxlTime} from \"./tabs/VexmxlTime\";\nexport {VexmxlChord} from \"./tabs/VexmxlChord\";\nexport {VexmxlRest} from \"./tabs/VexmxlRest\";\nexport {VexmxlNote} from \"./tabs/VexmxlNote\";\nexport {VexMxl} from \"./vexmxl\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import {VexmxlNote} from \"./VexmxlNote\";\nimport {VexmxlTime} from \"./VexmxlTime\";\n\nexport class VexmxlChord extends VexmxlTime {\n\tprivate notes: VexmxlNote[] = [];\n\n\tpublic addNote(note: VexmxlNote): void {\n\t\tthis.notes.push(note);\n\t}\n\n\tpublic notEmpty(): boolean {\n\t\treturn this.notes.length > 0;\n\t}\n\n\tprotected representation(): string {\n\t\treturn \"(\" + this.notes.join (\".\") + \")\";\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlChord.ts","import {VextabItem} from \"./VextabItem\";\nimport {VexmxlTime} from \"./VexmxlTime\";\n\nexport class VexmxlMeasure implements VextabItem {\n\tprivate times: VexmxlTime[] = [];\n\n\tconstructor() {}\n\n\tpublic addTime(time: VexmxlTime): void {\n\t\tthis.times.push(time);\n\t}\n\n\tpublic toString(): string {\n\t\treturn \"  notes \" + this.times.join(\" \");\n\t}\n\n\tpublic notEmpty(): boolean {\n\t\treturn this.times.length > 0;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlMeasure.ts","import {VextabItem} from \"./VextabItem\";\n\nexport class VexmxlNote implements VextabItem {\n\n\tconstructor(private fret: number, private str: number) {}\n\n\tpublic toString(): string {\n\t\treturn this.fret + \"/\" + this.str;\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlNote.ts","\nimport {VexmxlTime} from \"./VexmxlTime\";\nexport class VexmxlRest extends VexmxlTime {\n\n\tprotected representation(): string {\n\t\treturn \"##\";\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlRest.ts","import {VextabItem} from \"./VextabItem\";\nimport {VexmxlMeasure} from \"./VexmxlMeasure\";\n\nconst MEASURE_LENGTH: number = 400;\nexport class VexmxlTablature implements VextabItem {\n\tprivate measures: VexmxlMeasure[] = [];\n\n\tconstructor(private displaySheet: boolean = true, private scale: number = 1.0) {}\n\n\tpublic addMeasure(measure: VexmxlMeasure): void {\n\t\tthis.measures.push(measure);\n\t}\n\n\tpublic toString(): string {\n\t\tlet width = MEASURE_LENGTH * this.measures.length;\n\t\tlet options = \"options width=\" + width + \" scale=\" + this.scale;\n\n\t\treturn options + \"\\ntabstave notation= \" + this.displaySheet + \"\\n\" + this.measures.join(\"|\\n\");\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/tabs/VexmxlTablature.ts","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// child_process (ignored)\n// module id = 11\n// module chunks = 0","/* (ignored) */\n\n\n//////////////////\n// WEBPACK FOOTER\n// xmldom (ignored)\n// module id = 12\n// module chunks = 0"],"sourceRoot":""}